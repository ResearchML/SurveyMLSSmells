Repo,FileName,Hash,author,author_date,author_email,commiter,commiter_date,commiter_email,cloc,added,removed,message
tada/pljava,,,,,,,,,,,
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava-packaging/src/main/java/Node.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava-so/src/main/c/Backend.c,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava-so/src/main/c/type/Type.c,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/module-info.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/policy/TrialPolicy.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/policy/package-info.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Handler.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,1963eb91930ef316abefbd705a7e188070da821a,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-28T01:34:46Z,chap@anastigmatix.net,2108,2064,44,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,5049282f76c9b30336848c2c20c24a62351cad64,Chapman Flack,2020-11-27T23:05:29Z,chap@anastigmatix.net,Chapman Flack,2020-11-27T23:05:29Z,chap@anastigmatix.net,1,1,0,Poke migration-management versions for 1.6.2
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,62535fdb6f15c3db249e665a790fc5810c646669,Chapman Flack,2020-11-27T23:05:29Z,chap@anastigmatix.net,Chapman Flack,2020-11-27T23:05:29Z,chap@anastigmatix.net,11,7,4,"Name a schema classloader after its schema

Since Java 9, class loaders can have names, They show up
in stack traces. That could be useful."
,pljava-packaging/src/main/java/Node.java,91b85c49d5f55657cbd4193c161b2529efa2e8bb,Chapman Flack,2020-11-27T17:48:59Z,chap@anastigmatix.net,Chapman Flack,2020-11-27T17:48:59Z,chap@anastigmatix.net,11,10,1,"Make loadPLJava() work on both Windows flavors

The computation of module.pathname in -packaging/pom.xml drops
the .lib suffix on Windows. That has to happen in loadPLJava()
also. MinGW-w64 accepts either spelling, but MSVC is fussier."
,pljava-packaging/src/main/java/Node.java,8a6b1b45bc57ce59adf2a7f8fa1ac1dcf1999ca9,Chapman Flack,2020-11-27T04:04:04Z,chap@anastigmatix.net,Chapman Flack,2020-11-27T04:04:04Z,chap@anastigmatix.net,449,419,30,"Test some other behaviors subject to bit rot

If not routinely tested, there are some other corners that may be
prone to bit rot, such as:

- make sure DROP EXTENSION works cleanly, and leaves nothing behind.

- make sure LOAD 'pljava-so-...'; works to load as a non-extension
  (that was introduced for use in the pre-extension versions of PG,
  but still covers one possibly important use case: it works when
  you don't have access to install PL/Java in the specific server
  directories that CREATE EXTENSION requires, but you can install in
  some other directory readable by the server, set pljava.module_path
  to correctly locate the jar files, and pass LOAD the correct path
  to the shared object).

- Make sure the after-the-fact CREATE EXTENSION FROM unpackaged; still
  works. PG upstream considers that obsolete and it is removed from
  PG 13 (but there an equivalent two-step sequence, CREATE EXTENSION
  pljava VERSION unpackaged; followed in a new session by ALTER EXTENSION
  pljava UPDATE; will still work). For PL/Java there is still a
  possibility that CREATE EXTENSION fails on the first try if some
  settings aren't right, and shifts to an exploratory installation
  that succeeds when the wrong settings are fixed, and then prints
  the CREATE FROM unpackaged command(s) that will be needed to finish
  the job.

The from-unpackaged extension script had bit-rotted; with the addition
of validators back in a81ef5e, the CREATE LANGUAGE commands needed to
be removed from the script, and the alias_java_language function born
in 5565a3c should have been added.

Update Node.java to record the installed location of the shared object
and offer a loadPLJava() method that issues the right LOAD command.
Other small fixes. Apparently the pgjdbc-ng ResultSetMetaData can
return precision = -1 for some data types, which JDBC does not consider
valid. WebRowSet.populate() takes that in stride and just presents it
as 0 instead, but RowSetMetaDataImpl.setPrecision() rejects it.

On Windows, I think installJar was constructing URIs with Windows
backslashes as separators. And it was working .... With any luck,
constructing them as proper URIs will also work.

These blobs of jshell in the three different CI service configs are
by now getting long enough, and similar enough, to be ripe for
comparing one last time and factoring out one common version, but
that can be a chore for another day."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,fd125b0c9d6e797cbd1ee42246a8a5b408bc3776,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,20,18,2,Merge pull request #335 from chore/REL1_6_STABLE/fallthrough
,pljava-so/src/main/c/Backend.c,fd125b0c9d6e797cbd1ee42246a8a5b408bc3776,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,20,18,2,Merge pull request #335 from chore/REL1_6_STABLE/fallthrough
,pljava-so/src/main/c/type/Type.c,fd125b0c9d6e797cbd1ee42246a8a5b408bc3776,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-26T00:53:36Z,chap@anastigmatix.net,20,18,2,Merge pull request #335 from chore/REL1_6_STABLE/fallthrough
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,2081148d5ed080ecea66efe9608051e9709d8472,Chapman Flack,2020-11-25T04:20:17Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T04:20:17Z,chap@anastigmatix.net,4,2,2,"Two bits of Java lint

Not strictly related to the fallthrough business, but of the
general nature of lint, and hardly worth a pull request of its own."
,pljava-so/src/main/c/Backend.c,2c8d99282da80c3372b77c7ea162480eb36ed8f8,Chapman Flack,2020-11-21T01:34:58Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:28:26Z,chap@anastigmatix.net,16,16,0,"Add FALLTHROUGH comments in C switch statements

CI logs indicate some PG 13 builds, anyway, are giving
-Wimplicit-fallthrough=3 to gcc. The gcc docs say with =3, a
/*FALLTHROUGH*/ comment should be recognized.

Warnings are also being generated for a switch in Type.c where
they should not be: elog(ERROR is already marked with pg_unreachable
in elog.h. I wonder whether adding an explicit pg_unreachable
will work any better."
,pljava-so/src/main/c/type/Type.c,2c8d99282da80c3372b77c7ea162480eb36ed8f8,Chapman Flack,2020-11-21T01:34:58Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:28:26Z,chap@anastigmatix.net,16,16,0,"Add FALLTHROUGH comments in C switch statements

CI logs indicate some PG 13 builds, anyway, are giving
-Wimplicit-fallthrough=3 to gcc. The gcc docs say with =3, a
/*FALLTHROUGH*/ comment should be recognized.

Warnings are also being generated for a switch in Type.c where
they should not be: elog(ERROR is already marked with pg_unreachable
in elog.h. I wonder whether adding an explicit pg_unreachable
will work any better."
,pljava-so/src/main/c/Backend.c,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/module-info.java,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/org/postgresql/pljava/policy/TrialPolicy.java,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/org/postgresql/pljava/policy/package-info.java,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/org/postgresql/pljava/sqlj/Handler.java,700b8b8e686394d7479e2c925f212f33274da5b2,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-25T01:27:35Z,chap@anastigmatix.net,945,937,8,Merge pull request #334 from bug/REL1_6_STABLE/issue331
,pljava/src/main/java/org/postgresql/pljava/policy/TrialPolicy.java,3b25cf45b292bd5e8ba2cf2e7794d94497899cbf,Chapman Flack,2020-11-23T05:53:01Z,chap@anastigmatix.net,Chapman Flack,2020-11-23T05:53:01Z,chap@anastigmatix.net,1,0,1,A duplicate line snuck in somehow
,pljava/src/main/java/org/postgresql/pljava/policy/TrialPolicy.java,d2d03a320f149fcf3bd61073be2d94e821bda4a4,Chapman Flack,2020-11-23T04:15:22Z,chap@anastigmatix.net,Chapman Flack,2020-11-23T04:15:22Z,chap@anastigmatix.net,24,21,3,"Avoid blocking to log from a non-PG thread

There isn't a perfect method available (yet) to inquire ""could I
doInPG() or log() at this moment without blocking?"", so this check
may unnecessarily send the message off to System.err on occasions
when log() would have worked fine. But it's better than blocking.

In passing, add a permission to read another property that the
Java runtime started using in Java 14 but forgot to give itself
permission to read. It's at the false-alarm level of severity, as
the runtime behaves gracefully when unable to read the property,
but again, if using TrialPolicy, it kind of spams the log."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Handler.java,b03e86f07bbf4e48690590b329671b2a451d91db,Chapman Flack,2020-11-22T22:08:31Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T22:08:31Z,chap@anastigmatix.net,2,1,1,"Old typo, benign but spams the TrialPolicy log

The provider() method on a service provider has to be static.
Misdeclaring this one never broke anything, as the service loader
simply fell back on the constructor, but later service loader
passes after the policy gets installed would cause false-alarm
log entries from the constructor."
,pljava/src/main/java/module-info.java,206a963ab056bac3506e3dc0257e1eb9f85094bd,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,225,221,4,"Add TrialPolicy$Permission

Java has an AllPermission, which can be granted in a TrialPolicy
in order to identify, log, and allow any and all requested permissions
that are not granted in the normal policy.

Some may not be comfortable proceeding that way, and because Java
does not have negative permissions, there is no way to say ""grant
AllPermission except for these that I would like to exclude"".

Therefore, org.postgresql.pljava.policy.TrialPolicy$Permission is
provided here, as pretty much exactly ""AllPermission except for
a couple dozen unsurprising exclusions."" This permission can be
granted in a TrialPolicy (and, in the unlikely event that any of
the permissions it excludes also have to be granted there, they
can be granted explicitly, in the usual way).

A package in a named module that implements any new Permission
must be exported to java.base; this is moved to the new package
org.postgresql.pljava.policy and so exported."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,206a963ab056bac3506e3dc0257e1eb9f85094bd,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,225,221,4,"Add TrialPolicy$Permission

Java has an AllPermission, which can be granted in a TrialPolicy
in order to identify, log, and allow any and all requested permissions
that are not granted in the normal policy.

Some may not be comfortable proceeding that way, and because Java
does not have negative permissions, there is no way to say ""grant
AllPermission except for these that I would like to exclude"".

Therefore, org.postgresql.pljava.policy.TrialPolicy$Permission is
provided here, as pretty much exactly ""AllPermission except for
a couple dozen unsurprising exclusions."" This permission can be
granted in a TrialPolicy (and, in the unlikely event that any of
the permissions it excludes also have to be granted there, they
can be granted explicitly, in the usual way).

A package in a named module that implements any new Permission
must be exported to java.base; this is moved to the new package
org.postgresql.pljava.policy and so exported."
,pljava/src/main/java/org/postgresql/pljava/policy/TrialPolicy.java,206a963ab056bac3506e3dc0257e1eb9f85094bd,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,225,221,4,"Add TrialPolicy$Permission

Java has an AllPermission, which can be granted in a TrialPolicy
in order to identify, log, and allow any and all requested permissions
that are not granted in the normal policy.

Some may not be comfortable proceeding that way, and because Java
does not have negative permissions, there is no way to say ""grant
AllPermission except for these that I would like to exclude"".

Therefore, org.postgresql.pljava.policy.TrialPolicy$Permission is
provided here, as pretty much exactly ""AllPermission except for
a couple dozen unsurprising exclusions."" This permission can be
granted in a TrialPolicy (and, in the unlikely event that any of
the permissions it excludes also have to be granted there, they
can be granted explicitly, in the usual way).

A package in a named module that implements any new Permission
must be exported to java.base; this is moved to the new package
org.postgresql.pljava.policy and so exported."
,pljava/src/main/java/org/postgresql/pljava/policy/package-info.java,206a963ab056bac3506e3dc0257e1eb9f85094bd,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T21:48:02Z,chap@anastigmatix.net,225,221,4,"Add TrialPolicy$Permission

Java has an AllPermission, which can be granted in a TrialPolicy
in order to identify, log, and allow any and all requested permissions
that are not granted in the normal policy.

Some may not be comfortable proceeding that way, and because Java
does not have negative permissions, there is no way to say ""grant
AllPermission except for these that I would like to exclude"".

Therefore, org.postgresql.pljava.policy.TrialPolicy$Permission is
provided here, as pretty much exactly ""AllPermission except for
a couple dozen unsurprising exclusions."" This permission can be
granted in a TrialPolicy (and, in the unlikely event that any of
the permissions it excludes also have to be granted there, they
can be granted explicitly, in the usual way).

A package in a named module that implements any new Permission
must be exported to java.base; this is moved to the new package
org.postgresql.pljava.policy and so exported."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,41d9861316ade0328d0ba2d75e825a2153fe9cc7,Chapman Flack,2020-11-21T15:23:37Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T20:45:35Z,chap@anastigmatix.net,259,259,0,"Implement a TrialPolicy

The system property org.postgresql.pljava.policy.trial, if supplied,
is a URI naming another policy file that can serve as a second chance
for accesses denied by the real policy laid out by pljava.policy_urls.
If the denied access is allowed by this policy, it is allowed, but
logged, so needed permissions can be identified while running code.
If denied by this policy, the denial is final.

A good bit of honest work in this policy goes to abbreviating the
log output in a useful way. The approach is to keep one stack frame
above and one below each crossing of a module or protection-domain
boundary, with ... replacing intermediate frames within the same
module/domain, and the code source/principals of the failing domain
shown at the appropriate position in the trace."
,pljava/src/main/java/org/postgresql/pljava/internal/TrialPolicy.java,41d9861316ade0328d0ba2d75e825a2153fe9cc7,Chapman Flack,2020-11-21T15:23:37Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T20:45:35Z,chap@anastigmatix.net,259,259,0,"Implement a TrialPolicy

The system property org.postgresql.pljava.policy.trial, if supplied,
is a URI naming another policy file that can serve as a second chance
for accesses denied by the real policy laid out by pljava.policy_urls.
If the denied access is allowed by this policy, it is allowed, but
logged, so needed permissions can be identified while running code.
If denied by this policy, the denial is final.

A good bit of honest work in this policy goes to abbreviating the
log output in a useful way. The approach is to keep one stack frame
above and one below each crossing of a module or protection-domain
boundary, with ... replacing intermediate frames within the same
module/domain, and the code source/principals of the failing domain
shown at the appropriate position in the trace."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,a5fe818b9edbb04f6c3221310a9c2e3b8cb5eb9e,Chapman Flack,2020-11-22T17:08:55Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T17:08:55Z,chap@anastigmatix.net,214,203,11,Merge pull request #333 from feature/REL1_6_STABLE/xsltexamples
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,969e8884f088b82a4553a97f27ef5506e33a3253,Chapman Flack,2020-11-22T17:07:33Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T17:07:33Z,chap@anastigmatix.net,11,9,2,"Merge pull request #332 from bug/REL1_6_STABLE/issue330

The one failed Travis build appears to have been a Travis issue."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,969e8884f088b82a4553a97f27ef5506e33a3253,Chapman Flack,2020-11-22T17:07:33Z,chap@anastigmatix.net,Chapman Flack,2020-11-22T17:07:33Z,chap@anastigmatix.net,11,9,2,"Merge pull request #332 from bug/REL1_6_STABLE/issue330

The one failed Travis build appears to have been a Travis issue."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,165fe6f6f654805c158b59406b5d5ce73cfe74f2,Chapman Flack,2020-11-21T01:08:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-21T01:08:35Z,chap@anastigmatix.net,2,1,1,Fix a lint warning
,pljava-so/src/main/c/Backend.c,5791fe9e250d0baf6242916162a056de195f653c,Chapman Flack,2020-11-21T00:29:18Z,chap@anastigmatix.net,Chapman Flack,2020-11-21T00:29:18Z,chap@anastigmatix.net,102,95,7,"Don't fail reading policy_urls as non-superuser

Have to access the value directly for internal purposes, as
GetConfigOption will honor the GUC_SUPERUSER_ONLY on it.

Add tests as non-superuser to the Travis and AppVeyor configs.
Not having any was an oversight.

In passing, try adding PG 13 and Java 15 to the Travis and AppVeyor
builds. I have not otherwise checked whether those are available
yet in those services. This should be a way to find out."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,faf98835e05e394a2c8b261fe32f0dc7ab251ca4,Chapman Flack,2020-11-20T23:16:10Z,chap@anastigmatix.net,Chapman Flack,2020-11-20T23:16:10Z,chap@anastigmatix.net,2,2,0,"Function args in REVOKE aren't optional pre-PG10

It's tedious to duplicate them in an @SQLAction GRANT or REVOKE.
Maybe that indicates it would be useful to add grant/revoke support
in annotations someday."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,5e6955a8c594534c15fea9359bf55360fd7a12b3,Chapman Flack,2020-11-20T03:05:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-20T03:05:35Z,chap@anastigmatix.net,9,8,1,"Fix copy-pasto in Operator annotation checking

and add a regression test. Addresses #330."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,5e6955a8c594534c15fea9359bf55360fd7a12b3,Chapman Flack,2020-11-20T03:05:35Z,chap@anastigmatix.net,Chapman Flack,2020-11-20T03:05:35Z,chap@anastigmatix.net,9,8,1,"Fix copy-pasto in Operator annotation checking

and add a regression test. Addresses #330."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,e3d98e9b22768020a02d8887f719e8e6ade76b45,Chapman Flack,2020-11-20T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2020-11-20T02:41:30Z,chap@anastigmatix.net,84,83,1,"Add example of XSLT 1.0 calling a Java method

The ability in xalan to call out to Java methods can be extremely
useful in the otherwise very limited XSLT 1.0 dialect. But it sorely
needs an example, being fiddly enough to get right the first time
that newcomers might otherwise flee in frustration."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,9d2490145fd720b11b168d4cbe02d0c8e3429b6f,Chapman Flack,2020-11-18T02:40:09Z,chap@anastigmatix.net,Chapman Flack,2020-11-20T02:19:09Z,chap@anastigmatix.net,128,118,10,"Evolve transformXML example with adjust & indent

Although XSLT 1.0 is very much like punishment when a modern version
is available with Saxon, it does have the advantage of being included
in Java rather than a large separate download. Now that it's usable,
the example functions may as well be polished a bit (say, by making
the uninteresting-but-for-testing 'how' parameters optional, and
accepting an 'adjust' parameter) and made suitable for day-to-day use.

One useful feature of the XSLT 1.0 transformer is the ability to indent
XML: great for readability, not available in core PostgreSQL, and
easy to do here. It doesn't require any particular transformation
defined; the default identity transform from the no-argument
TransformerFactory.newTransformer is enough. So make it possible to pass
null for transformName for a plain identity transform, and add optional
indent and indentWidth direct arguments to make it simple.

This can also serve as an example to clarify just how one gets xalan
to indent, as the details are subtle enough to have needed hashing out
on Stack Overflow [1].

[1] https://stackoverflow.com/a/60610218/4062350"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Cast.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-api/src/test/java/LexicalsTest.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Aggregates.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ReturnComposite.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,52498bd2ff8657cf775b1fd5ad5c8c1dee31dd72,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T02:15:21Z,chap@anastigmatix.net,9139,6752,2387,Merge branch 'REL1_6_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,0000d87625bad9c689564580e6e6d3034065eaa7,Chapman Flack,2020-11-17T00:50:27Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T00:50:27Z,chap@anastigmatix.net,1,1,0,Poke migration-management versions for 1.6.1
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,9706f20d16c8075e4fbf7e9cb693832a48e1bd83,Chapman Flack,2020-11-17T00:48:24Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T00:48:24Z,chap@anastigmatix.net,21,20,1,"Merge branch 'REL1_5_STABLE' into REL1_6_STABLE

The breaking-out of pre-1.6 release notes in the 1_6 branch
is not handled perfectly by git; it recognizes that the pre-1_6
file began as a copy of the original, but it doesn't infer that
changes merging up from 1_5 should be put there, leaving a small
chore during conflict resolution. I suppose that may happen
every time, but not be too burdensome."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,6d8f8fd8c94b29dbcce1adc8a4cbf2d3abf7015c,Chapman Flack,2020-11-17T00:30:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-17T00:30:46Z,chap@anastigmatix.net,1,1,0,Poke migration-management versions for 1.5.7
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,155f2900a64a1f8d1123663e92a003dbc9e0d8d6,Chapman Flack,2020-11-16T22:38:17Z,chap@anastigmatix.net,Chapman Flack,2020-11-16T22:38:17Z,chap@anastigmatix.net,134,60,74,"Merge pull request #329 from bug/REL1_6_STABLE/issue328

The failed Travis runs, all on Mac OS ""An error occurred while
generating the build script"", seem to indicate a Travis issue,
not an issue with the PR."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,056e4b986e8216029faa7f3ee7cddd21696bc79e,Chapman Flack,2020-11-16T05:05:33Z,chap@anastigmatix.net,Chapman Flack,2020-11-16T05:05:33Z,chap@anastigmatix.net,8,4,4,"Improve two shouldn't-happen messages

Those weren't quite what you'd call polished."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,05a0604125bf55c6fb6d9463c7bf76d6817c0e47,Chapman Flack,2020-11-16T02:08:31Z,chap@anastigmatix.net,Chapman Flack,2020-11-16T02:08:31Z,chap@anastigmatix.net,123,59,64,"Better workaround for javac 10 and 11 issue

Revert the smelly workaround added in c763cee for javac 10 and 11
misbehaving when passed a --release naming an earlier release, and
add a better workaround in DDRProcessor itself. Now it is possible
to build for --release 9 whichever toolchain is used for the build,
and that was the original intent and so is much more satisfying.

It turned out the same issue (unsurprisingly, in retrospect) would
also bite people building user code, and to have no better answer
for them than ""fudge your target release if building with 10 or 11""
would be hard to stomach.

Addresses #328."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,3500ea6f0710304a5a0e6291cb71656f007b3816,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,103,56,47,"Fix some broken doc links

Some result from modularizing code for Java 9, which adds one new
directory level in apidocs URLs, and some required adding new HTML
anchors by hand in the Javadocs where they are linked into from
Markdown docs, because Maven's Markdown processor insists on
corrupting URLs of the form Javadoc generates for method details,
as noted earlier in 5565a3c. This is irritating and hardly scalable,
but for now there aren't that many places, so the anchors are added.

It's possible Maven's Markdown processor doesn't get 100% of the
blame; it looks as if Javadoc 15 produces different fragment IDs
for method signatures than whichever previous version did that was
used when these links were made.

In passing, noticed that the noun was missing from several of the
descriptions in Commands.java: ""The replace_jar will replace ...""
and so on. That raises the question what noun to use. Command?
Function? 9075-13 calls them 'procedures', which isn't entirely
satisfying (some of them return stuff), but it's the standard,
so 'procedures' it is."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,3500ea6f0710304a5a0e6291cb71656f007b3816,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,103,56,47,"Fix some broken doc links

Some result from modularizing code for Java 9, which adds one new
directory level in apidocs URLs, and some required adding new HTML
anchors by hand in the Javadocs where they are linked into from
Markdown docs, because Maven's Markdown processor insists on
corrupting URLs of the form Javadoc generates for method details,
as noted earlier in 5565a3c. This is irritating and hardly scalable,
but for now there aren't that many places, so the anchors are added.

It's possible Maven's Markdown processor doesn't get 100% of the
blame; it looks as if Javadoc 15 produces different fragment IDs
for method signatures than whichever previous version did that was
used when these links were made.

In passing, noticed that the noun was missing from several of the
descriptions in Commands.java: ""The replace_jar will replace ...""
and so on. That raises the question what noun to use. Command?
Function? 9075-13 calls them 'procedures', which isn't entirely
satisfying (some of them return stuff), but it's the standard,
so 'procedures' it is."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,3500ea6f0710304a5a0e6291cb71656f007b3816,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,Chapman Flack,2020-11-15T00:15:38Z,chap@anastigmatix.net,103,56,47,"Fix some broken doc links

Some result from modularizing code for Java 9, which adds one new
directory level in apidocs URLs, and some required adding new HTML
anchors by hand in the Javadocs where they are linked into from
Markdown docs, because Maven's Markdown processor insists on
corrupting URLs of the form Javadoc generates for method details,
as noted earlier in 5565a3c. This is irritating and hardly scalable,
but for now there aren't that many places, so the anchors are added.

It's possible Maven's Markdown processor doesn't get 100% of the
blame; it looks as if Javadoc 15 produces different fragment IDs
for method signatures than whichever previous version did that was
used when these links were made.

In passing, noticed that the noun was missing from several of the
descriptions in Commands.java: ""The replace_jar will replace ...""
and so on. That raises the question what noun to use. Command?
Function? 9075-13 calls them 'procedures', which isn't entirely
satisfying (some of them return stuff), but it's the standard,
so 'procedures' it is."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,f358a911dff88da1aa6afc4aedfde9b2edfcbb20,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T04:52:03Z,chap@anastigmatix.net,2333,2143,190,Merge pull request #327 from feature/REL1_6_STABLE/operator
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,14c85d229b43fe4274526da562275ab72dd0218d,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,19,12,7,"Fix a copy/pasto and other minor doc fixes

The copy/pasto (magnitudeNE rather than componentsNE) had no functional
effect, but was a bit sloppy.

Some of the annotations (including some of the oldest original ones)
were missing @Documented, and therefore not showing up in javadocs.
(Aggregate and BaseUDT are used in ComplexScalar, edited in this PR,
so those changes have an excuse to be included here. MappedUDT and
Trigger aren't, but it's the same change.)

I am tempted by the idea of removing @Documented from @SQLAction ...
its values are usually longwinded, and mess up the formatting of
javadocs, and might just be better looked up in the source when
somebody wants to know. But not making that change just now."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,14c85d229b43fe4274526da562275ab72dd0218d,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,19,12,7,"Fix a copy/pasto and other minor doc fixes

The copy/pasto (magnitudeNE rather than componentsNE) had no functional
effect, but was a bit sloppy.

Some of the annotations (including some of the oldest original ones)
were missing @Documented, and therefore not showing up in javadocs.
(Aggregate and BaseUDT are used in ComplexScalar, edited in this PR,
so those changes have an excuse to be included here. MappedUDT and
Trigger aren't, but it's the same change.)

I am tempted by the idea of removing @Documented from @SQLAction ...
its values are usually longwinded, and mess up the formatting of
javadocs, and might just be better looked up in the source when
somebody wants to know. But not making that change just now."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,14c85d229b43fe4274526da562275ab72dd0218d,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,19,12,7,"Fix a copy/pasto and other minor doc fixes

The copy/pasto (magnitudeNE rather than componentsNE) had no functional
effect, but was a bit sloppy.

Some of the annotations (including some of the oldest original ones)
were missing @Documented, and therefore not showing up in javadocs.
(Aggregate and BaseUDT are used in ComplexScalar, edited in this PR,
so those changes have an excuse to be included here. MappedUDT and
Trigger aren't, but it's the same change.)

I am tempted by the idea of removing @Documented from @SQLAction ...
its values are usually longwinded, and mess up the formatting of
javadocs, and might just be better looked up in the source when
somebody wants to know. But not making that change just now."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,14c85d229b43fe4274526da562275ab72dd0218d,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,19,12,7,"Fix a copy/pasto and other minor doc fixes

The copy/pasto (magnitudeNE rather than componentsNE) had no functional
effect, but was a bit sloppy.

Some of the annotations (including some of the oldest original ones)
were missing @Documented, and therefore not showing up in javadocs.
(Aggregate and BaseUDT are used in ComplexScalar, edited in this PR,
so those changes have an excuse to be included here. MappedUDT and
Trigger aren't, but it's the same change.)

I am tempted by the idea of removing @Documented from @SQLAction ...
its values are usually longwinded, and mess up the formatting of
javadocs, and might just be better looked up in the source when
somebody wants to know. But not making that change just now."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,14c85d229b43fe4274526da562275ab72dd0218d,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-13T02:29:07Z,chap@anastigmatix.net,19,12,7,"Fix a copy/pasto and other minor doc fixes

The copy/pasto (magnitudeNE rather than componentsNE) had no functional
effect, but was a bit sloppy.

Some of the annotations (including some of the oldest original ones)
were missing @Documented, and therefore not showing up in javadocs.
(Aggregate and BaseUDT are used in ComplexScalar, edited in this PR,
so those changes have an excuse to be included here. MappedUDT and
Trigger aren't, but it's the same change.)

I am tempted by the idea of removing @Documented from @SQLAction ...
its values are usually longwinded, and mess up the formatting of
javadocs, and might just be better looked up in the source when
somebody wants to know. But not making that change just now."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,e0cdb54444d479100889ad9c9f73383e15c8864d,Chapman Flack,2020-11-12T04:34:41Z,chap@anastigmatix.net,Chapman Flack,2020-11-12T04:34:41Z,chap@anastigmatix.net,8,4,4,"Change some log levels in ComplexScalar

Let routine conversions via readSQL/writeSQL/parse/toString be logged
at FINE level rather than INFO, so as not to spam the CI logs."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,dbf410fab0e918065945730b4c4d62e511573081,Chapman Flack,2020-10-13T00:03:13Z,chap@anastigmatix.net,Chapman Flack,2020-11-12T04:12:18Z,chap@anastigmatix.net,81,76,5,"Mistrust localized punctuation (issue #312)

The previous approach, requiring punctuation around the element name,
reflected an ill-thought-out belief that it's important to avoid giving
a pass on error reporting to an element name that happens to contain the
name of our wrapping element. Anybody who wanted to sneak an element
past the error reporting would not be prevented from using exactly the
name of our wrapping element to do it.  So extra work to avoid the
containing-name case achieves nothing.

Better to just count the exceptions. If we are using a wrapping element,
it will be first. No special treatment after that one (or at all, if we
are not wrapping).

Backpatched from 927e0d4. Addresses issue #312."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,db3393fcef03c4a8ac76996954be444ddb5568e0,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,283,269,14,"Add missing bits of Aggregate annotation

This isn't the PR for aggregate generation, but that one left
a few bits unimplemented (waiting for this PR to add operator
support so sortOperator's dependency can be declared). So complete
the Aggregate annotation support for sortOperator, serialize, and
deserialize.

There is still no PL/Java support for manipulating a stateType of
internal, and hence nothing very useful to do with serialize and
deserialize, but that's no pressing reason to leave their SQL
generation unimplemented. An Aggregate annotation could be used to
create an aggregate that uses some functions in some other PL.

Add a trivial aggregate in ComplexScalar that uses sortOperator.
Check for some more errors at compile time."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,db3393fcef03c4a8ac76996954be444ddb5568e0,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,283,269,14,"Add missing bits of Aggregate annotation

This isn't the PR for aggregate generation, but that one left
a few bits unimplemented (waiting for this PR to add operator
support so sortOperator's dependency can be declared). So complete
the Aggregate annotation support for sortOperator, serialize, and
deserialize.

There is still no PL/Java support for manipulating a stateType of
internal, and hence nothing very useful to do with serialize and
deserialize, but that's no pressing reason to leave their SQL
generation unimplemented. An Aggregate annotation could be used to
create an aggregate that uses some functions in some other PL.

Add a trivial aggregate in ComplexScalar that uses sortOperator.
Check for some more errors at compile time."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,db3393fcef03c4a8ac76996954be444ddb5568e0,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,Chapman Flack,2020-11-12T03:04:29Z,chap@anastigmatix.net,283,269,14,"Add missing bits of Aggregate annotation

This isn't the PR for aggregate generation, but that one left
a few bits unimplemented (waiting for this PR to add operator
support so sortOperator's dependency can be declared). So complete
the Aggregate annotation support for sortOperator, serialize, and
deserialize.

There is still no PL/Java support for manipulating a stateType of
internal, and hence nothing very useful to do with serialize and
deserialize, but that's no pressing reason to leave their SQL
generation unimplemented. An Aggregate annotation could be used to
create an aggregate that uses some functions in some other PL.

Add a trivial aggregate in ComplexScalar that uses sortOperator.
Check for some more errors at compile time."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,258a820350a53567357f11657f1b0ba933d42c96,Chapman Flack,2020-11-05T00:18:08Z,chap@anastigmatix.net,Chapman Flack,2020-11-11T03:09:27Z,chap@anastigmatix.net,106,74,32,"Add deployment-time tests

The SQLAction performing the tests must be emitted after all of the
operators it refers to. Until now, DDRProcessor has strictly enforced an
unnecessary rule that a given dependency tag must have no more than one
providing snippet. Perhaps that has helped someone detect once or twice
when code was copy/pasted without renaming a tag, but it was also quite
inconvenient for a case like this: it would require making up n
different tags for the n operators to 'provide', and the SQLAction would
then have to 'require' all n of them.

So, away with the unnecessary rule. An explicit dependency tag can be
'provided' by more than one snippet, all of which will have to be
emitted before whatever 'requires' it. The correct ordering of the test
block here can thus be declared using only one tag.

An implicit tag being 'provided' by more than one snippet will still be
reported as an error; that shouldn't happen."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,258a820350a53567357f11657f1b0ba933d42c96,Chapman Flack,2020-11-05T00:18:08Z,chap@anastigmatix.net,Chapman Flack,2020-11-11T03:09:27Z,chap@anastigmatix.net,106,74,32,"Add deployment-time tests

The SQLAction performing the tests must be emitted after all of the
operators it refers to. Until now, DDRProcessor has strictly enforced an
unnecessary rule that a given dependency tag must have no more than one
providing snippet. Perhaps that has helped someone detect once or twice
when code was copy/pasted without renaming a tag, but it was also quite
inconvenient for a case like this: it would require making up n
different tags for the n operators to 'provide', and the SQLAction would
then have to 'require' all n of them.

So, away with the unnecessary rule. An explicit dependency tag can be
'provided' by more than one snippet, all of which will have to be
emitted before whatever 'requires' it. The correct ordering of the test
block here can thus be declared using only one tag.

An implicit tag being 'provided' by more than one snippet will still be
reported as an error; that shouldn't happen."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,7e94aa171e35804ebb9a4834083e0a2504118e1e,Chapman Flack,2020-11-04T23:46:13Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,166,140,26,"Allow another shorthand notation, TWIN

Where commutator=SELF strictly means that an operator, with both
operand types the same, is its own commutator, use commutator=TWIN
on an operator whose operand types differ, to indicate that the
same-named operator with the types reversed is the commutator.

PostgreSQL itself may not even need to know that (as the names are
the same, it would just pick whichever one matched the order of the
operands in a given expression), but PL/Java's SQL generator will
use that information, if the other Operator is marked synthetic,
to know how to synthesize it.

TWIN is also a valid value for the synthetic= attribute, and means
the SQL function generated to back the operator should have the same
name as the one it is based on, which is sensible if the function
is a commutative one like multiply or add."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,7e94aa171e35804ebb9a4834083e0a2504118e1e,Chapman Flack,2020-11-04T23:46:13Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,166,140,26,"Allow another shorthand notation, TWIN

Where commutator=SELF strictly means that an operator, with both
operand types the same, is its own commutator, use commutator=TWIN
on an operator whose operand types differ, to indicate that the
same-named operator with the types reversed is the commutator.

PostgreSQL itself may not even need to know that (as the names are
the same, it would just pick whichever one matched the order of the
operands in a given expression), but PL/Java's SQL generator will
use that information, if the other Operator is marked synthetic,
to know how to synthesize it.

TWIN is also a valid value for the synthetic= attribute, and means
the SQL function generated to back the operator should have the same
name as the one it is based on, which is sensible if the function
is a commutative one like multiply or add."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,7e94aa171e35804ebb9a4834083e0a2504118e1e,Chapman Flack,2020-11-04T23:46:13Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,166,140,26,"Allow another shorthand notation, TWIN

Where commutator=SELF strictly means that an operator, with both
operand types the same, is its own commutator, use commutator=TWIN
on an operator whose operand types differ, to indicate that the
same-named operator with the types reversed is the commutator.

PostgreSQL itself may not even need to know that (as the names are
the same, it would just pick whichever one matched the order of the
operands in a given expression), but PL/Java's SQL generator will
use that information, if the other Operator is marked synthetic,
to know how to synthesize it.

TWIN is also a valid value for the synthetic= attribute, and means
the SQL function generated to back the operator should have the same
name as the one it is based on, which is sensible if the function
is a commutative one like multiply or add."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,c9f3dabfa6f87f68a75ce603b33388837cbfa285,Chapman Flack,2020-11-03T17:22:10Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,95,83,12,"Teach the runtime about commute/negate info in AS

When creating the MethodHandle tree used for invoking a method, simply
build in a swap of the first two arguments, negation of the boolean
return value, or both."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,8bb0ce428433e48c641d5cf25fc30b98ed351ab9,Chapman Flack,2020-11-04T02:09:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,810,729,81,"Generate synthetic-function declarations

It is often necessary to supply several very similar operators (and the
functions behind them), for example to complete a btree operator class.
The needed operators are simply related to each other by parameter
commutation and/or return-value negation, as already declared with
commutator and negator in the Operator annotation.

Give the Operator annotation a new element synthetic= that takes a
function name. Say there is already

@Function(name = ""lt"")
@Operator(name = ""<"")
public static void boolean less(int a, int b) { return a < b; }

Allow related operators to be declared in the same place, like this:

@Function(name = ""lt"")
@Operator(name = ""<"",  commutator = "">"", negator = "">="")
@Operator(name = "">"",  synthetic = ""gt"", negator = ""<="")
@Operator(name = "">="", synthetic = ""ge"", commutator = ""<="")
@Operator(name = ""<="", synthetic = ""le"")
public static void boolean less(int a, int b) { return a < b; }

The order of the Operator annotations doesn't matter, only that they
include enough commutator/negator information to form a graph (rooted at
the 'real' operator) that reaches all the synthetic ones. Back edges are
added automatically (so > does not need to specify its commutator,
>= does not need to specify its negator, and <= needn't mention either).

The deployment descriptor will include CREATE FUNCTION commands for
lt, gt, ge, and le, all pointing to the same Java less() method, with
the three synthetic ones including a prefix in the AS string indicating
to commute, negate, or both. The CREATE OPERATOR commands then use the
corresponding named functions in the ordinary way.

The PL/Java runtime does not yet know what to do with the extra prefix
in a function's AS string."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,8bb0ce428433e48c641d5cf25fc30b98ed351ab9,Chapman Flack,2020-11-04T02:09:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,810,729,81,"Generate synthetic-function declarations

It is often necessary to supply several very similar operators (and the
functions behind them), for example to complete a btree operator class.
The needed operators are simply related to each other by parameter
commutation and/or return-value negation, as already declared with
commutator and negator in the Operator annotation.

Give the Operator annotation a new element synthetic= that takes a
function name. Say there is already

@Function(name = ""lt"")
@Operator(name = ""<"")
public static void boolean less(int a, int b) { return a < b; }

Allow related operators to be declared in the same place, like this:

@Function(name = ""lt"")
@Operator(name = ""<"",  commutator = "">"", negator = "">="")
@Operator(name = "">"",  synthetic = ""gt"", negator = ""<="")
@Operator(name = "">="", synthetic = ""ge"", commutator = ""<="")
@Operator(name = ""<="", synthetic = ""le"")
public static void boolean less(int a, int b) { return a < b; }

The order of the Operator annotations doesn't matter, only that they
include enough commutator/negator information to form a graph (rooted at
the 'real' operator) that reaches all the synthetic ones. Back edges are
added automatically (so > does not need to specify its commutator,
>= does not need to specify its negator, and <= needn't mention either).

The deployment descriptor will include CREATE FUNCTION commands for
lt, gt, ge, and le, all pointing to the same Java less() method, with
the three synthetic ones including a prefix in the AS string indicating
to commute, negate, or both. The CREATE OPERATOR commands then use the
corresponding named functions in the ordinary way.

The PL/Java runtime does not yet know what to do with the extra prefix
in a function's AS string."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,8bb0ce428433e48c641d5cf25fc30b98ed351ab9,Chapman Flack,2020-11-04T02:09:36Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,810,729,81,"Generate synthetic-function declarations

It is often necessary to supply several very similar operators (and the
functions behind them), for example to complete a btree operator class.
The needed operators are simply related to each other by parameter
commutation and/or return-value negation, as already declared with
commutator and negator in the Operator annotation.

Give the Operator annotation a new element synthetic= that takes a
function name. Say there is already

@Function(name = ""lt"")
@Operator(name = ""<"")
public static void boolean less(int a, int b) { return a < b; }

Allow related operators to be declared in the same place, like this:

@Function(name = ""lt"")
@Operator(name = ""<"",  commutator = "">"", negator = "">="")
@Operator(name = "">"",  synthetic = ""gt"", negator = ""<="")
@Operator(name = "">="", synthetic = ""ge"", commutator = ""<="")
@Operator(name = ""<="", synthetic = ""le"")
public static void boolean less(int a, int b) { return a < b; }

The order of the Operator annotations doesn't matter, only that they
include enough commutator/negator information to form a graph (rooted at
the 'real' operator) that reaches all the synthetic ones. Back edges are
added automatically (so > does not need to specify its commutator,
>= does not need to specify its negator, and <= needn't mention either).

The deployment descriptor will include CREATE FUNCTION commands for
lt, gt, ge, and le, all pointing to the same Java less() method, with
the three synthetic ones including a prefix in the AS string indicating
to commute, negate, or both. The CREATE OPERATOR commands then use the
corresponding named functions in the ordinary way.

The PL/Java runtime does not yet know what to do with the extra prefix
in a function's AS string."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,1b198701f005d171ad0bf203cb26ec4b711efe6e,Chapman Flack,2020-11-04T02:24:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,34,31,3,"Allow a shorthand commutator = SELF

... tedious and mistake-prone to respell the operator's schema and
name for this rather common case."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,1b198701f005d171ad0bf203cb26ec4b711efe6e,Chapman Flack,2020-11-04T02:24:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,34,31,3,"Allow a shorthand commutator = SELF

... tedious and mistake-prone to respell the operator's schema and
name for this rather common case."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,1b198701f005d171ad0bf203cb26ec4b711efe6e,Chapman Flack,2020-11-04T02:24:07Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,34,31,3,"Allow a shorthand commutator = SELF

... tedious and mistake-prone to respell the operator's schema and
name for this rather common case."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,ab63d0b6dad71ee57c38c001f356cc1c901e24eb,Chapman Flack,2020-11-01T01:39:52Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,14,14,0,Add Operator annotation in an example
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,8781ffaf220306e7a40e3d1fde3e34495e042a62,Chapman Flack,2020-11-04T02:01:08Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:59:59Z,chap@anastigmatix.net,496,496,0,Teach SQL generator to produce CREATE OPERATOR
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Operator.java,fc96933d523018dac1894c52271d4ae1171bb6e6,Chapman Flack,2020-10-31T22:13:46Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:58:37Z,chap@anastigmatix.net,280,280,0,Add an Operator annotation
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,183565781cdc614c1114c29f1bdc06143a548b91,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,1599,1596,3,Merge pull request #326 from feature/REL1_6_STABLE/agg-gen
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,183565781cdc614c1114c29f1bdc06143a548b91,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,1599,1596,3,Merge pull request #326 from feature/REL1_6_STABLE/agg-gen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Aggregates.java,183565781cdc614c1114c29f1bdc06143a548b91,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T02:53:34Z,chap@anastigmatix.net,1599,1596,3,Merge pull request #326 from feature/REL1_6_STABLE/agg-gen
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,fb27817325949d786f5ae9a460ac55a4df4038e1,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,322,285,37,"Allow Aggregate annotation placed on a method

It is worthwhile after all to allow the annotation to go on a method,
either the accumulate method (from which the arguments, state type, and
a default name can all be inferred) or the finish method (useful in
cases where several finishers share an accumulate method and state).
A concise, expressive notation results.

Add a couple new examples demonstrating that, and fix the names of
the others, which had the schema qualification left off."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,fb27817325949d786f5ae9a460ac55a4df4038e1,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,322,285,37,"Allow Aggregate annotation placed on a method

It is worthwhile after all to allow the annotation to go on a method,
either the accumulate method (from which the arguments, state type, and
a default name can all be inferred) or the finish method (useful in
cases where several finishers share an accumulate method and state).
A concise, expressive notation results.

Add a couple new examples demonstrating that, and fix the names of
the others, which had the schema qualification left off."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Aggregates.java,fb27817325949d786f5ae9a460ac55a4df4038e1,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,Chapman Flack,2020-11-07T01:50:44Z,chap@anastigmatix.net,322,285,37,"Allow Aggregate annotation placed on a method

It is worthwhile after all to allow the annotation to go on a method,
either the accumulate method (from which the arguments, state type, and
a default name can all be inferred) or the finish method (useful in
cases where several finishers share an accumulate method and state).
A concise, expressive notation results.

Add a couple new examples demonstrating that, and fix the names of
the others, which had the schema qualification left off."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,70217a9b008a237fbfdf8f96e4423c673975d5d0,Chapman Flack,2020-10-31T16:33:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-31T16:33:56Z,chap@anastigmatix.net,63,35,28,"Simplify slightly and improve examples

The only difference between the function signatures from plan
to movingPlan is a possibly different stateType; no need to
re-create the whole signature when it is a mutable array. (Yes,
a clone is taken in DependTag.Function().)

Examples had a mistake in the stateSize value and did not explain
how to get it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Aggregates.java,70217a9b008a237fbfdf8f96e4423c673975d5d0,Chapman Flack,2020-10-31T16:33:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-31T16:33:56Z,chap@anastigmatix.net,63,35,28,"Simplify slightly and improve examples

The only difference between the function signatures from plan
to movingPlan is a possibly different stateType; no need to
re-create the whole signature when it is a mutable array. (Yes,
a clone is taken in DependTag.Function().)

Examples had a mistake in the stateSize value and did not explain
how to get it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Aggregates.java,4021f3a18a6e06ad4f87cec80a685008da4e28f8,Chapman Flack,2020-10-30T04:21:33Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:07:46Z,chap@anastigmatix.net,276,276,0,Add some example aggregates
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,c6c6821dd5aec39429241adfc7aa325f6af46302,Chapman Flack,2020-10-30T16:00:38Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:07:46Z,chap@anastigmatix.net,680,680,0,Generate SQL for the Aggregate annotation
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Aggregate.java,fe5dd3b8903ef1b4e18a02ae413760b68820105c,Chapman Flack,2020-10-25T22:50:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:07:46Z,chap@anastigmatix.net,382,382,0,"Add an Aggregate annotation

This can represent most of what a PostgreSQL CREATE AGGREGATE command
can say. Omitted for the moment are SERIALFUNC and DESERIALFUNC (there
isn't much PL/Java functions can do with datatype internal), and SORTOP
(not enough awareness of operators yet). There is still @SQLAction for
any rare need to get a CREATE AGGREGATE into a deployment descriptor
if this annotation can't describe it.

Since the operations of a PostgreSQL aggregate correspond nicely to
those of a Java java.util.stream.Collector (accumulator, combiner,
finisher) I've elected to use accumulate, combine, finish (plus remove)
as the annotation elements, rather than the PostgreSQLisms SFUNC/MSFUNC,
FINALFUNC, MINVFUNC, etc., ideally to spark a flash of recognition in
Java users. An SQL generator is just the thing to produce the rather
JCL-esque PostgreSQL forms from annotations that are easier to read.

For now, the only allowed target is a type, with no more significance
than that a bunch of these annotations could be conveniently hung at the
top of some source file for a class. Because an aggregate can refer to
more than one other function for its supporting operations, it did not
seem quite natural to assign a meaning to hanging the annotation on a
method. On the other hand, the only required function is the
""accumulate"" of the main Plan, and the simplest aggregates can be
declared with nothing more than name, args, stateType, and accumulate;
perhaps it would be convenient some day to allow a super-shorthand where
the annotation goes on a method that could serve as accumulate and as
much as possible is inferred.

Because of the close mapping between a PostgreSQL aggregate and a Java
Collector, it is also intriguing to imagine placing this aggregate on
some class that implements Collector and trying to generate all the glue
to make a PostgreSQL aggregate of it. Intriguing, but highly
speculative, and certainly not on any roadmap at the moment."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,945341485d2703d219800989acab6ddd7a584c77,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,253,236,17,Merge pull request #325 from feature/REL1_6_STABLE/rowreturn
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,945341485d2703d219800989acab6ddd7a584c77,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,253,236,17,Merge pull request #325 from feature/REL1_6_STABLE/rowreturn
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ReturnComposite.java,945341485d2703d219800989acab6ddd7a584c77,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,253,236,17,Merge pull request #325 from feature/REL1_6_STABLE/rowreturn
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,945341485d2703d219800989acab6ddd7a584c77,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:06:35Z,chap@anastigmatix.net,253,236,17,Merge pull request #325 from feature/REL1_6_STABLE/rowreturn
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,06a7a76c16ad629592426150d4a6c3f8cdb62c09,Chapman Flack,2020-10-30T16:03:51Z,chap@anastigmatix.net,Chapman Flack,2020-10-30T16:04:32Z,chap@anastigmatix.net,14,12,2,"Fix nameAndType for no-name case

A Reserved type could be saved with initial separator chars
that should have been stripped, and while nothing inherent
about a Map.Entry precludes a null key or value, the Java 9
added Map.entry() static method won't allow it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ReturnComposite.java,07efa02fd50ae2dfe3a48f07cf8f0ba4f7ae804f,Chapman Flack,2020-10-29T22:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-10-29T22:27:59Z,chap@anastigmatix.net,114,112,2,"Add example functions declaring composite returns

In passing, tighten a regression test recently added for an
unrelated issue."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,07efa02fd50ae2dfe3a48f07cf8f0ba4f7ae804f,Chapman Flack,2020-10-29T22:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-10-29T22:27:59Z,chap@anastigmatix.net,114,112,2,"Add example functions declaring composite returns

In passing, tighten a regression test recently added for an
unrelated issue."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,f9cebce2a9c58696f3c8cda9eb33823f9733a106,Chapman Flack,2020-10-29T03:57:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-29T03:57:31Z,chap@anastigmatix.net,109,95,14,Teach SQL generator out= in Function annotation
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,4f4beec4630a5e79a3811334d2d95aaa63e10bf3,Chapman Flack,2020-10-29T03:55:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-29T03:55:36Z,chap@anastigmatix.net,18,18,0,"Add an out= element to the Function annotation

Between creating a named composite type and declaring a function
to return that (it is then easy to use the function and work with
its result, but sometimes it's a nuisance to have to create a type
just for that purpose) and simply declaring RECORD as the return
type (avoids one nuisance, but then every use of the function in
SQL must be followed by AS (column definition list)), a happy medium
is to declare a function to SQL with OUT parameters. The function
can be called (without a column definition list) and produce a
result with usefully named and typed columns.

On discovering that PL/Java's runtime needs no changes to handle
functions declared that way, it seems quite useful to add annotation
support for producing that style of function declaration."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,8a61323d53e132774639546eb0f9e01224d9d8a7,Chapman Flack,2020-10-27T02:34:51Z,chap@anastigmatix.net,Chapman Flack,2020-10-27T02:34:51Z,chap@anastigmatix.net,79,75,4,Merge pull request #323 from bug/REL1_6_STABLE/issue322
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,8a61323d53e132774639546eb0f9e01224d9d8a7,Chapman Flack,2020-10-27T02:34:51Z,chap@anastigmatix.net,Chapman Flack,2020-10-27T02:34:51Z,chap@anastigmatix.net,79,75,4,Merge pull request #323 from bug/REL1_6_STABLE/issue322
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,919cc7665c6446635b0db3487503cb50f5d79d89,Chapman Flack,2020-10-27T00:13:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-27T00:13:21Z,chap@anastigmatix.net,56,54,2,"Add test of ResourceBundle.getBundle

This reads the same property file as the earlier test,
but using a different mechanism."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,9b60f132b24c55f63dc0a2d7482702897b8453df,Chapman Flack,2020-10-26T23:20:23Z,chap@anastigmatix.net,Chapman Flack,2020-10-26T23:20:23Z,chap@anastigmatix.net,21,19,2,Add a test of getResourceAsStream
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,bb88d822a5ba8000eb86c72236ad0d782a07a5e4,Chapman Flack,2020-10-26T22:27:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-26T22:27:53Z,chap@anastigmatix.net,6,4,2,"Allow PL/Java's class loader to make magic URLs

PL/Java's class loader has historically handled resource lookups
by returning a URL that has a custom URLStreamHandler wired in.
Permission to do that wasn't included in the pljava.policy shipped
with 1.6.0. Fix that. Addresses #322.

Still does not get closer to fixing #266, but at least avoids
making it worse."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Cast.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-api/src/test/java/LexicalsTest.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,841bef52b053ea5d2719d83ea69e8695ae3b9a6c,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T19:59:53Z,chap@anastigmatix.net,1465,941,524,Merge pull request #321 from feature/REL1_6_STABLE/castgen
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,b574e6dd8168f096d481dfbfdfd18e036e3fe92b,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-25T00:33:40Z,chap@anastigmatix.net,10,0,10,"Remove obsolete imports in examples

Should have been removed in a0efb99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,ee0d156b463d65096329c7765c8e883b5cb24316,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:50:56Z,chap@anastigmatix.net,808,404,404,"Whitespace only

Drop the extra indentation left behind now that @SQLAction needn't
be nested in @SQLActions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,a0efb99ad1d4237251b610b41c06df640d323f7d,Chapman Flack,2020-10-24T18:36:36Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,79,30,49,"Examples no longer need SQLActions

The SQLAction annotation itself can now simply be repeated."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,ef3796febcd43180fd22bf14a5f854070769a48b,Chapman Flack,2020-10-24T16:46:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,28,5,23,"Adapt an example to use @Cast

In passing, remove its postgresql_ge_80300 conditionals.
The exact oldest PostgreSQL version supportable by PL/Java 1.6
might still be slightly negotiable, but definitely won't be
that far back."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,6feac3ac4b284277bb4fd296c45cc19370cc7222,Chapman Flack,2020-10-24T16:28:58Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,275,257,18,"Support @Cast in DDRProcessor

In passing, give FunctionImpl's appendNameAndParams an extra boolean
parameter to suppress parameter names, so it can be used generating
CREATE CAST, where function parameter names aren't wanted."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,19396c85e2c01b382a46438bd6b7f3e4f5174a5c,Chapman Flack,2020-10-22T22:46:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,100,61,39,"Generalize processSQLAction to processRepeatable

Introduce a Repeatable subclass of AbstractAnnotationImpl that will
carry references to its source Element and AnnotationMirror so they
are available a subclass's characterize method, if any."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,a870347fd40c1b01b9b7b6d01ecc758de579e7fd,Chapman Flack,2020-10-22T01:31:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,50,39,11,"Generalize SQLActionsImpl to Container<annot>

Now that there will be more than one repeatable annotation type,
and there isn't really anything else about the containing annotation
that matters.

In passing, squelch a deprecation warning in LexicalsTest
(a junit method was deprecated, in favor of one from hamcrest)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,a870347fd40c1b01b9b7b6d01ecc758de579e7fd,Chapman Flack,2020-10-22T01:31:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,50,39,11,"Generalize SQLActionsImpl to Container<annot>

Now that there will be more than one repeatable annotation type,
and there isn't really anything else about the containing annotation
that matters.

In passing, squelch a deprecation warning in LexicalsTest
(a junit method was deprecated, in favor of one from hamcrest)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,a870347fd40c1b01b9b7b6d01ecc758de579e7fd,Chapman Flack,2020-10-22T01:31:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,50,39,11,"Generalize SQLActionsImpl to Container<annot>

Now that there will be more than one repeatable annotation type,
and there isn't really anything else about the containing annotation
that matters.

In passing, squelch a deprecation warning in LexicalsTest
(a junit method was deprecated, in favor of one from hamcrest)."
,pljava-api/src/test/java/LexicalsTest.java,a870347fd40c1b01b9b7b6d01ecc758de579e7fd,Chapman Flack,2020-10-22T01:31:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:41:21Z,chap@anastigmatix.net,50,39,11,"Generalize SQLActionsImpl to Container<annot>

Now that there will be more than one repeatable annotation type,
and there isn't really anything else about the containing annotation
that matters.

In passing, squelch a deprecation warning in LexicalsTest
(a junit method was deprecated, in favor of one from hamcrest)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Cast.java,b597a203420b2c34bab57390276e013e3d882ed8,Chapman Flack,2020-10-20T00:20:03Z,chap@anastigmatix.net,Chapman Flack,2020-10-24T18:07:05Z,chap@anastigmatix.net,143,143,0,Add a Cast annotation
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,63bea945a3073d5dc0287f18fe14d3f85f21a362,Chapman Flack,2020-10-18T22:45:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:45:31Z,chap@anastigmatix.net,2,2,0,Poke migration-management versions for 1.6.0
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,3492dbb336d241c0cdf49e6f61e920bcf0ea07a9,Chapman Flack,2020-10-18T15:54:54Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:35:06Z,chap@anastigmatix.net,10,5,5,"Fix a few broken links out of javadoc

Later javadoc versions add a directory level for module,
changing the ../ count. Could be fixed by using RELDOTS
and the recently-added RelativizingFileManager ... maybe later,
but it isn't already used in these subprojects and seemed more
work than just fixing a few links."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,3492dbb336d241c0cdf49e6f61e920bcf0ea07a9,Chapman Flack,2020-10-18T15:54:54Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:35:06Z,chap@anastigmatix.net,10,5,5,"Fix a few broken links out of javadoc

Later javadoc versions add a directory level for module,
changing the ../ count. Could be fixed by using RELDOTS
and the recently-added RelativizingFileManager ... maybe later,
but it isn't already used in these subprojects and seemed more
work than just fixing a few links."
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,900cd46f9bb30bc7c1a05b9248b89370213cc384,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,24,13,11,Merge pull request #320 from chore/master/rsplarge
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,900cd46f9bb30bc7c1a05b9248b89370213cc384,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,24,13,11,Merge pull request #320 from chore/master/rsplarge
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,900cd46f9bb30bc7c1a05b9248b89370213cc384,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:06:09Z,chap@anastigmatix.net,24,13,11,Merge pull request #320 from chore/master/rsplarge
,pljava-so/src/main/c/type/String.c,fbc2a028395907ef7dbc552573634e5d4546799e,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,392,360,32,Merge pull request #319 from feature/master/SQL_ASCII
,pljava/src/main/java/module-info.java,fbc2a028395907ef7dbc552573634e5d4546799e,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,392,360,32,Merge pull request #319 from feature/master/SQL_ASCII
,pljava/src/main/java/org/postgresql/pljava/internal/SQL_ASCII.java,fbc2a028395907ef7dbc552573634e5d4546799e,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,392,360,32,Merge pull request #319 from feature/master/SQL_ASCII
,pljava/src/test/java/CharsetTest.java,fbc2a028395907ef7dbc552573634e5d4546799e,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T22:05:30Z,chap@anastigmatix.net,392,360,32,Merge pull request #319 from feature/master/SQL_ASCII
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,ea82ef1294ce5ca1f784dcda92252ca3cacbd1ff,Chapman Flack,2020-10-18T18:27:34Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:36:08Z,chap@anastigmatix.net,24,13,11,"Migrate a few examples to ResultSetProvider.Large

Not necessarily the ones most likely to need 64-bit row counts
(at the moment, I think even Saxon has an internal limitation
to 32-bit sequence lengths), but these are trivial to update, and
at least serve to illustrate use of the interface."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,ea82ef1294ce5ca1f784dcda92252ca3cacbd1ff,Chapman Flack,2020-10-18T18:27:34Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:36:08Z,chap@anastigmatix.net,24,13,11,"Migrate a few examples to ResultSetProvider.Large

Not necessarily the ones most likely to need 64-bit row counts
(at the moment, I think even Saxon has an internal limitation
to 32-bit sequence lengths), but these are trivial to update, and
at least serve to illustrate use of the interface."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,ea82ef1294ce5ca1f784dcda92252ca3cacbd1ff,Chapman Flack,2020-10-18T18:27:34Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:36:08Z,chap@anastigmatix.net,24,13,11,"Migrate a few examples to ResultSetProvider.Large

Not necessarily the ones most likely to need 64-bit row counts
(at the moment, I think even Saxon has an internal limitation
to 32-bit sequence lengths), but these are trivial to update, and
at least serve to illustrate use of the interface."
,pljava-so/src/main/c/type/String.c,46715abda6b93cb09f007a4d69fcd985d468e76b,Chapman Flack,2020-01-21T01:37:33Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:35:42Z,chap@anastigmatix.net,59,44,15,"Make SQL_ASCII another special case in String.c.

String.c now treats both UTF-8 and SQL_ASCII server encodings as
special cases, where the Java codec of the same name will be used
directly on the native bytes, while all other encodings are handled
as two-step conversions using the PostgreSQL native conversion between
the server encoding and UTF-8, and the Java UTF-8 codec.

Future project: simplify all this by assuming (as SQLXML does) that
there is a Java charset corresponding to the server encoding, found
either by name match or by manual configuration
(-Dorg.postgresql.server.encoding in pljava.vmoptions), so that all
supported server encodings are handled the same way. The current
addition of SQL_ASCII as a Java charset is a step down that path.
Perhaps there could also be a CharsetProvider that ""provides"" any
missing codecs by wrapping the native ones."
,pljava/src/main/java/module-info.java,b747a4cf2ae9aceefa45cc0ba0debe805528000f,Chapman Flack,2019-02-13T06:00:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:35:42Z,chap@anastigmatix.net,283,283,0,"Add an SQL_ASCII encoding.

This is a principled Java take on the PostgreSQL definition of
SQL_ASCII as an encoding where the seven-bit ASCII values are
themselves and the remaining eight-bit values are who-knows-what.
It isn't appropriate to just copy byte values with no conversion,
as that would amount to saying we know the values correspond to
LATIN-1, which would be lying. Java strings are by definition Unicode,
so it's not ok to go stuffing code points in that do not mean what
Unicode defines those code points to mean.

What this decoder does is decode the seven-bit ASCII values as
themselves, and decode each eight-bit value into a pair of Unicode
noncharacters, one from the range u+fdd8 to u+fddf, followed by one
from u+fde0 to u+fdef, where the first one's four low bits are the
four high bits of the original value, and the second has the low four.
The encoder transparently reverses that.

Those noncharacter code points are permanently defined in Unicode
to have no glyphs, no correspondence to specific characters, and
no interesting properties. Implementing this charset allows PL/Java
code to work usefully in a database with SQL_ASCII encoding, when the
expectation is that whatever the code needs to recognize, act on, or
edit will be in ASCII, and any non-ASCII content can be passed along
uninterpreted and unchanged."
,pljava/src/main/java/org/postgresql/pljava/internal/SQL_ASCII.java,b747a4cf2ae9aceefa45cc0ba0debe805528000f,Chapman Flack,2019-02-13T06:00:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:35:42Z,chap@anastigmatix.net,283,283,0,"Add an SQL_ASCII encoding.

This is a principled Java take on the PostgreSQL definition of
SQL_ASCII as an encoding where the seven-bit ASCII values are
themselves and the remaining eight-bit values are who-knows-what.
It isn't appropriate to just copy byte values with no conversion,
as that would amount to saying we know the values correspond to
LATIN-1, which would be lying. Java strings are by definition Unicode,
so it's not ok to go stuffing code points in that do not mean what
Unicode defines those code points to mean.

What this decoder does is decode the seven-bit ASCII values as
themselves, and decode each eight-bit value into a pair of Unicode
noncharacters, one from the range u+fdd8 to u+fddf, followed by one
from u+fde0 to u+fdef, where the first one's four low bits are the
four high bits of the original value, and the second has the low four.
The encoder transparently reverses that.

Those noncharacter code points are permanently defined in Unicode
to have no glyphs, no correspondence to specific characters, and
no interesting properties. Implementing this charset allows PL/Java
code to work usefully in a database with SQL_ASCII encoding, when the
expectation is that whatever the code needs to recognize, act on, or
edit will be in ASCII, and any non-ASCII content can be passed along
uninterpreted and unchanged."
,pljava/src/test/java/CharsetTest.java,b747a4cf2ae9aceefa45cc0ba0debe805528000f,Chapman Flack,2019-02-13T06:00:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:35:42Z,chap@anastigmatix.net,283,283,0,"Add an SQL_ASCII encoding.

This is a principled Java take on the PostgreSQL definition of
SQL_ASCII as an encoding where the seven-bit ASCII values are
themselves and the remaining eight-bit values are who-knows-what.
It isn't appropriate to just copy byte values with no conversion,
as that would amount to saying we know the values correspond to
LATIN-1, which would be lying. Java strings are by definition Unicode,
so it's not ok to go stuffing code points in that do not mean what
Unicode defines those code points to mean.

What this decoder does is decode the seven-bit ASCII values as
themselves, and decode each eight-bit value into a pair of Unicode
noncharacters, one from the range u+fdd8 to u+fddf, followed by one
from u+fde0 to u+fdef, where the first one's four low bits are the
four high bits of the original value, and the second has the low four.
The encoder transparently reverses that.

Those noncharacter code points are permanently defined in Unicode
to have no glyphs, no correspondence to specific characters, and
no interesting properties. Implementing this charset allows PL/Java
code to work usefully in a database with SQL_ASCII encoding, when the
expectation is that whatever the code needs to recognize, act on, or
edit will be in ASCII, and any non-ASCII content can be passed along
uninterpreted and unchanged."
,pljava-api/src/main/java/module-info.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/BasePrincipal.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/PLPrincipal.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/Backend.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/Function.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/InstallHelper.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/Invocation.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/SubXactListener.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/XactListener.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/type/Composite.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/type/Type.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/type/UDT.c,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/Backend.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/Function.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/InstallHelper.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/Invocation.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/type/Type.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/type/Type_priv.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/type/UDT.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/include/pljava/type/UDT_priv.h,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/module-info.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/ResultSetPicker.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/sqlj/Handler.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,5f7ef4dad927350ec1182760bb46b80ca75ac4b2,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:34:11Z,chap@anastigmatix.net,5395,4242,1153,Merge pull request #318 from feature/master/policy
,pljava-so/src/main/c/Function.c,5701799d750f2565f3c434fb47831dfaa72f4aa2,Chapman Flack,2020-10-18T21:02:00Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T21:02:00Z,chap@anastigmatix.net,2,1,1,"So MSVC doesn't believe in empty initializers

Yay CI!"
,pljava-api/src/main/java/org/postgresql/pljava/PLPrincipal.java,d07daa772e9da319ac5ca01cbca298878b43631c,Chapman Flack,2020-10-17T22:09:29Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:38:03Z,chap@anastigmatix.net,903,903,0,"Add javadoc in new classes

Tedious and perhaps premature to add so much javadoc to Checked,
but not doing it leaves the javadocs looking very gappy."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,d07daa772e9da319ac5ca01cbca298878b43631c,Chapman Flack,2020-10-17T22:09:29Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:38:03Z,chap@anastigmatix.net,903,903,0,"Add javadoc in new classes

Tedious and perhaps premature to add so much javadoc to Checked,
but not doing it leaves the javadocs looking very gappy."
,pljava-so/src/main/c/Backend.c,ed3e7761a3a70588f8e388dfe2e7fb9ffaf5a61b,Chapman Flack,2020-10-11T20:37:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:38:03Z,chap@anastigmatix.net,58,5,53,"Prune pre-PG8.4 conditionals from Backend.c

The exact cutoff version for PL/Java 1.6 might not be set in stone
yet, but it will certainly not be pre-8.4.

This allows adding GUC_SUPERUSER_ONLY (which appeared in 8.4)
to some things without extra fuss. They were already only settable
by superusers, but the PostgreSQL practice seems to be to avoid
showing settings also, if they might include filesystem paths, etc."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,132700e539760aeb36e5e2e02cc43546505a6687,Chapman Flack,2020-10-11T20:23:14Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:36:31Z,chap@anastigmatix.net,61,42,19,"Have examples make a java_tzset alias

Change the supplied policy to grant ""user.timezone"" ""write"" only to
functions declared in language java_tzset, rather than to everything
in the examples jar. Get the examples jar deployment to create such
a language alias and declare the issue199() function in it, so that
test succeeds, without granting the permission more broadly.

In passing, add unconditional read for a system property that is read
deep in the innards of Java 9 and 10, but that they forgot to give
themselves permission to read. Missed that in testing on more recent
Javas."
,pljava-so/src/main/c/Backend.c,5565a3c9c4b8d6dd0b0f7fff4090d4e8120dc10a,Chapman Flack,2020-10-11T17:16:47Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:36:31Z,chap@anastigmatix.net,234,227,7,"Add sqlj.alias_java_language in Commands.java

It simplifies getting the details right when issuing CREATE LANGUAGE
to make an additional 'alias' for PL/Java that can be referred to
in pljava.policy for language-specific grant clauses.

It will create a sandboxed or unsandboxed language, revoke public
USAGE permission on it, and add a comment. It does not depend on
existing PL/Java LANGUAGE entries or handler functions to have their
usual names, as long as it succeeds in looking up what language(s)
and functions refer to the entry points in the loaded shared object.

Had to create an additional HTML anchor by hand in the Commands.java
javadoc for policy.md to link to, because Maven's markdown processor
corrupts URLs with fragment ids of the form generated by Javadoc
for method signatures. Did not find any documentation about getting
Maven's markdown processor not to do that."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,5565a3c9c4b8d6dd0b0f7fff4090d4e8120dc10a,Chapman Flack,2020-10-11T17:16:47Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:36:31Z,chap@anastigmatix.net,234,227,7,"Add sqlj.alias_java_language in Commands.java

It simplifies getting the details right when issuing CREATE LANGUAGE
to make an additional 'alias' for PL/Java that can be referred to
in pljava.policy for language-specific grant clauses.

It will create a sandboxed or unsandboxed language, revoke public
USAGE permission on it, and add a comment. It does not depend on
existing PL/Java LANGUAGE entries or handler functions to have their
usual names, as long as it succeeds in looking up what language(s)
and functions refer to the entry points in the loaded shared object.

Had to create an additional HTML anchor by hand in the Commands.java
javadoc for policy.md to link to, because Maven's markdown processor
corrupts URLs with fragment ids of the form generated by Javadoc
for method signatures. Did not find any documentation about getting
Maven's markdown processor not to do that."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,5565a3c9c4b8d6dd0b0f7fff4090d4e8120dc10a,Chapman Flack,2020-10-11T17:16:47Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T19:36:31Z,chap@anastigmatix.net,234,227,7,"Add sqlj.alias_java_language in Commands.java

It simplifies getting the details right when issuing CREATE LANGUAGE
to make an additional 'alias' for PL/Java that can be referred to
in pljava.policy for language-specific grant clauses.

It will create a sandboxed or unsandboxed language, revoke public
USAGE permission on it, and add a comment. It does not depend on
existing PL/Java LANGUAGE entries or handler functions to have their
usual names, as long as it succeeds in looking up what language(s)
and functions refer to the entry points in the loaded shared object.

Had to create an additional HTML anchor by hand in the Commands.java
javadoc for policy.md to link to, because Maven's markdown processor
corrupts URLs with fragment ids of the form generated by Javadoc
for method signatures. Did not find any documentation about getting
Maven's markdown processor not to do that."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,7c081328da9b6292bcb550539e37c8d5827cc07a,Chapman Flack,2020-10-11T14:51:07Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,171,68,103,More overlooked java7ification in Commands.java
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,eaae7178a3a935f8df970ffcffdba7af19cc6774,Chapman Flack,2020-10-11T02:51:08Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,16,6,10,"Preserve AccessControlContext of varlena verifier

A thread from a thread-pool executor might have been created
with a different one.

And a bit of overlooked java7ification."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,677f433ca6d9316fd41f8a452aeaac8c0e108cd9,Chapman Flack,2020-10-11T22:30:41Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,48,26,22,"Make validator more aggressive at class loading

In Hotspot, the validator showed the welcome behavior of rejecting
a function declaration if a dependent jar was missing; it seems
Hotspot would do enough resolution at the time of method-handle
lookup to detect such an issue.

Not so in OpenJ9, it turns out, where lazy resolution has been brought
to such a pinnacle of refinement that you can declare functions in
the S9 example class, load it, and even get their method handles, all
without the Saxon jar being present and without a peep from the validator.
(Then of course it fails when you try to call the functions, which was
what you wanted a validator to prevent in the first place.)

So tweak Function.loadClass to force initialization of the loaded class
if called with forValidator true, in an effort to front-load the
detection of about as many possible problems as can be.

As a bonus, this improves validation error reporting in Hotspot too.
Previously you could get a puzzling ""unable to find method"" for a
method that's obviously there, with the real problem, not finding
some class it refers to, buried in a couple layers of getCause.
Now it is reported more clearly at the time of loading the class."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,bae4602d0a96f3fa42ac5a288526cfa53138399f,Chapman Flack,2020-10-12T21:49:49Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,77,47,30,"Build lids with principals

The fact that a SubjectDomainCombiner does not combine its Subject
into the domains of the /inherited/ AccessControlContext leads to
behavior that would strain the principle of least astonishment:
an SQL declaration of, say, a Java API function would execute as if
it lacked the permissions granted to the Principal that should clearly,
by inspection of the SQL declaration, be supplied.

One way to tell when you've violated the POLA is when the effort to
write a documentation paragraph that explains how the thing /does/
behave is more painful than just making it behave the way you'd
expect.

The lidWithPrincipals method could perhaps be more efficient, but
the case of SQL declarations for functions in non-PL/Java-managed
jars isn't expected to be common."
,pljava-api/src/main/java/module-info.java,a09e1c6900daa2ce71f6c840d0d4f9de40f4d78c,Chapman Flack,2020-09-25T01:15:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,36,20,16,Some selective linting near recent changes
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,a09e1c6900daa2ce71f6c840d0d4f9de40f4d78c,Chapman Flack,2020-09-25T01:15:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,36,20,16,Some selective linting near recent changes
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,a09e1c6900daa2ce71f6c840d0d4f9de40f4d78c,Chapman Flack,2020-09-25T01:15:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,36,20,16,Some selective linting near recent changes
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,a09e1c6900daa2ce71f6c840d0d4f9de40f4d78c,Chapman Flack,2020-09-25T01:15:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,36,20,16,Some selective linting near recent changes
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,7b9c98962dc85794fafa68d8f5277d2d940c1c53,Chapman Flack,2020-09-24T22:53:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,109,79,30,"Give @Function annotation a language element

The runtime support for assigning permissions by policy based
on procedural language name presupposes that one can actually
declare a function with a chosen language name, not just java
or javaU.

In passing, fix a bunch of places where PL/Java was spelled
pljava in visible diagnostic messages from the annotation processor
(and some in javadoc comments too). And add some missing javadoc
paragraph breaks in @Function."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,7b9c98962dc85794fafa68d8f5277d2d940c1c53,Chapman Flack,2020-09-24T22:53:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,109,79,30,"Give @Function annotation a language element

The runtime support for assigning permissions by policy based
on procedural language name presupposes that one can actually
declare a function with a chosen language name, not just java
or javaU.

In passing, fix a bunch of places where PL/Java was spelled
pljava in visible diagnostic messages from the annotation processor
(and some in javadoc comments too). And add some missing javadoc
paragraph breaks in @Function."
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,0d9a6b088d58c0169ff335a2afdc0de5befedaa4,Chapman Flack,2020-09-24T02:37:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,36,35,1,"Normalize some exceptions in EntryPoints

Now that there is one class through which nearly all entry into
Java will go, there is a convenient place to turn some exceptions
that aren't SQLException into appropriate SQLExceptions.

This could be an argument for also dispatching the XactListener
and SubXactListener through here, even though that doesn't
otherwise help them.

This is surely work in progress."
,pljava-so/src/main/c/Backend.c,74611c27e9ccd5c58a879fcce36c29b90a092182,Chapman Flack,2020-09-24T01:39:15Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,159,153,6,"Add pljava.policy_urls GUC.

Allows setting the pljava.policy URL (and any others as desired)
at chosen places in the policy.url.n sequence begun in the systemwide
java.security file.

While it is not yet (with these patches) possible to grant permissions
based on the code signers of a jar, or the PostgreSQL role under which
the code is executing, it is at least possible to have multiple policy
files and use ALTER ROLE ... SET pljava.policy_urls ...; to select
a specific policy based on the authenticated role at the time of
connection.

Of course only a superuser can set this GUC."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,74611c27e9ccd5c58a879fcce36c29b90a092182,Chapman Flack,2020-09-24T01:39:15Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,159,153,6,"Add pljava.policy_urls GUC.

Allows setting the pljava.policy URL (and any others as desired)
at chosen places in the policy.url.n sequence begun in the systemwide
java.security file.

While it is not yet (with these patches) possible to grant permissions
based on the code signers of a jar, or the PostgreSQL role under which
the code is executing, it is at least possible to have multiple policy
files and use ALTER ROLE ... SET pljava.policy_urls ...; to select
a specific policy based on the authenticated role at the time of
connection.

Of course only a superuser can set this GUC."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,74611c27e9ccd5c58a879fcce36c29b90a092182,Chapman Flack,2020-09-24T01:39:15Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,159,153,6,"Add pljava.policy_urls GUC.

Allows setting the pljava.policy URL (and any others as desired)
at chosen places in the policy.url.n sequence begun in the systemwide
java.security file.

While it is not yet (with these patches) possible to grant permissions
based on the code signers of a jar, or the PostgreSQL role under which
the code is executing, it is at least possible to have multiple policy
files and use ALTER ROLE ... SET pljava.policy_urls ...; to select
a specific policy based on the authenticated role at the time of
connection.

Of course only a superuser can set this GUC."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,74611c27e9ccd5c58a879fcce36c29b90a092182,Chapman Flack,2020-09-24T01:39:15Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,159,153,6,"Add pljava.policy_urls GUC.

Allows setting the pljava.policy URL (and any others as desired)
at chosen places in the policy.url.n sequence begun in the systemwide
java.security file.

While it is not yet (with these patches) possible to grant permissions
based on the code signers of a jar, or the PostgreSQL role under which
the code is executing, it is at least possible to have multiple policy
files and use ALTER ROLE ... SET pljava.policy_urls ...; to select
a specific policy based on the authenticated role at the time of
connection.

Of course only a superuser can set this GUC."
,pljava-api/src/main/java/org/postgresql/pljava/BasePrincipal.java,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-api/src/main/java/org/postgresql/pljava/PLPrincipal.java,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/c/Backend.c,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/c/Function.c,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/c/InstallHelper.c,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/c/type/Type.c,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/c/type/UDT.c,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/include/pljava/Function.h,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-so/src/main/include/pljava/InstallHelper.h,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,3ca34a011726300cfdc03f0e91abc155193f308d,Chapman Flack,2020-10-12T21:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,639,514,125,"Restore the trusted/untrusted language distinction

The distinction that was wiped out in 18abf79 is restored here by
introducing a special Principal, PLPrincipal, with its two concrete
subclasses Sandboxed and Unsandboxed, one of which will be in the
AccessControlContext for an executing function and can be granted
permissions in the policy file. Hence, what PostgreSQL's 'trusted'
and 'untrusted' mean for a PL can both be freely configured for
PL/Java via the policy file. The initial grants in this policy are
simply FilePermission ""<<ALL FILES>>"", ""read,readlink,write,delete""
to Unsandboxed, and nothing special to Sandboxed. That reflects a
typical filesystem-centric view of what trusted/untrusted ought to mean,
but of course other permissions in the extensive Java permissions model
can be selectively granted as the needs of an application dictate.

The use of Sandboxed/Unsandboxed in place of PostgreSQL's trusted/
untrusted follows the usage in @Function(trust=...) since c6805e5,
discussed in [1], with the aim of being unambiguous both to people
who are or who aren't long-time users of the PostgreSQL nomenclature.

A Java Principal has both a class and a name; the PLPrincipal.Sandboxed
or .Unsandboxed in an executing function's AccessControlContext will
carry the name of the PL, as given to PostgreSQL's CREATE LANGUAGE and
used in the function's declaration. A grant in the policy file can have
the form

grant principal org.postgresql.pljava.PLPrincipal$Unsandboxed * {
  ...
};

to define permissions for any Unsandboxed function with no regard to the
name of the language, or a form like

grant principal org.postgresql.pljava.PLPrincipal$Sandboxed ""java"" {
  ...
};

The two CREATE LANGUAGE commands normally issued when PL/Java is
installed will create a sandboxed language named java and an unsandboxed
one named javau.

It is also possible, with additional CREATE LANGUAGE commands, to create
more named language entries that share PL/Java's handlers, and can be
used to declare Java functions. CREATE TRUSTED LANGUAGE java_net
HANDLER java_call_handler VALIDATOR java_validator; would create an
entry that could be given extra networking permissions with a grant to
PLPrincipal$Sandboxed ""java_net"" (and would also have any permissions
granted to PLPrincipal$Sandboxed *).

One gap in the scheme pertains to the readSQL and writeSQL methods of
""mapped UDTs"", that is, user-defined types that are not implementing new
PostgreSQL base types. These methods are called by PL/Java without being
declared as functions to SQL, and therefore without SQL function
declarations to name a language or intended trust. Such methods will
execute with no PLPrincipal in their AccessControlContext, and therefore
with only the permissions the policy grants specifically to their
containing jar, or to all.

The input/output/read/write functions of a ""base UDT"" do have SQL
function declarations, and will be executed with the declared language
name and trust, like any ordinary function.

Recognizing this fundamental difference between the UDT types did have
the effect of simplifying a bunch of code around UDTs that had grown
a bit hairy, especially in bbbb75c.

TransactionListeners and SavepointListeners will execute with the
AccessControlContext that was in force when they were registered,
although their permissions may be limited by intersection with those
the policy grants to PL/Java itself. If such a listener needs to
exercise a privilege that is not granted to PL/Java, it will have to
wrap the exercise in doPrivileged.

[1] https://www.postgresql.org/message-id/56759A57.9060106%40anastigmatix.net"
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava-so/src/main/c/SubXactListener.c,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava-so/src/main/c/XactListener.c,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,b4e6dccfe7aa8c7daa69098097ef314a36706ac3,Chapman Flack,2020-09-23T00:55:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,255,156,99,"Handle newer transaction/subtransaction events

It may finally be time to do away with those unhandled-case warnings
the C compiler has been producing since PostgreSQL 9.3. Now that
interface default methods can be used, this can be done without
breaking legacy code."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,e399ef3ef13bef833d90e3aacf933632fa211e15,Chapman Flack,2020-09-20T17:31:01Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,207,154,53,"Cover transaction and savepoint listeners

These will have an AccessControlContext saved when they are registered
and used when they are invoked. The EntryPoints.Invocable class is
used here for convenience, though invocation is done directly, without
going through any EntryPoints method. The saved AccessControlContext
is going to include pljava.internal's protection domain anyway
(without a lot of work to avoid it); using an EntryPoints method
wouldn't help.

A listener that wants to do something that is permitted to its own jar
but not to PL/Java will have to accept the inconvenience of using
doPrivileged.

In passing, adds a Checked.BiConsumer, as it may be useful elsewhere.
(The four-argument consumer needed in SubXactListener is just declared
there as a private interface.)"
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,e399ef3ef13bef833d90e3aacf933632fa211e15,Chapman Flack,2020-09-20T17:31:01Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,207,154,53,"Cover transaction and savepoint listeners

These will have an AccessControlContext saved when they are registered
and used when they are invoked. The EntryPoints.Invocable class is
used here for convenience, though invocation is done directly, without
going through any EntryPoints method. The saved AccessControlContext
is going to include pljava.internal's protection domain anyway
(without a lot of work to avoid it); using an EntryPoints method
wouldn't help.

A listener that wants to do something that is permitted to its own jar
but not to PL/Java will have to accept the inconvenience of using
doPrivileged.

In passing, adds a Checked.BiConsumer, as it may be useful elsewhere.
(The four-argument consumer needed in SubXactListener is just declared
there as a private interface.)"
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,e399ef3ef13bef833d90e3aacf933632fa211e15,Chapman Flack,2020-09-20T17:31:01Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,207,154,53,"Cover transaction and savepoint listeners

These will have an AccessControlContext saved when they are registered
and used when they are invoked. The EntryPoints.Invocable class is
used here for convenience, though invocation is done directly, without
going through any EntryPoints method. The saved AccessControlContext
is going to include pljava.internal's protection domain anyway
(without a lot of work to avoid it); using an EntryPoints method
wouldn't help.

A listener that wants to do something that is permitted to its own jar
but not to PL/Java will have to accept the inconvenience of using
doPrivileged.

In passing, adds a Checked.BiConsumer, as it may be useful elsewhere.
(The four-argument consumer needed in SubXactListener is just declared
there as a private interface.)"
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,e399ef3ef13bef833d90e3aacf933632fa211e15,Chapman Flack,2020-09-20T17:31:01Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:43:03Z,chap@anastigmatix.net,207,154,53,"Cover transaction and savepoint listeners

These will have an AccessControlContext saved when they are registered
and used when they are invoked. The EntryPoints.Invocable class is
used here for convenience, though invocation is done directly, without
going through any EntryPoints method. The saved AccessControlContext
is going to include pljava.internal's protection domain anyway
(without a lot of work to avoid it); using an EntryPoints method
wouldn't help.

A listener that wants to do something that is permitted to its own jar
but not to PL/Java will have to accept the inconvenience of using
doPrivileged.

In passing, adds a Checked.BiConsumer, as it may be useful elsewhere.
(The four-argument consumer needed in SubXactListener is just declared
there as a private interface.)"
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/c/Function.c,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/c/type/Composite.c,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/c/type/Type.c,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/include/pljava/Function.h,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/include/pljava/type/Type.h,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/include/pljava/type/Type_priv.h,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava/src/main/java/org/postgresql/pljava/internal/ResultSetPicker.java,eedf157920fb74c77c23c7b9503d2a9b950c7b24,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:42:57Z,chap@anastigmatix.net,322,193,129,"Bring ResultSet{Provider,Handle} SRFs into scheme

'Type' still has two SRF-related ""virtual methods"", one to make
a ""row collector"" (Composite uses one, nobody else does), and
one to get a Datum from whatever the row producer returned
(Composite ignores whatever was returned and relies on the
row collector instead, everybody else just passes the returned
value to coerceObject and makes no use of a row collector)."
,pljava-so/src/main/c/Function.c,cccf995627d70c2bcc8f3633d635b0c2332ba5fe,Chapman Flack,2020-09-18T22:25:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,239,212,27,"Bring Iterator-based SRFs into the scheme

The Invocable for such an SRF will return another Invocable.
That's what will be called through the iterate/close steps of
SRF evaluation; its AccessControlContext will be the same one
that was selected for the SRF itself.

Still to do: the same trick for ResultSetProvider-based SRFs
(and for ResultSetHandle-based ones, which just need an addition
in the MethodHandle tree to instantiate a ResultSetPicker).

Completed, this will obviate the need for Type_hasNextSRF/
nextSRF/closeSRF to be ""virtual methods"" of Type; the choice
of behavior will just be made up front when building the
method handle."
,pljava-so/src/main/c/type/Type.c,cccf995627d70c2bcc8f3633d635b0c2332ba5fe,Chapman Flack,2020-09-18T22:25:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,239,212,27,"Bring Iterator-based SRFs into the scheme

The Invocable for such an SRF will return another Invocable.
That's what will be called through the iterate/close steps of
SRF evaluation; its AccessControlContext will be the same one
that was selected for the SRF itself.

Still to do: the same trick for ResultSetProvider-based SRFs
(and for ResultSetHandle-based ones, which just need an addition
in the MethodHandle tree to instantiate a ResultSetPicker).

Completed, this will obviate the need for Type_hasNextSRF/
nextSRF/closeSRF to be ""virtual methods"" of Type; the choice
of behavior will just be made up front when building the
method handle."
,pljava-so/src/main/include/pljava/Function.h,cccf995627d70c2bcc8f3633d635b0c2332ba5fe,Chapman Flack,2020-09-18T22:25:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,239,212,27,"Bring Iterator-based SRFs into the scheme

The Invocable for such an SRF will return another Invocable.
That's what will be called through the iterate/close steps of
SRF evaluation; its AccessControlContext will be the same one
that was selected for the SRF itself.

Still to do: the same trick for ResultSetProvider-based SRFs
(and for ResultSetHandle-based ones, which just need an addition
in the MethodHandle tree to instantiate a ResultSetPicker).

Completed, this will obviate the need for Type_hasNextSRF/
nextSRF/closeSRF to be ""virtual methods"" of Type; the choice
of behavior will just be made up front when building the
method handle."
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,cccf995627d70c2bcc8f3633d635b0c2332ba5fe,Chapman Flack,2020-09-18T22:25:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,239,212,27,"Bring Iterator-based SRFs into the scheme

The Invocable for such an SRF will return another Invocable.
That's what will be called through the iterate/close steps of
SRF evaluation; its AccessControlContext will be the same one
that was selected for the SRF itself.

Still to do: the same trick for ResultSetProvider-based SRFs
(and for ResultSetHandle-based ones, which just need an addition
in the MethodHandle tree to instantiate a ResultSetPicker).

Completed, this will obviate the need for Type_hasNextSRF/
nextSRF/closeSRF to be ""virtual methods"" of Type; the choice
of behavior will just be made up front when building the
method handle."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,cccf995627d70c2bcc8f3633d635b0c2332ba5fe,Chapman Flack,2020-09-18T22:25:04Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,239,212,27,"Bring Iterator-based SRFs into the scheme

The Invocable for such an SRF will return another Invocable.
That's what will be called through the iterate/close steps of
SRF evaluation; its AccessControlContext will be the same one
that was selected for the SRF itself.

Still to do: the same trick for ResultSetProvider-based SRFs
(and for ResultSetHandle-based ones, which just need an addition
in the MethodHandle tree to instantiate a ResultSetPicker).

Completed, this will obviate the need for Type_hasNextSRF/
nextSRF/closeSRF to be ""virtual methods"" of Type; the choice
of behavior will just be made up front when building the
method handle."
,pljava-so/src/main/c/Function.c,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/c/Invocation.c,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/c/type/Type.c,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/c/type/UDT.c,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/include/pljava/Function.h,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/include/pljava/Invocation.h,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/include/pljava/type/UDT.h,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/include/pljava/type/UDT_priv.h,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,bbbb75c8c1631a788039ecf66efa6a4d60d0f772,Chapman Flack,2020-09-23T02:28:27Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,623,475,148,"Retrofit UDT-related entry points, now with lid"
,pljava-so/src/main/c/Function.c,efb1bf3856e4e8749dc7a9cc8a348a516dae5858,Chapman Flack,2020-02-14T03:34:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,203,110,93,"Function/Loader/Commands use Identifier for schema

An Identifier's pgFolded() form must be used consistently when comparing
or searching in the PostgreSQL catalogs."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,efb1bf3856e4e8749dc7a9cc8a348a516dae5858,Chapman Flack,2020-02-14T03:34:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,203,110,93,"Function/Loader/Commands use Identifier for schema

An Identifier's pgFolded() form must be used consistently when comparing
or searching in the PostgreSQL catalogs."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,efb1bf3856e4e8749dc7a9cc8a348a516dae5858,Chapman Flack,2020-02-14T03:34:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,203,110,93,"Function/Loader/Commands use Identifier for schema

An Identifier's pgFolded() form must be used consistently when comparing
or searching in the PostgreSQL catalogs."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,efb1bf3856e4e8749dc7a9cc8a348a516dae5858,Chapman Flack,2020-02-14T03:34:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,203,110,93,"Function/Loader/Commands use Identifier for schema

An Identifier's pgFolded() form must be used consistently when comparing
or searching in the PostgreSQL catalogs."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,efb1bf3856e4e8749dc7a9cc8a348a516dae5858,Chapman Flack,2020-02-14T03:34:24Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,203,110,93,"Function/Loader/Commands use Identifier for schema

An Identifier's pgFolded() form must be used consistently when comparing
or searching in the PostgreSQL catalogs."
,pljava-so/src/main/c/Function.c,36d59107e6a0636a83c732071fe176a14963d0fb,Chapman Flack,2020-09-16T02:33:38Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,176,124,52,"Put a lid on permissions when appropriate

PL/Java has long allowed a CREATE FUNCTION to directly name some
class/method that isn't in a PL/Java-managed jar, such as something in
the Java runtime API itself. It's a little weird, but an established
usage: just about everybody's first PL/Java blog post tests out a
CREATE FUNCTION ... AS 'java.lang.System.getProperty' (which is even
included in pljava-examples).

Under policy-based permissions, the Java runtime itself is unrestricted,
which of course is not the desired behavior. There is no need to forbid
using CREATE FUNCTION to name non-PL/Java-managed code, but it needs to
be invoked with a restrictive AccessControlContext, here one that
represents ""nobody special"". That is, it will enjoy only those permissions
the policy blanket-grants to all domains.

There may still be room to fine-tune the criteria for when to apply this
lid. To all classes not in sqlj.install_jar() jars? To only Java runtime
classes? If an admin drops foo.jar onto the classpath and wants to grant
it permissions in the policy, should this lid stand in the way?"
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,36d59107e6a0636a83c732071fe176a14963d0fb,Chapman Flack,2020-09-16T02:33:38Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,176,124,52,"Put a lid on permissions when appropriate

PL/Java has long allowed a CREATE FUNCTION to directly name some
class/method that isn't in a PL/Java-managed jar, such as something in
the Java runtime API itself. It's a little weird, but an established
usage: just about everybody's first PL/Java blog post tests out a
CREATE FUNCTION ... AS 'java.lang.System.getProperty' (which is even
included in pljava-examples).

Under policy-based permissions, the Java runtime itself is unrestricted,
which of course is not the desired behavior. There is no need to forbid
using CREATE FUNCTION to name non-PL/Java-managed code, but it needs to
be invoked with a restrictive AccessControlContext, here one that
represents ""nobody special"". That is, it will enjoy only those permissions
the policy blanket-grants to all domains.

There may still be room to fine-tune the criteria for when to apply this
lid. To all classes not in sqlj.install_jar() jars? To only Java runtime
classes? If an admin drops foo.jar onto the classpath and wants to grant
it permissions in the policy, should this lid stand in the way?"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,36d59107e6a0636a83c732071fe176a14963d0fb,Chapman Flack,2020-09-16T02:33:38Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,176,124,52,"Put a lid on permissions when appropriate

PL/Java has long allowed a CREATE FUNCTION to directly name some
class/method that isn't in a PL/Java-managed jar, such as something in
the Java runtime API itself. It's a little weird, but an established
usage: just about everybody's first PL/Java blog post tests out a
CREATE FUNCTION ... AS 'java.lang.System.getProperty' (which is even
included in pljava-examples).

Under policy-based permissions, the Java runtime itself is unrestricted,
which of course is not the desired behavior. There is no need to forbid
using CREATE FUNCTION to name non-PL/Java-managed code, but it needs to
be invoked with a restrictive AccessControlContext, here one that
represents ""nobody special"". That is, it will enjoy only those permissions
the policy blanket-grants to all domains.

There may still be room to fine-tune the criteria for when to apply this
lid. To all classes not in sqlj.install_jar() jars? To only Java runtime
classes? If an admin drops foo.jar onto the classpath and wants to grant
it permissions in the policy, should this lid stand in the way?"
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,36d59107e6a0636a83c732071fe176a14963d0fb,Chapman Flack,2020-09-16T02:33:38Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,176,124,52,"Put a lid on permissions when appropriate

PL/Java has long allowed a CREATE FUNCTION to directly name some
class/method that isn't in a PL/Java-managed jar, such as something in
the Java runtime API itself. It's a little weird, but an established
usage: just about everybody's first PL/Java blog post tests out a
CREATE FUNCTION ... AS 'java.lang.System.getProperty' (which is even
included in pljava-examples).

Under policy-based permissions, the Java runtime itself is unrestricted,
which of course is not the desired behavior. There is no need to forbid
using CREATE FUNCTION to name non-PL/Java-managed code, but it needs to
be invoked with a restrictive AccessControlContext, here one that
represents ""nobody special"". That is, it will enjoy only those permissions
the policy blanket-grants to all domains.

There may still be room to fine-tune the criteria for when to apply this
lid. To all classes not in sqlj.install_jar() jars? To only Java runtime
classes? If an admin drops foo.jar onto the classpath and wants to grant
it permissions in the policy, should this lid stand in the way?"
,pljava-so/src/main/c/Backend.c,4dc50cae8f530e767d7543a0b1228baafc48d3e1,Chapman Flack,2020-09-15T23:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,318,216,102,"Ax the need to grant user perms also to PL/Java

Let the EntryPoints class have all permissions, so that when user code
is entered, it isn't restricted by the permissions otherwise granted to
PL/Java itself. If the user wants the code at sqlj:examples to have
""user.timezone"",""write"", that can simply be granted to sqlj:examples; it
doesn't have to be counterintuitively also given to PL/Java itself, so
in straightforward cases the user code won't have to fuss with
doPrivileged.

Warning: as of this commit, there is no lid placed on the permissions of
system code (in the case where a CREATE FUNCTION ... AS '...' names some
Java system routine directly). That will have to come next.

Also, only ""general PL/Java"" functions, those invoked through
EntryPoints.invoke, are currently participating. Still necessary to
retrofit the UDT-related EntryPoints methods, and the set-returning
Iterator and ResultSetProvider methods haven't even been brought into
EntryPoints yet.

To reduce duplication of code here, collapse invoke and refInvoke into a
single method, with Object return type. Just build the MethodHandles to
return null if the target has void or a primitive return type. There's
only a reference flavor of PrivilegedAction available, anyway."
,pljava-so/src/main/c/Function.c,4dc50cae8f530e767d7543a0b1228baafc48d3e1,Chapman Flack,2020-09-15T23:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,318,216,102,"Ax the need to grant user perms also to PL/Java

Let the EntryPoints class have all permissions, so that when user code
is entered, it isn't restricted by the permissions otherwise granted to
PL/Java itself. If the user wants the code at sqlj:examples to have
""user.timezone"",""write"", that can simply be granted to sqlj:examples; it
doesn't have to be counterintuitively also given to PL/Java itself, so
in straightforward cases the user code won't have to fuss with
doPrivileged.

Warning: as of this commit, there is no lid placed on the permissions of
system code (in the case where a CREATE FUNCTION ... AS '...' names some
Java system routine directly). That will have to come next.

Also, only ""general PL/Java"" functions, those invoked through
EntryPoints.invoke, are currently participating. Still necessary to
retrofit the UDT-related EntryPoints methods, and the set-returning
Iterator and ResultSetProvider methods haven't even been brought into
EntryPoints yet.

To reduce duplication of code here, collapse invoke and refInvoke into a
single method, with Object return type. Just build the MethodHandles to
return null if the target has void or a primitive return type. There's
only a reference flavor of PrivilegedAction available, anyway."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,4dc50cae8f530e767d7543a0b1228baafc48d3e1,Chapman Flack,2020-09-15T23:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,318,216,102,"Ax the need to grant user perms also to PL/Java

Let the EntryPoints class have all permissions, so that when user code
is entered, it isn't restricted by the permissions otherwise granted to
PL/Java itself. If the user wants the code at sqlj:examples to have
""user.timezone"",""write"", that can simply be granted to sqlj:examples; it
doesn't have to be counterintuitively also given to PL/Java itself, so
in straightforward cases the user code won't have to fuss with
doPrivileged.

Warning: as of this commit, there is no lid placed on the permissions of
system code (in the case where a CREATE FUNCTION ... AS '...' names some
Java system routine directly). That will have to come next.

Also, only ""general PL/Java"" functions, those invoked through
EntryPoints.invoke, are currently participating. Still necessary to
retrofit the UDT-related EntryPoints methods, and the set-returning
Iterator and ResultSetProvider methods haven't even been brought into
EntryPoints yet.

To reduce duplication of code here, collapse invoke and refInvoke into a
single method, with Object return type. Just build the MethodHandles to
return null if the target has void or a primitive return type. There's
only a reference flavor of PrivilegedAction available, anyway."
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,4dc50cae8f530e767d7543a0b1228baafc48d3e1,Chapman Flack,2020-09-15T23:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,318,216,102,"Ax the need to grant user perms also to PL/Java

Let the EntryPoints class have all permissions, so that when user code
is entered, it isn't restricted by the permissions otherwise granted to
PL/Java itself. If the user wants the code at sqlj:examples to have
""user.timezone"",""write"", that can simply be granted to sqlj:examples; it
doesn't have to be counterintuitively also given to PL/Java itself, so
in straightforward cases the user code won't have to fuss with
doPrivileged.

Warning: as of this commit, there is no lid placed on the permissions of
system code (in the case where a CREATE FUNCTION ... AS '...' names some
Java system routine directly). That will have to come next.

Also, only ""general PL/Java"" functions, those invoked through
EntryPoints.invoke, are currently participating. Still necessary to
retrofit the UDT-related EntryPoints methods, and the set-returning
Iterator and ResultSetProvider methods haven't even been brought into
EntryPoints yet.

To reduce duplication of code here, collapse invoke and refInvoke into a
single method, with Object return type. Just build the MethodHandles to
return null if the target has void or a primitive return type. There's
only a reference flavor of PrivilegedAction available, anyway."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,4dc50cae8f530e767d7543a0b1228baafc48d3e1,Chapman Flack,2020-09-15T23:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:59Z,chap@anastigmatix.net,318,216,102,"Ax the need to grant user perms also to PL/Java

Let the EntryPoints class have all permissions, so that when user code
is entered, it isn't restricted by the permissions otherwise granted to
PL/Java itself. If the user wants the code at sqlj:examples to have
""user.timezone"",""write"", that can simply be granted to sqlj:examples; it
doesn't have to be counterintuitively also given to PL/Java itself, so
in straightforward cases the user code won't have to fuss with
doPrivileged.

Warning: as of this commit, there is no lid placed on the permissions of
system code (in the case where a CREATE FUNCTION ... AS '...' names some
Java system routine directly). That will have to come next.

Also, only ""general PL/Java"" functions, those invoked through
EntryPoints.invoke, are currently participating. Still necessary to
retrofit the UDT-related EntryPoints methods, and the set-returning
Iterator and ResultSetProvider methods haven't even been brought into
EntryPoints yet.

To reduce duplication of code here, collapse invoke and refInvoke into a
single method, with Object return type. Just build the MethodHandles to
return null if the target has void or a primitive return type. There's
only a reference flavor of PrivilegedAction available, anyway."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,6c0eb8e70c54affe08b8be9d8a9ffdf9b8988a78,Chapman Flack,2020-01-21T00:35:20Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,67,54,13,"PassXML XSLT example now un-broken

The former security manager got in the way of even the JRE's
own XSLT processor making its own transparent temporary files.
Moving to Java's regular security manager and policy avoids
such interference with the JRE's own internals.

In passing, add a parameter to the prepareXMLTransform example
to allow the example to use extension (e.g. EXSLT) functions.
Those are disabled by default when a security manager is present."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,f014f4fb9fd9dd1f617de2df56275f5612897407,Chapman Flack,2020-09-18T22:39:39Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,64,64,0,Add a pljava.policy adequate to run the examples
,pljava-so/src/main/c/Backend.c,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava-so/src/main/c/InstallHelper.c,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava-so/src/main/c/Invocation.c,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava-so/src/main/c/type/Type.c,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava-so/src/main/include/pljava/Backend.h,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava-so/src/main/include/pljava/Invocation.h,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,18abf79ffff154cd712e5cbecea0a7dcb2da0d41,Chapman Flack,2020-01-26T03:53:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,355,87,268,"Ax the custom SecurityManager

In the process, move the method from Backend that belongs in
Commands (as observed in refactor/master/createfunc) so public
can be removed from everything in Commands except what is meant
to be exposed to CREATE FUNCTION.

Warning: as of this commit, all distinction between the PostgreSQL
language categories TRUSTED and UNTRUSTED is wiped out, until
a later commit restores it by maintaining the distinction in
AccessControlContext, allowing permissions to be granted in policy."
,pljava/src/main/java/module-info.java,fdf7d62ede1791091fa791dcc4cc1747d0b880ae,Chapman Flack,2020-02-10T07:05:43Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,130,125,5,"Small tweak: defineClass with ProtectionDomain

Define a new URL protocol handler ""sqlj:"" to represent loaded jars
by jarname. The protocol handler must exist for such URLs to be
successfully constructed. It might not need to do much more than that;
in particular, its openConnection method just throws an exception."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Handler.java,fdf7d62ede1791091fa791dcc4cc1747d0b880ae,Chapman Flack,2020-02-10T07:05:43Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,130,125,5,"Small tweak: defineClass with ProtectionDomain

Define a new URL protocol handler ""sqlj:"" to represent loaded jars
by jarname. The protocol handler must exist for such URLs to be
successfully constructed. It might not need to do much more than that;
in particular, its openConnection method just throws an exception."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,fdf7d62ede1791091fa791dcc4cc1747d0b880ae,Chapman Flack,2020-02-10T07:05:43Z,chap@anastigmatix.net,Chapman Flack,2020-10-18T14:10:58Z,chap@anastigmatix.net,130,125,5,"Small tweak: defineClass with ProtectionDomain

Define a new URL protocol handler ""sqlj:"" to represent loaded jars
by jarname. The protocol handler must exist for such URLs to be
successfully constructed. It might not need to do much more than that;
in particular, its openConnection method just throws an exception."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,63d8a5e467a9c0f626c48e9ee134a58ac308fd8e,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,599,575,24,"Begin drafting 1.6 release notes and new docs

Remove hyperlink from org.postgresql.pljava.annotation package overview
to the DDR generator package, as that isn't really considered API (though
provided in pljava-api's module so it can operate at compile time), so
isn't exported from the module."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/package-info.java,63d8a5e467a9c0f626c48e9ee134a58ac308fd8e,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,599,575,24,"Begin drafting 1.6 release notes and new docs

Remove hyperlink from org.postgresql.pljava.annotation package overview
to the DDR generator package, as that isn't really considered API (though
provided in pljava-api's module so it can operate at compile time), so
isn't exported from the module."
,pljava-packaging/src/main/java/Node.java,63d8a5e467a9c0f626c48e9ee134a58ac308fd8e,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:43:23Z,chap@anastigmatix.net,599,575,24,"Begin drafting 1.6 release notes and new docs

Remove hyperlink from org.postgresql.pljava.annotation package overview
to the DDR generator package, as that isn't really considered API (though
provided in pljava-api's module so it can operate at compile time), so
isn't exported from the module."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/internal/ResultSetPicker.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/internal/SPIException.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/internal/ServerException.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaXMLRenderer.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/BlobValue.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/ClobValue.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetField.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDriver.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/StatementClosedException.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,f226e32bee96b48af6651c5011af768504b76750,Chapman Flack,2020-10-17T21:42:21Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:41:46Z,chap@anastigmatix.net,189,138,51,Add javadoc in some old classes
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,9ddf6ae71f251a3557786aa54f7117ff565939a3,Chapman Flack,2020-10-17T22:36:42Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T22:36:42Z,chap@anastigmatix.net,77,44,33,Merge pull request #317 from chore/master/s9lint
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,30ecbe79e0a525af046605679dcce1716b45c82d,Chapman Flack,2020-10-17T01:39:28Z,chap@anastigmatix.net,Chapman Flack,2020-10-17T01:39:28Z,chap@anastigmatix.net,77,44,33,"Fix some lint warnings in the S9 example

Though the normal build is without -Xlint, the unchecked warning
summary message was showing up in CI build logs.

Some of the iterator games can be simplified by checking size()
of an XdmValue, generally in a context where it's known to be
zero-or-one, so not an expensive test.

Add javadoc for one method where it isn't inherited because the
source is in a different subproject."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,927e0d461613e5e8cb44f292e58f318ab927de50,Chapman Flack,2020-10-15T21:33:50Z,chap@anastigmatix.net,Chapman Flack,2020-10-15T21:33:50Z,chap@anastigmatix.net,81,76,5,Merge pull request #316 from bug/master/issue312
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,fc3a0028fd6dc82961270d273c2141be234caa57,Chapman Flack,2020-10-15T00:11:31Z,chap@anastigmatix.net,Chapman Flack,2020-10-15T00:11:31Z,chap@anastigmatix.net,115,77,38,"Rethought issue #312 approach

The previous approach, replacing the punctuation check with a messy
non-XML-NameChar check, persisted in an ill-thought-out belief that it's
important to avoid giving a pass on error reporting to an element name
that happens to contain the name of our wrapping element. Anybody who
wanted to sneak an element past the error reporting would not be
prevented from using exactly the name of our wrapping element to do it.
So the extra work to avoid the containing-name case achieves nothing.

Better to just count the exceptions. If we are using a wrapping element,
it will be first. No special treatment after that one (or at all, if we
are not wrapping)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4a6cad3610024d4356e980aa97607d3120c6c1b6,Chapman Flack,2020-10-13T00:03:13Z,chap@anastigmatix.net,Chapman Flack,2020-10-13T00:37:08Z,chap@anastigmatix.net,36,34,2,"Mistrust localized punctuation (issue #312)

Instead of looking for an element name inside some kind of
punctuation, just use negative lookahead/lookbehind to match
the expected element name neither preceded nor followed by
another XML NameChar."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,1f0b2eed6bc9a1f24246cbc09e192d7be8e26b64,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,237,196,41,"Merge pull request #313 from feature/master/variadic

The failed CI runs are a Travis environment failure."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,1f0b2eed6bc9a1f24246cbc09e192d7be8e26b64,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,237,196,41,"Merge pull request #313 from feature/master/variadic

The failed CI runs are a Travis environment failure."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/AnyTest.java,1f0b2eed6bc9a1f24246cbc09e192d7be8e26b64,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,237,196,41,"Merge pull request #313 from feature/master/variadic

The failed CI runs are a Travis environment failure."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Variadic.java,1f0b2eed6bc9a1f24246cbc09e192d7be8e26b64,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,Chapman Flack,2020-10-12T21:55:40Z,chap@anastigmatix.net,237,196,41,"Merge pull request #313 from feature/master/variadic

The failed CI runs are a Travis environment failure."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Variadic.java,0eb0494ef09c8b31b472fe0c09c25599d93c33d1,Chapman Flack,2020-10-12T16:28:10Z,chap@anastigmatix.net,Chapman Flack,2020-10-12T16:28:10Z,chap@anastigmatix.net,39,24,15,Expand the example's javadoc comments
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Variadic.java,698ea9153e32262e7e670bea5ec27375c9be13db,Chapman Flack,2020-10-11T01:15:32Z,chap@anastigmatix.net,Chapman Flack,2020-10-11T01:15:32Z,chap@anastigmatix.net,7,4,3,"More schema-qualification in the new example

The older examples have never been gone through to schema-qualify
things, but perhaps a new one should set a better, hmm, example.

This is not an easy habit to cultivate."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,03e1d36a38b505f152e35c558ae7db9bac6adb20,Chapman Flack,2020-10-11T00:58:17Z,chap@anastigmatix.net,Chapman Flack,2020-10-11T00:58:17Z,chap@anastigmatix.net,3,2,1,"Follow existing style in BaseUDTFunctionImpl

It initializes its instance fields. A new boolean would be false
by default anyway, but ... follow the style.

In the diagnostic, ""never"" rather than ""not"" better conveys why
just mentioning the element at all merits a diagnostic."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/AnyTest.java,e515408fe6bf2278712cb4e580c4456abe0d831b,Chapman Flack,2020-10-10T21:41:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-10T21:41:05Z,chap@anastigmatix.net,168,139,29,Give variadic functions their own example class
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Variadic.java,e515408fe6bf2278712cb4e580c4456abe0d831b,Chapman Flack,2020-10-10T21:41:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-10T21:41:05Z,chap@anastigmatix.net,168,139,29,Give variadic functions their own example class
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,b7bc38b3a0d852c73d34ee00fb2d496619abfb50,Chapman Flack,2020-10-10T16:52:29Z,chap@anastigmatix.net,Chapman Flack,2020-10-10T16:52:29Z,chap@anastigmatix.net,58,46,12,Teach the SQL generator about variadic functions
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,b7bc38b3a0d852c73d34ee00fb2d496619abfb50,Chapman Flack,2020-10-10T16:52:29Z,chap@anastigmatix.net,Chapman Flack,2020-10-10T16:52:29Z,chap@anastigmatix.net,58,46,12,Teach the SQL generator about variadic functions
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/AnyTest.java,c198a5e4d283fb4bf6f3ab4665441bb79f8f294c,Chapman Flack,2020-10-04T21:38:55Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:37Z,chap@anastigmatix.net,19,5,14,"Remove ordering constraint on variadic test

As expected, changing Type.c's s_obtainerByJavaName cache to use
name+oid as the key eliminated the ordering-dependent failure that
was seen in 6745166 and required the ordering constraint that was
added here, so that can now be removed."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Exception.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/HashMap.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/PgSavepoint.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/VarlenaWrapper.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Array.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Boolean.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Double.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Float.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Integer.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Long.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Short.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleDesc.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleTable.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Type.c,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/HashMap.h,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/HashMap_priv.h,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/JNICalls.h,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,52e75614cb1777696222655774a203ef55c9080c,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T03:30:11Z,chap@anastigmatix.net,3475,2810,665,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,fa8211e59013fe60a06ea5597d7e2badf9148547,Chapman Flack,2020-10-05T00:50:55Z,chap@anastigmatix.net,Chapman Flack,2020-10-05T00:59:18Z,chap@anastigmatix.net,23,12,11,Cater to MSVC compiler restrictions
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,b9cdbb35a6b48a01b6bd1d4730d5a35d7e4fb0ab,Chapman Flack,2020-10-04T22:26:19Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:26:19Z,chap@anastigmatix.net,1,1,0,Poke migration-management versions for 1.5.6
,pljava-so/src/main/c/HashMap.c,d2516e50a97e81db2661bcd3cc5993b7c22ead28,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,175,155,20,Merge pull request #311 from bug/REL1_5_STABLE/issue310
,pljava-so/src/main/c/type/Type.c,d2516e50a97e81db2661bcd3cc5993b7c22ead28,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,175,155,20,Merge pull request #311 from bug/REL1_5_STABLE/issue310
,pljava-so/src/main/include/pljava/HashMap.h,d2516e50a97e81db2661bcd3cc5993b7c22ead28,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,175,155,20,Merge pull request #311 from bug/REL1_5_STABLE/issue310
,pljava-so/src/main/include/pljava/HashMap_priv.h,d2516e50a97e81db2661bcd3cc5993b7c22ead28,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:22:05Z,chap@anastigmatix.net,175,155,20,Merge pull request #311 from bug/REL1_5_STABLE/issue310
,pljava-so/src/main/c/HashMap.c,19afa36c5422195f8faa4817bff9e0e23d42232c,Chapman Flack,2020-10-04T21:42:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:09:38Z,chap@anastigmatix.net,175,155,20,"Key s_obtainerByJavaName by name+oid for arrays

Type_fromJavaType can create a Type on the fly if it is for
an array. It is possible for one Java array type to be associated
with more than just one PostgreSQL type (for example, Java Object[]
for an array of pretty much anything, String[] and types that can
be rendered to text, and more obscure cases like byte[] being
associated with ""char""[] as well as bytea).

That led to order-dependent failures when the s_obtainerByJavaName
cache was keyed only by Java name. Key it now by name+oid, but
(to limit the intrusiveness of the patch), use InvalidOid in
the key except when caching and looking up types that correspond
to Java arrays.

This C-based type hierarchy implementation has grown to what is
probably its ultimate height and wobbliness (to say nothing of how
one would even begin to audit it for faithfulness to JDBC's specified
mapping rules). My aim from here on out will be to wiggle it as little
as possible while preparing a replacement for a future major-number
update."
,pljava-so/src/main/c/type/Type.c,19afa36c5422195f8faa4817bff9e0e23d42232c,Chapman Flack,2020-10-04T21:42:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:09:38Z,chap@anastigmatix.net,175,155,20,"Key s_obtainerByJavaName by name+oid for arrays

Type_fromJavaType can create a Type on the fly if it is for
an array. It is possible for one Java array type to be associated
with more than just one PostgreSQL type (for example, Java Object[]
for an array of pretty much anything, String[] and types that can
be rendered to text, and more obscure cases like byte[] being
associated with ""char""[] as well as bytea).

That led to order-dependent failures when the s_obtainerByJavaName
cache was keyed only by Java name. Key it now by name+oid, but
(to limit the intrusiveness of the patch), use InvalidOid in
the key except when caching and looking up types that correspond
to Java arrays.

This C-based type hierarchy implementation has grown to what is
probably its ultimate height and wobbliness (to say nothing of how
one would even begin to audit it for faithfulness to JDBC's specified
mapping rules). My aim from here on out will be to wiggle it as little
as possible while preparing a replacement for a future major-number
update."
,pljava-so/src/main/include/pljava/HashMap.h,19afa36c5422195f8faa4817bff9e0e23d42232c,Chapman Flack,2020-10-04T21:42:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:09:38Z,chap@anastigmatix.net,175,155,20,"Key s_obtainerByJavaName by name+oid for arrays

Type_fromJavaType can create a Type on the fly if it is for
an array. It is possible for one Java array type to be associated
with more than just one PostgreSQL type (for example, Java Object[]
for an array of pretty much anything, String[] and types that can
be rendered to text, and more obscure cases like byte[] being
associated with ""char""[] as well as bytea).

That led to order-dependent failures when the s_obtainerByJavaName
cache was keyed only by Java name. Key it now by name+oid, but
(to limit the intrusiveness of the patch), use InvalidOid in
the key except when caching and looking up types that correspond
to Java arrays.

This C-based type hierarchy implementation has grown to what is
probably its ultimate height and wobbliness (to say nothing of how
one would even begin to audit it for faithfulness to JDBC's specified
mapping rules). My aim from here on out will be to wiggle it as little
as possible while preparing a replacement for a future major-number
update."
,pljava-so/src/main/include/pljava/HashMap_priv.h,19afa36c5422195f8faa4817bff9e0e23d42232c,Chapman Flack,2020-10-04T21:42:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-04T22:09:38Z,chap@anastigmatix.net,175,155,20,"Key s_obtainerByJavaName by name+oid for arrays

Type_fromJavaType can create a Type on the fly if it is for
an array. It is possible for one Java array type to be associated
with more than just one PostgreSQL type (for example, Java Object[]
for an array of pretty much anything, String[] and types that can
be rendered to text, and more obscure cases like byte[] being
associated with ""char""[] as well as bytea).

That led to order-dependent failures when the s_obtainerByJavaName
cache was keyed only by Java name. Key it now by name+oid, but
(to limit the intrusiveness of the patch), use InvalidOid in
the key except when caching and looking up types that correspond
to Java arrays.

This C-based type hierarchy implementation has grown to what is
probably its ultimate height and wobbliness (to say nothing of how
one would even begin to audit it for faithfulness to JDBC's specified
mapping rules). My aim from here on out will be to wiggle it as little
as possible while preparing a replacement for a future major-number
update."
,pljava-so/src/main/c/Backend.c,ace022166adfbe5a941a22dfc49c92dafda55129,Chapman Flack,2020-10-01T03:44:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-01T03:46:40Z,chap@anastigmatix.net,24,24,0,"Preserve buildability pre-PG11

PL/Java 1.5.x committed to working back to PG 8.2.

It will be pleasant to move that horizon up some for 1.6."
,pljava-so/src/main/c/type/Type.c,ace022166adfbe5a941a22dfc49c92dafda55129,Chapman Flack,2020-10-01T03:44:52Z,chap@anastigmatix.net,Chapman Flack,2020-10-01T03:46:40Z,chap@anastigmatix.net,24,24,0,"Preserve buildability pre-PG11

PL/Java 1.5.x committed to working back to PG 8.2.

It will be pleasant to move that horizon up some for 1.6."
,pljava-so/src/main/c/PgSavepoint.c,970a152a15f2d96f499b01e38b3c1ea552621a25,Chapman Flack,2020-10-01T01:09:13Z,chap@anastigmatix.net,Chapman Flack,2020-10-01T01:09:13Z,chap@anastigmatix.net,21,21,0,Merge pull request #308 from workaround/REL1_5_STABLE/issue260
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/Exception.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Array.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Boolean.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Double.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Float.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Integer.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Long.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Short.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/TupleDesc.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/c/type/Type.c,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-so/src/main/include/pljava/JNICalls.h,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,743bfbb18aadd7ae317489a09e92df52ece629e8,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,Chapman Flack,2020-09-30T15:58:35Z,chap@anastigmatix.net,437,311,126,Merge pull request #307 from bug/REL1_5_STABLE/issue300
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,5694a342e2e8837481fe3daee6788e988169b1ca,Chapman Flack,2020-09-29T21:35:07Z,chap@anastigmatix.net,Chapman Flack,2020-09-29T21:35:07Z,chap@anastigmatix.net,19,12,7,"Simplify the typename-normalizing regex

It works fine without redundantly having the primitive names in the
pattern (and will compile faster, if anyone cares; this obviously isn't
the way an obsessive cycle-counter would approach the problem anyway).

Get the class's name right in the exception if it isn't found."
,pljava-so/src/main/c/PgSavepoint.c,f261bbbcb842da3cb24aa5b6e7fdc9618d5e0544,Chapman Flack,2020-09-29T02:31:07Z,chap@anastigmatix.net,Chapman Flack,2020-09-29T02:31:07Z,chap@anastigmatix.net,21,21,0,"Workaround #260, PostgreSQL API breakage by EDB

EnterpriseDB added a ReleaseCurrentSubTransactionEx function with an
added argument, and made ReleaseCurrentSubTransaction call it, passing
false. But instead of leaving ReleaseCurrentSubTransaction an actual
function that does so, which would not have been an API break, they made
it a macro instead, with the result that its address cannot be taken.
The reporter of the issue had an inquiry open with EDB for four months
trying to get specifics on what versions have that issue, with no useful
response. So this workaround is just conditioned on finding
ReleaseCurrentSubTransaction defined as a macro."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,c6d0b18a9d63cc02c382efc9b221e4e9e9275333,Chapman Flack,2020-09-29T00:35:17Z,chap@anastigmatix.net,Chapman Flack,2020-09-29T00:35:17Z,chap@anastigmatix.net,140,140,0,"Add regression tests for array handling

These test getObject and updateObject with arrays of reference type,
boxed primitive types, and primitive types, correct roundtripping
of values, handling of nulls (mapped to zero/false when retrieved
in an array of primitive type), and that byte[] still works with
the not-exactly-an-array PG type bytea.

Addresses the parts of issue #300 that were not deemed out of scope
... multiple dimensions still aren't handled here."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,9145995386ed199c8ebfb8ec28b5d00304db6579,Chapman Flack,2020-09-28T23:03:29Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T23:03:29Z,chap@anastigmatix.net,54,40,14,"Make roundtrip(,classname=>...) match getName

Change the class naming syntax accepted by TypeRoundTripper.loadClass
(and therefore by the classname parameter of roundtrip()) to be the
same as what would be output in the CLASS or CLASSJDBC columns.

It's an uglier syntax and harder to work with, but having it match
the outputs will make tests easier to write in SQL. Changing the
outputs to use the less-ugly form could be another option, but JDBC
specifies what getColumnClassName should return.

This version should also compile in Java 6. I sometimes forget
strings in switches weren't there yet."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,501bd8da5fe3014f60522d44bb7be2b0ad65b3a8,Chapman Flack,2020-09-28T16:02:00Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T16:02:00Z,chap@anastigmatix.net,39,34,5,Merge pull request #306 from feature/master/debug
,pljava-so/src/main/c/Backend.c,f3d2c19aa9b72192f72ae72de4a1897378ddb6e1,Chapman Flack,2020-09-28T15:57:00Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T15:57:00Z,chap@anastigmatix.net,190,111,79,Merge pull request #305 from trackpg/REL1_5_STABLE/unpackaged
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,23d27fb95f3d376a7d40adb540e5d0e205ef93e4,Kartik Ohri,2020-09-27T14:23:48Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-28T07:43:47Z,kartikohri13@gmail.com,33,28,5,"Add property to configure native debugging

When the so.debug property is set, debug flags are passed to the native
compiler and linker build pljava-so shared object."
,pljava-so/src/main/c/type/Array.c,df8d5fb1967de9d0c0b20c852ffb943151a963f6,Chapman Flack,2020-09-28T05:37:01Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,66,30,36,"Fiddle with _Array_canReplaceType

and remove both special-case checks that had been added to Type.c
in avoidance of fiddling with it.

Add one absolutely specific special case in Type_coerceObjectBridged
to cover the one absolutely weird case of bytea and ""char""[] both
having Type implementations claiming Java's byte[]."
,pljava-so/src/main/c/type/Type.c,df8d5fb1967de9d0c0b20c852ffb943151a963f6,Chapman Flack,2020-09-28T05:37:01Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,66,30,36,"Fiddle with _Array_canReplaceType

and remove both special-case checks that had been added to Type.c
in avoidance of fiddling with it.

Add one absolutely specific special case in Type_coerceObjectBridged
to cover the one absolutely weird case of bytea and ""char""[] both
having Type implementations claiming Java's byte[]."
,pljava-so/src/main/c/type/Type.c,530c16969f2430be41ad1c9abf4a12eb5242f7d0,Chapman Flack,2020-09-28T04:33:59Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,61,36,25,"Use TypeBridge to support the primitive arrays

... allowing the extra special case added in SingleRowWriter to be
backed out.

A check was earlier added cautiously in Type_coerceDatumAs, as
""safer ... than to fiddle with the canReplaceType implementations,
which could have more wide-ranging effects.""

In this commit, the same check is added 30 lines later to handle
the other direction. That suggests that taking both of these checks
back out and fiddling with _Array_canReplaceType might in fact be
the right thing to do.

An oddball case is byte[]. Both Byte.c and byte_array.c define
Types that claim the Java type byte[] and map it to something
(""char""[] and bytea, respectively). The bytea case is what worked
before, so the added TypeBridge ought not to break it. That leaves
the puzzle of getting it to work for ""char""[]. It is such a one-off
oddball case that I am thinking a specific check for it in
coerceObjectBridged might be warranted."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,530c16969f2430be41ad1c9abf4a12eb5242f7d0,Chapman Flack,2020-09-28T04:33:59Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,61,36,25,"Use TypeBridge to support the primitive arrays

... allowing the extra special case added in SingleRowWriter to be
backed out.

A check was earlier added cautiously in Type_coerceDatumAs, as
""safer ... than to fiddle with the canReplaceType implementations,
which could have more wide-ranging effects.""

In this commit, the same check is added 30 lines later to handle
the other direction. That suggests that taking both of these checks
back out and fiddling with _Array_canReplaceType might in fact be
the right thing to do.

An oddball case is byte[]. Both Byte.c and byte_array.c define
Types that claim the Java type byte[] and map it to something
(""char""[] and bytea, respectively). The bytea case is what worked
before, so the added TypeBridge ought not to break it. That leaves
the puzzle of getting it to work for ""char""[]. It is such a one-off
oddball case that I am thinking a specific check for it in
coerceObjectBridged might be warranted."
,pljava-so/src/main/c/type/Boolean.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/Double.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/Float.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/Integer.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/Long.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/Short.c,4b31c3aeb9fbc7145ecbf6862c0a1934374b6fb8,Chapman Flack,2020-09-28T02:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,103,6,97,"Back out the 1.4.2 primitive-array additions

The added code duplicated the common code for arrays of reference
(including boxed) types in Array.c, and unlike the common code,
didn't handle null elements."
,pljava-so/src/main/c/type/TupleDesc.c,533b79fffcf49f1085ee15d535b5d5089c0b6ea5,Chapman Flack,2020-09-28T02:55:44Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,7,4,3,"Make formTuple agree with getColumnType

TupleDesc_getColumnType has been returning boxed types when
there is a choice (primitives or primitive arrays), which is
why getObject() by default returns a boxed array type and uses
the logic inherited from Array.c to do it.

In contrast, formTuple has been obtaining unboxed types instead,
and ending up with the Type implementations for primitive arrays
by default ... all of which (except byte[], aha!) had special-case
code added (in 2010, for 1.4.2) to deal with encountering a boxed
array passed from Java ... which ought to have been handled by
the common logic in Array.c (which even gets nulls right).

So make formTuple agree with getColumnType, and also prefer
the boxed type. That immediately gets the boxed array types
correct, with null supported, and no corruption for Byte[].
The unneeded (and null-mishandling) special-case code can be
removed from all the primitive array implementations.

It re-breaks the primitive array types, which should probably
be re-fixed using TypeBridge."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,49d6c45629d0aac141e73f63596b9b370f789152,Chapman Flack,2020-09-28T01:19:30Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,21,19,2,"Allow primitive array in updateObject()

Once again, the code's been there all along in the C implementations,
with some Java code in SingleRowWriter saying ""nope, can't do that.""
Allow it to happen, and it happens.

The NullPointerException if the supplied (boxed) array type contains
nulls isn't fixed yet. I did not notice earlier that Byte[], alone
among the boxed primitive array types, does not incur this NPE. It
does incur the value corruption discussed on the mailing list. But
that does not happen with byte[]. So there is clearly something
distinct about how Byte[] is being handled."
,pljava-so/src/main/c/type/Type.c,721782f8769ef467461cf3285061169fb7789d4f,Chapman Flack,2020-09-27T23:53:51Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,22,22,0,"getObject(,Class<?>) to get a primitive array

The C implementations for all of the primitive array types already
had coerceDatum methods producing Java primitive arrays; I'm just
not sure it was ever reachable before. The boxed arrays normally
produced are what the method inherited from Array.c makes.

So change a few lines in Type.c to allow it to happen, and it happens."
,pljava-so/src/main/c/Exception.c,14d0605448d829ab708902350a0e936c5d996d84,Chapman Flack,2020-09-27T21:45:23Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,12,8,4,"Fix getObject(, Class<?>) for array types

Bug came in fairly recently (6ff7c37, 1.5.1beta2); before that
the method wasn't supported, so nothing regressed. Now at least
you can successfully request the array type you were going to be
given anyway.

You still aren't able to request, say, int[] if you were going
to be given Integer[]."
,pljava-so/src/main/c/type/Type.c,14d0605448d829ab708902350a0e936c5d996d84,Chapman Flack,2020-09-27T21:45:23Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,12,8,4,"Fix getObject(, Class<?>) for array types

Bug came in fairly recently (6ff7c37, 1.5.1beta2); before that
the method wasn't supported, so nothing regressed. Now at least
you can successfully request the array type you were going to be
given anyway.

You still aren't able to request, say, int[] if you were going
to be given Integer[]."
,pljava-so/src/main/include/pljava/JNICalls.h,14d0605448d829ab708902350a0e936c5d996d84,Chapman Flack,2020-09-27T21:45:23Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,12,8,4,"Fix getObject(, Class<?>) for array types

Bug came in fairly recently (6ff7c37, 1.5.1beta2); before that
the method wasn't supported, so nothing regressed. Now at least
you can successfully request the array type you were going to be
given anyway.

You still aren't able to request, say, int[] if you were going
to be given Integer[]."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,0f489f6d42279790a4fc0a60d83352b37ddc910c,Chapman Flack,2020-09-27T21:11:16Z,chap@anastigmatix.net,Chapman Flack,2020-09-28T05:47:23Z,chap@anastigmatix.net,80,68,12,Make TypeRoundTripper example more array-friendly
,pljava-so/src/main/c/Backend.c,d2cba055f72e7d9f980c9056ff6ec90082e6f4ac,Chapman Flack,2020-09-27T15:56:41Z,chap@anastigmatix.net,Chapman Flack,2020-09-27T15:56:41Z,chap@anastigmatix.net,190,111,79,"PG13 drops CREATE EXTENSION ... FROM unpackaged

PostgreSQL 13 drops support for CREATE EXTENSION ... FROM unpackaged; on
the rationale that any sensible site has already updated old unpackaged
extensions to their extension versions. For PL/Java, though, there is
still a realistic scenario where it ends up installed as 'unpackaged':
if a CREATE EXTENSION failed because a setting needed adjustment, the
admin supplied the right setting, and the installation then succeeded.
That leaves PL/Java installed, but not as a packaged extension. The old
CREATE EXTENSION ... FROM unpackaged; syntax was the perfect recovery
method for that. It will still work in versions < 13.

For PostgreSQL 13, recovery now requires two steps instead. The first
step is CREATE EXTENSION pljava VERSION unpackaged; which will use this
script to simply confirm the unpackaged installation has already
happened, and otherwise do absolutely nothing. The second step (which
must happen in a new session) is ALTER EXTENSION pljava UPDATE; which
will package it as the latest extension version, even running the exact
script that CREATE EXTENSION ... FROM unpackaged; would've run to do it."
,pljava-so/src/main/c/Function.c,99f036edbe0d2eb89afbd5fa571bd77d908e1009,Chapman Flack,2020-09-27T12:50:59Z,chap@anastigmatix.net,Chapman Flack,2020-09-27T12:50:59Z,chap@anastigmatix.net,10,5,5,Merge pull request #304 from bug/master/j9jnicheck
,pljava-so/src/main/c/Function.c,2d6b5eb51c5fd7860f652dffd1736d81af689af9,Chapman Flack,2020-09-27T01:29:11Z,chap@anastigmatix.net,Chapman Flack,2020-09-27T01:29:11Z,chap@anastigmatix.net,2,1,1,"Fix one JNI method-type mismatch

... introduced in cdea77f, using CallStaticObjectMethod on
a method that returns void. Hotspot's -Xcheck:jni never complained,
but OpenJ9's catches it, and unless given as -Xcheck:jni:nonfatal,
OpenJ9's will abort the process, reported as a SIGSEGV, making it
perhaps more alarming than it needed to be."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/GoalScript.java,51de0d7a75e367ba63af6bd40c13160e2c310846,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,1079,640,439,"Merge pull request #301 from chore/master/pgxs-exception

Merged with whitespace and line length adjustments, and omitting
one file changed only by adding imports."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,51de0d7a75e367ba63af6bd40c13160e2c310846,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,1079,640,439,"Merge pull request #301 from chore/master/pgxs-exception

Merged with whitespace and line length adjustments, and omitting
one file changed only by adding imports."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,51de0d7a75e367ba63af6bd40c13160e2c310846,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,1079,640,439,"Merge pull request #301 from chore/master/pgxs-exception

Merged with whitespace and line length adjustments, and omitting
one file changed only by adding imports."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,51de0d7a75e367ba63af6bd40c13160e2c310846,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,Chapman Flack,2020-09-22T12:05:32Z,chap@anastigmatix.net,1079,640,439,"Merge pull request #301 from chore/master/pgxs-exception

Merged with whitespace and line length adjustments, and omitting
one file changed only by adding imports."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,e642b0f1677671ac00a4fbd5e4bc076946146768,Kartik Ohri,2020-09-19T15:45:03Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T15:45:03Z,kartikohri13@gmail.com,149,72,77,"Move exceptionWrap method to ScriptingMojo

In the previous commit, exceptionWrap method was moved from ReportScript
to ReportScriptingMojo. In line with the changes, move the exceptionWrap
for ScriptingMojo from PGXSUtils to it.

In addition, catch and throw any other exceptions that may arise during
execution of the plugin as MojoExecutionException."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,e642b0f1677671ac00a4fbd5e4bc076946146768,Kartik Ohri,2020-09-19T15:45:03Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T15:45:03Z,kartikohri13@gmail.com,149,72,77,"Move exceptionWrap method to ScriptingMojo

In the previous commit, exceptionWrap method was moved from ReportScript
to ReportScriptingMojo. In line with the changes, move the exceptionWrap
for ScriptingMojo from PGXSUtils to it.

In addition, catch and throw any other exceptions that may arise during
execution of the plugin as MojoExecutionException."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,3f13426adae8f5b9594425027946cad560adab24,Kartik Ohri,2020-09-19T11:49:52Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T12:18:15Z,kartikohri13@gmail.com,75,32,43,"Move exceptionWrap method to ReportScriptingMojo

There seems to be no benefit of allowing users to override exceptionWrap
. Hence, move it to ReportScriptingMojo to avoid unneeded indirection."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,3f13426adae8f5b9594425027946cad560adab24,Kartik Ohri,2020-09-19T11:49:52Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T12:18:15Z,kartikohri13@gmail.com,75,32,43,"Move exceptionWrap method to ReportScriptingMojo

There seems to be no benefit of allowing users to override exceptionWrap
. Hence, move it to ReportScriptingMojo to avoid unneeded indirection."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,44e724e2285357634e00f8914d49868d20eed35f,Kartik Ohri,2020-09-18T13:48:20Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T09:17:41Z,kartikohri13@gmail.com,36,22,14,"Fix exceptionWrap method in PGXSUtils

The documentation and usage has been updated to consider the effect of
the scriptFailure parameter."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,b3bdd3b9920686f474aa294deab93f2d538d6ece,Kartik Ohri,2020-09-17T20:17:23Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T09:17:41Z,kartikohri13@gmail.com,36,26,10,"Check if javadoc completed successfully

If execution fails, MavenReportException is thrown."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/GoalScript.java,1032e68c9f5aefd02109b3c03f321c19e9816db1,Kartik Ohri,2020-09-15T12:11:19Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T09:17:41Z,kartikohri13@gmail.com,108,106,2,"Add GoalScript to execute script using Invocable

Nashorn wraps exceptions thrown during Javascript execution whereas
Graal consumes them and throws an altogether new exception. In order to
correctly handle exceptions thrown during execution of the script, we
return the exception after wrapping it inside MojoExecutionException.

As it is not possible to return a value from the script directly, we use
the GoalScript interface to execute the script from Java and obtain the
return value. A non null value indicates unsuccessful completion."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,1032e68c9f5aefd02109b3c03f321c19e9816db1,Kartik Ohri,2020-09-15T12:11:19Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T09:17:41Z,kartikohri13@gmail.com,108,106,2,"Add GoalScript to execute script using Invocable

Nashorn wraps exceptions thrown during Javascript execution whereas
Graal consumes them and throws an altogether new exception. In order to
correctly handle exceptions thrown during execution of the script, we
return the exception after wrapping it inside MojoExecutionException.

As it is not possible to return a value from the script directly, we use
the GoalScript interface to execute the script from Java and obtain the
return value. A non null value indicates unsuccessful completion."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,1032e68c9f5aefd02109b3c03f321c19e9816db1,Kartik Ohri,2020-09-15T12:11:19Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-19T09:17:41Z,kartikohri13@gmail.com,108,106,2,"Add GoalScript to execute script using Invocable

Nashorn wraps exceptions thrown during Javascript execution whereas
Graal consumes them and throws an altogether new exception. In order to
correctly handle exceptions thrown during execution of the script, we
return the exception after wrapping it inside MojoExecutionException.

As it is not possible to return a value from the script directly, we use
the GoalScript interface to execute the script from Java and obtain the
return value. A non null value indicates unsuccessful completion."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,2cf7becf96dd8548a9a926eb8035faf67e94f82c,Kartik Ohri,2020-09-11T20:18:57Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-18T04:17:45Z,kartikohri13@gmail.com,51,45,6,"Add exceptionWrap method to ReportScript

JavaScript allows to arbitrarily throw anything. Therefore, instead of
directly wrapping the thrown object inside a MavenReportException, we
wrap pass it to exceptionWrap to handle it properly."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,633861bb01c1a8639f2d309e2afad58d5a66423d,Chapman Flack,2020-09-15T21:30:59Z,chap@anastigmatix.net,Chapman Flack,2020-09-15T21:30:59Z,chap@anastigmatix.net,590,583,7,Merge pull request #299 from feature/master/orthochecked
,pljava/src/test/java/CheckedTest.java,633861bb01c1a8639f2d309e2afad58d5a66423d,Chapman Flack,2020-09-15T21:30:59Z,chap@anastigmatix.net,Chapman Flack,2020-09-15T21:30:59Z,chap@anastigmatix.net,590,583,7,Merge pull request #299 from feature/master/orthochecked
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,4f5899b20d4ba08bcc7a42b76c50f44ff4a33481,Chapman Flack,2020-09-15T21:29:46Z,chap@anastigmatix.net,Chapman Flack,2020-09-15T21:29:46Z,chap@anastigmatix.net,4,2,2,Corrections to two examples in javadoc
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,b1a550cc5d404c0af3de9fb801562da3cf9c286f,Kartik Ohri,2020-09-11T12:27:12Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-15T12:28:15Z,kartikohri13@gmail.com,52,49,3,"Return MavenReportException from executeReport

If an exception occurs during execution of ReportScriptingMojo, it
should be thrown so that Maven knows about it and stops the execution
immediately. However, Nashorn and Graal wrap exceptions thrown during
execution in different ways. Nashorn wraps the original exception twice
whereas Graal consumes the original exception and always throws a
Polyglot exception wrapped in ScriptException. Therefore, directly
throwing an exception can obscure the actual cause. Hence, we return the
 actual exception, if one occurred, from the method. If execution
 completes successfully, null is returned instead."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,b1a550cc5d404c0af3de9fb801562da3cf9c286f,Kartik Ohri,2020-09-11T12:27:12Z,kartikohri13@gmail.com,Kartik Ohri,2020-09-15T12:28:15Z,kartikohri13@gmail.com,52,49,3,"Return MavenReportException from executeReport

If an exception occurs during execution of ReportScriptingMojo, it
should be thrown so that Maven knows about it and stops the execution
immediately. However, Nashorn and Graal wrap exceptions thrown during
execution in different ways. Nashorn wraps the original exception twice
whereas Graal consumes the original exception and always throws a
Polyglot exception wrapped in ScriptException. Therefore, directly
throwing an exception can obscure the actual cause. Hence, we return the
 actual exception, if one occurred, from the method. If execution
 completes successfully, null is returned instead."
,pljava-so/src/main/c/type/Timestamp.c,07499e37c3f6f58d8b24289461f5c16472c25d48,Chapman Flack,2020-09-15T00:30:51Z,chap@anastigmatix.net,Chapman Flack,2020-09-15T00:30:51Z,chap@anastigmatix.net,2,1,1,"Avoid MSVC TZ workaround in PG 10.2 and later

In 10.2, session_timezone gained a PGDLLIMPORT marking, making
the workaround unnecessary. This typo'd conditional caused it
to be used in later 10.x versions anyway.

Tempting to blame the change in PG_VERSION_NUM format with PG 10
(in 958fe54), but the value here was wrong for the old format too.

Addresses #297. Apparently the workaround wasn't a perfect one,
either.

Backpatched from 0a83c39."
,pljava-so/src/main/c/type/Timestamp.c,b10425f5b732d3918785a17c29565be470df3e36,Chapman Flack,2020-09-15T00:10:29Z,chap@anastigmatix.net,Chapman Flack,2020-09-15T00:10:29Z,chap@anastigmatix.net,2,1,1,Merge pull request #298 from bug/master/297
,pljava-so/src/main/c/type/Timestamp.c,0a83c39f434ced663c055f5028575f53f020601a,Chapman Flack,2020-09-14T22:40:49Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T22:40:49Z,chap@anastigmatix.net,2,1,1,"Avoid MSVC TZ workaround in PG 10.2 and later

In 10.2, session_timezone gained a PGDLLIMPORT marking, making
the workaround unnecessary. This typo'd conditional caused it
to be used in later 10.x versions anyway.

Tempting to blame the change in PG_VERSION_NUM format with PG 10
(in 958fe54), but the value here was wrong for the old format too.

Addresses #297. Apparently the workaround wasn't a perfect one,
either."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,cf688f8e55d51928edaff339ac5b92d0fd46b388,Chapman Flack,2020-07-30T02:51:49Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T02:09:13Z,chap@anastigmatix.net,144,134,10,"Add a test class for Checked

Even compile-time only 'tests' with no runtime behavior are enough
to flush out some typos and usability issues.

The several overloaded in() methods seem to require the compiler
to infer more than it always can. Give those distinct names.

Much is not yet tested. Everything won't be ('everything' would
include the Cartesian product of everything with a use() method
and the ten flavors of in...() method ... fuhgeddaboudit."
,pljava/src/test/java/CheckedTest.java,cf688f8e55d51928edaff339ac5b92d0fd46b388,Chapman Flack,2020-07-30T02:51:49Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T02:09:13Z,chap@anastigmatix.net,144,134,10,"Add a test class for Checked

Even compile-time only 'tests' with no runtime behavior are enough
to flush out some typos and usability issues.

The several overloaded in() methods seem to require the compiler
to infer more than it always can. Give those distinct names.

Much is not yet tested. Everything won't be ('everything' would
include the Cartesian product of everything with a use() method
and the ten flavors of in...() method ... fuhgeddaboudit."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,b284fbfe4d8d382e04966898eaceead4b2f83c57,Chapman Flack,2020-07-30T01:04:28Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T02:08:13Z,chap@anastigmatix.net,137,137,0,"New Optionals missing equals/hashCode/ofNullable

They're also all missing stream(), but fixing that would
require implementing the missing primitive stream types.

Provide ofNullable (with a boxed parameter) for primitive-typed
Optionals (Java's as well as these). Provide them as overloaded
static methods in a single class, so one import static gets them all."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,c4dc35b889bc8de0437d2bc145a11ae525223acb,Chapman Flack,2020-07-30T00:45:04Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T01:58:36Z,chap@anastigmatix.net,200,167,33,"An AutoCloseable with exception-type parameter

Java's AutoCloseable does not have a parameter for the thrown
exception type. It is declared Exception, and while subinterfaces
are ""strongly encouraged"" to narrow that declaration, that's of
no use to the compiler except in code that explicitly uses the
subinterface.

In passing move the Trivial interface inside a class (arbitrarily,
the Closing class just added here), only so it can be made private;
it has a default method that performs an unchecked cast, and should
only be extended by other interfaces in this compilation unit."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,d75030a7568d06f80d61cc44c240ccab9268c0f2,Chapman Flack,2020-07-15T02:50:15Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T01:58:36Z,chap@anastigmatix.net,187,184,3,"Make Checked more nearly orthogonal

Complete the set of ToFooFunction interfaces, for Foo in
byte, short, char, float, plus Predicate, so that the reference
and all primitive types are covered; complete the in(...) methods
to cover the full set of those functions.

Let the new functional interfaces that do not have Java API
checked-exception-less counterparts, and therefore do not strictly
need to have ederWrap methods, inherit a no-op default one anyway.
That eliminates arbitrary limits on which ones can participate in
the use(...).in(...) idiom."
,pljava-so/src/main/c/Backend.c,f67935abbbff5b51d65f9c1053e1b6ccb8d51f57,Chapman Flack,2020-09-14T01:47:07Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T01:47:07Z,chap@anastigmatix.net,18,15,3,"Merge pull request #296 from chore/master/pgxslint

Merging with the known failing SetOfRecordTest on PG10/MinGW
reported by AppVeyor, unrelated to this patch."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,f67935abbbff5b51d65f9c1053e1b6ccb8d51f57,Chapman Flack,2020-09-14T01:47:07Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T01:47:07Z,chap@anastigmatix.net,18,15,3,"Merge pull request #296 from chore/master/pgxslint

Merging with the known failing SetOfRecordTest on PG10/MinGW
reported by AppVeyor, unrelated to this patch."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,b7c01e83b70d7e66b0ab7187b442305f3de68464,Chapman Flack,2020-09-14T00:46:22Z,chap@anastigmatix.net,Chapman Flack,2020-09-14T00:46:22Z,chap@anastigmatix.net,2,1,1,"Fix level of a debugging message

This internal muttering was being logged at INFO, and so showing up
in CI test output."
,pljava-so/src/main/c/Backend.c,531503e353bd6753c2a2983e22a7b8829c2c9d93,Chapman Flack,2020-09-13T23:59:51Z,chap@anastigmatix.net,Chapman Flack,2020-09-13T23:59:51Z,chap@anastigmatix.net,3,2,1,"Mark my_vfprintf as a printf-like function

Not a bug, but silences a warning that may appear in some
environments (and is visible now that the old warning chaff
is so much reduced!)."
,pljava-packaging/src/main/java/Node.java,f736226ecec9cec84b6c7ec2d183b0272732f3fb,Chapman Flack,2020-09-13T23:35:47Z,chap@anastigmatix.net,Chapman Flack,2020-09-13T23:35:47Z,chap@anastigmatix.net,85,44,41,"Merge pull request #295 from cleanup/master/statemachine

Merging with the known failing SetOfRecordTest on PG10/MinGW
reported by AppVeyor, unrelated to this patch."
,pljava-packaging/src/main/java/Node.java,f0e8509a0ef7c4b354d475c457289cdcc636cb1c,Chapman Flack,2020-09-13T18:35:27Z,chap@anastigmatix.net,Chapman Flack,2020-09-13T18:35:27Z,chap@anastigmatix.net,85,44,41,"Use more casual term 'state machine' than 'dfa'

There was already another one added in 4e001ae, and there
the less-jargon-y term 'state machine' was used; for consistency,
use that in Node also. Anyway, because the states can be
arbitrary lambdas, it doesn't have to be strictly a DFA; it
would be simple to implement a pushdown automaton, for example
(or just call another stateMachine from a state). It is easy to
foresee tests that might do such things (to check a sequence
of results by descending into the individual ResultSets and into
individual rows of those, for example). So stateMachine is
just a better name."
,pljava-packaging/src/main/java/Node.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/test/java/AbstractPGXSMock.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/test/java/PgConfigPropertyAsListTest.java,5a5c0e342e35ab0aa30de9d803748f939f71841b,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T17:15:34Z,chap@anastigmatix.net,1585,845,740,"Merge pull request #292 from feature/master/pgxs-2

Merging with one failure reported by AppVeyor, for PG 10 built
with MSVC, on the SetOfRecordTest. That has been very consistent
through the development of this CI patch, and I believe it is
something real, not a problem with this patch."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,7035bca1736df568e8289abd6a2f5435cce007fb,amCap1712,2020-08-31T16:24:22Z,kartikohri13@gmail.com,GitHub,2020-08-31T16:24:22Z,noreply@github.com,101,59,42,"Merge pull request #17 from jcflack/pgxs-polishing

A bit of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,cc5ab8bf4e3b1cc026532b50fda2edcdeecc9dc3,Chapman Flack,2020-08-31T13:31:47Z,chap@anastigmatix.net,Chapman Flack,2020-08-31T14:29:08Z,chap@anastigmatix.net,62,32,30,"A better sop to graalvm/graaljs#254

It has caused more headaches, as anticipated in 82efab9
and 460a5c4.

Until Java 15 is added to the build matrix, we have to remember to test
with it."
,pljava-packaging/src/main/java/Node.java,1df123b8208272b54ca6c62978fe0c7acc17a3da,Kartik Ohri,2020-08-31T07:17:34Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-31T07:30:42Z,kartikohri13@gmail.com,233,212,21,Pass libjvm directly to maven build command
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,1df123b8208272b54ca6c62978fe0c7acc17a3da,Kartik Ohri,2020-08-31T07:17:34Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-31T07:30:42Z,kartikohri13@gmail.com,233,212,21,Pass libjvm directly to maven build command
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,5d71fb871f10653709b041d2c76f58ffe494474c,Kartik Ohri,2020-08-30T07:57:46Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-30T21:13:45Z,kartikohri13@gmail.com,44,44,0,Document AbstractPGXS
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,f8e475b861152987ec797eb7ccb6af6b7df02c05,Kartik Ohri,2020-08-30T06:13:57Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-30T21:13:45Z,kartikohri13@gmail.com,119,113,6,"Fix implementation of getPgConfigPropertyAsList

The earlier implementation using regex was unable to correctly parse the
 string into a list when single quotes were part of the word. A few unit
 tests have also been added to ensure that a new implementation of the
 method does not break existing functionality."
,pljava-pgxs/src/test/java/AbstractPGXSMock.java,f8e475b861152987ec797eb7ccb6af6b7df02c05,Kartik Ohri,2020-08-30T06:13:57Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-30T21:13:45Z,kartikohri13@gmail.com,119,113,6,"Fix implementation of getPgConfigPropertyAsList

The earlier implementation using regex was unable to correctly parse the
 string into a list when single quotes were part of the word. A few unit
 tests have also been added to ensure that a new implementation of the
 method does not break existing functionality."
,pljava-pgxs/src/test/java/PgConfigPropertyAsListTest.java,f8e475b861152987ec797eb7ccb6af6b7df02c05,Kartik Ohri,2020-08-30T06:13:57Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-30T21:13:45Z,kartikohri13@gmail.com,119,113,6,"Fix implementation of getPgConfigPropertyAsList

The earlier implementation using regex was unable to correctly parse the
 string into a list when single quotes were part of the word. A few unit
 tests have also been added to ensure that a new implementation of the
 method does not break existing functionality."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,9111286eb3ac805275994f92edb277bacbb95b7e,Kartik Ohri,2020-08-28T14:16:43Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T20:55:50Z,kartikohri13@gmail.com,367,140,227,Improve pljava-so build script
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,9111286eb3ac805275994f92edb277bacbb95b7e,Kartik Ohri,2020-08-28T14:16:43Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T20:55:50Z,kartikohri13@gmail.com,367,140,227,Improve pljava-so build script
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,13760e4f40462b46f7fb748cb71ac3b8b05c3d74,Kartik Ohri,2020-08-27T15:53:26Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,58,34,24,Use a map for defines instead of list
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,e94a0bc1eb941df0d024dc19c3e1e81186fdee0c,Kartik Ohri,2020-08-26T08:15:59Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,97,55,42,"Move format methods to AbstractPGXS and ...

obtain flags from pg_config"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,e94a0bc1eb941df0d024dc19c3e1e81186fdee0c,Kartik Ohri,2020-08-26T08:15:59Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,97,55,42,"Move format methods to AbstractPGXS and ...

obtain flags from pg_config"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/AbstractPGXS.java,553dfbafa4ef372371a021f7382af796bda27bc8,Kartik Ohri,2020-08-23T10:38:59Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,170,127,43,Add initial JavaScript dispatcher for deciding build recipe at runtime
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,553dfbafa4ef372371a021f7382af796bda27bc8,Kartik Ohri,2020-08-23T10:38:59Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,170,127,43,Add initial JavaScript dispatcher for deciding build recipe at runtime
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,ef444e78e495563813e153b9baba16f90ee5e905,Kartik Ohri,2020-08-22T20:53:27Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,118,47,71,"Make PGXSUtils instantiable

This helps in avoiding passing around instances of maven project and the
plugin logger. This is also necessary to avoid an issue while passing
a javascript function as a SAM."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,ef444e78e495563813e153b9baba16f90ee5e905,Kartik Ohri,2020-08-22T20:53:27Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,118,47,71,"Make PGXSUtils instantiable

This helps in avoiding passing around instances of maven project and the
plugin logger. This is also necessary to avoid an issue while passing
a javascript function as a SAM."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,ef444e78e495563813e153b9baba16f90ee5e905,Kartik Ohri,2020-08-22T20:53:27Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,118,47,71,"Make PGXSUtils instantiable

This helps in avoiding passing around instances of maven project and the
plugin logger. This is also necessary to avoid an issue while passing
a javascript function as a SAM."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,a04f544dd2123deb416f9fe05685def87986b9cb,Kartik Ohri,2020-08-22T13:22:37Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,47,33,14,Add runCommand utility method to execute ProcessBuilder
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,b3bee0173511e48d76d07cbbce4b7e6560a047d3,Kartik Ohri,2020-08-22T10:09:38Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,37,31,6,Work around for passing JavaScript function as a SAM to java method
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,b3bee0173511e48d76d07cbbce4b7e6560a047d3,Kartik Ohri,2020-08-22T10:09:38Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,37,31,6,Work around for passing JavaScript function as a SAM to java method
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,039ddedc3eecdf2160ec452078a5802763344861,Kartik Ohri,2020-08-22T08:50:30Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,53,23,30,Scripting engine fails at runtime
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,96484124a70069749f65f0d70bb8fe0e3e589cf9,Kartik Ohri,2020-08-19T11:40:29Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-29T19:59:44Z,kartikohri13@gmail.com,101,101,0,Add JavaScript snippet to build pljava-so
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/Function.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/InstallHelper.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/PgSavepoint.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/SPI.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/VarlenaWrapper.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/type/Oid.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/type/SQLXMLImpl.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/c/type/TriggerData.c,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/include/pljava/Function.h,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/include/pljava/InstallHelper.h,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-so/src/main/include/pljava/type/Portal.h,dd2840349024740301f14646f2bcb6a3ddfa7651,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:37:45Z,chap@anastigmatix.net,158,90,68,Merge pull request #290 from chore/master/CIlint
,pljava-packaging/src/main/java/Node.java,a33868756e6eb8f1991e97bae881810ebf8fdfba,Chapman Flack,2020-08-29T18:34:48Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T18:34:48Z,chap@anastigmatix.net,739,721,18,"Merge pull request #289 from feature/master/ci

Merging this PR, which includes Travis CI and AppVeyor configurations,
without actually enabling those services at this point, pending an
opinion from Thomas. The configurations merged here can, in any event,
be used as starting points to configure an alternate service later if
that is preferred."
,pljava-so/src/main/c/Function.c,172b97d9dac74fb4048c44b5595d519f66aeacd9,Chapman Flack,2020-08-29T02:09:49Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T02:09:49Z,chap@anastigmatix.net,4,2,2,"Sometimes uninitialized

Mac clang's version of gcc's ""maybe uninitialized"" ... which finds
a case that Linux gcc missed."
,pljava-so/src/main/c/VarlenaWrapper.c,35eda7bd53b363f186b8f6b4899a18f671f6d1d6,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,12,6,6,"Maybe uninitialized

The BEGIN/END_NATIVE family of macros conceal 'if' statements:
if certain conditions are pending, the underlying check 'throws'
an exception and returns false. Ordinarily, a thrown exception
would mean no code after the 'if' ever executes, and there would
be no concern about using a variable whose initialization was
contained in the if block.

In JNI, though, an exception isn't really thrown until the
function returns. It just has to skip the actions inside the
block and return something, anything, as directly as possible.
At that point, the JVM throws the exception and no use of the
return value is made, but the C compiler still sees that the
function could return an uninitialized value in some circumstances.
Simply initializing it, even to an arbitrary value, quiets
the warning."
,pljava-so/src/main/c/type/Oid.c,35eda7bd53b363f186b8f6b4899a18f671f6d1d6,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,12,6,6,"Maybe uninitialized

The BEGIN/END_NATIVE family of macros conceal 'if' statements:
if certain conditions are pending, the underlying check 'throws'
an exception and returns false. Ordinarily, a thrown exception
would mean no code after the 'if' ever executes, and there would
be no concern about using a variable whose initialization was
contained in the if block.

In JNI, though, an exception isn't really thrown until the
function returns. It just has to skip the actions inside the
block and return something, anything, as directly as possible.
At that point, the JVM throws the exception and no use of the
return value is made, but the C compiler still sees that the
function could return an uninitialized value in some circumstances.
Simply initializing it, even to an arbitrary value, quiets
the warning."
,pljava-so/src/main/c/type/SQLXMLImpl.c,35eda7bd53b363f186b8f6b4899a18f671f6d1d6,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:33:23Z,chap@anastigmatix.net,12,6,6,"Maybe uninitialized

The BEGIN/END_NATIVE family of macros conceal 'if' statements:
if certain conditions are pending, the underlying check 'throws'
an exception and returns false. Ordinarily, a thrown exception
would mean no code after the 'if' ever executes, and there would
be no concern about using a variable whose initialization was
contained in the if block.

In JNI, though, an exception isn't really thrown until the
function returns. It just has to skip the actions inside the
block and return something, anything, as directly as possible.
At that point, the JVM throws the exception and no use of the
return value is made, but the C compiler still sees that the
function could return an uninitialized value in some circumstances.
Simply initializing it, even to an arbitrary value, quiets
the warning."
,pljava-so/src/main/c/InstallHelper.c,7ec80dd4cf218667e5b04b7bfffff0e004f3a0bb,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,20,10,10,Missing prototypes
,pljava-so/src/main/include/pljava/Function.h,7ec80dd4cf218667e5b04b7bfffff0e004f3a0bb,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,20,10,10,Missing prototypes
,pljava-so/src/main/include/pljava/InstallHelper.h,7ec80dd4cf218667e5b04b7bfffff0e004f3a0bb,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,20,10,10,Missing prototypes
,pljava-so/src/main/include/pljava/type/Portal.h,7ec80dd4cf218667e5b04b7bfffff0e004f3a0bb,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:15:22Z,chap@anastigmatix.net,20,10,10,Missing prototypes
,pljava-so/src/main/c/Function.c,e38307e9a3ec08775b9c9b44464940f0b9ede94f,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,120,71,49,Declaration after statement
,pljava-so/src/main/c/PgSavepoint.c,e38307e9a3ec08775b9c9b44464940f0b9ede94f,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,120,71,49,Declaration after statement
,pljava-so/src/main/c/SPI.c,e38307e9a3ec08775b9c9b44464940f0b9ede94f,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,120,71,49,Declaration after statement
,pljava-so/src/main/c/type/TriggerData.c,e38307e9a3ec08775b9c9b44464940f0b9ede94f,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T01:07:51Z,chap@anastigmatix.net,120,71,49,Declaration after statement
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,7f281cd20d9fe9c98f1b89e60c29e07a24456828,Chapman Flack,2020-08-29T00:56:43Z,chap@anastigmatix.net,Chapman Flack,2020-08-29T00:56:43Z,chap@anastigmatix.net,2,1,1,Ambiguous null to Java variadic parameter
,pljava-packaging/src/main/java/Node.java,943152b5b07738bf6a4fa650807c5dd3ed749e15,amCap1712,2020-08-27T18:36:50Z,kartikohri13@gmail.com,GitHub,2020-08-27T18:36:50Z,noreply@github.com,636,519,117,"Merge pull request #16 from jcflack/CI-5

Integration testing using 'Node' methods in the package jar"
,pljava-packaging/src/main/java/Node.java,66134d23adbb3cd532d132fc265cba51405b79fb,Chapman Flack,2020-08-27T04:50:21Z,chap@anastigmatix.net,Chapman Flack,2020-08-27T16:11:13Z,chap@anastigmatix.net,24,18,6,"Minor polishing, skip updating homebrew

... assuming whatever homebrew cache is initially on the VM image
probably is up-to-date enough? That should at least slim the log
by the large lists of updated formulae. (Maybe that is an indication
that what's on the VM image is not up-to-date enough. Have to see.)

Eliminating the homebrew auto update also eliminates the auto-upgrade
it was doing to dozens of packages we have no interest in, cutting that
part of the build from over 9 minutes down to half a minute or so."
,pljava-packaging/src/main/java/Node.java,9d6e1e0c5a141dedfb6c8d00c99cedd6942635b3,Chapman Flack,2020-08-26T15:56:20Z,chap@anastigmatix.net,Chapman Flack,2020-08-26T15:56:24Z,chap@anastigmatix.net,32,31,1,"Allow different granularity file/process times

With OS X and Java 9 there could be a frequent hang because
the modification time on postmaster.pid appeared truncated to
seconds, and would look earlier than the process start time,
which wasn't. As the time check is just a heuristic, add a second
to the file time before comparing.

Caught with some logic to detect cycles in the wait_for_pid_file
routine, which will be left in place as a hedge against future
similar puzzles."
,pljava-packaging/src/main/java/Node.java,9cdbd5ea212a3fd1839bae7b34c2226c14de52eb,Chapman Flack,2020-08-26T15:54:40Z,chap@anastigmatix.net,Chapman Flack,2020-08-26T15:54:40Z,chap@anastigmatix.net,6,5,1,"Ensure lines(pidfile) will be closed

There is an API node for Files.lines() that I had overlooked."
,pljava-packaging/src/main/java/Node.java,159073192089f544fe5f9d9e0babb3fae612ee2b,Chapman Flack,2020-08-26T00:32:58Z,chap@anastigmatix.net,Chapman Flack,2020-08-26T00:32:58Z,chap@anastigmatix.net,78,66,12,"Work around the pg_ctl race condition on Windows

There is a race condition known for pg_ctl on Windows:
https://www.postgresql.org/message-id/16922.1520722108%40sss.pgh.pa.us

The same issue can also affect Java's deleteIfExists method and cause
an AccessDeniedException during clean_node() here.

Workarounds needed:

- if ProcessBuilder tweaks were applied when starting the server,
  and pg_ctl is used, apply the same tweaks when running pg_ctl stop.
  That way, if a tweak was used to merge stderr into stdout and avoid
  the mess PowerShell makes of stderr, the mess will also be avoided
  for the message written by pg_ctl when tripped by this race.

- if pg_ctl stop exits with a nonzero status, wait a bit and then check
  that the server has gone away; if it has, consider the exit status
  benign.

- in clean_node(), if AccessDeniedException is caught when trying to
  delete postmaster.pid, wait a bit and try to delete it again."
,pljava-packaging/src/main/java/Node.java,b6f56d707a6094ac379c1cbca8ec362261c08dd0,Chapman Flack,2020-08-24T23:10:46Z,chap@anastigmatix.net,Chapman Flack,2020-08-25T21:15:43Z,chap@anastigmatix.net,7,6,1,"Pre-PG10, the SHMEM_KEY line wasn't on Windows

Expecting it was causing wait_for_pid_file to hang on 9.6 Windows
startup.

https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/include/miscadmin.h;hb=8c55244#l444"
,pljava-packaging/src/main/java/Node.java,756f6f39fd21246e6f981ba3913dfb628c397d5e,Chapman Flack,2020-08-25T03:56:32Z,chap@anastigmatix.net,Chapman Flack,2020-08-25T21:15:43Z,chap@anastigmatix.net,16,16,0,"Don't try to exec MinGW's initdb bash script

MinGW-w64 packaging of PostgreSQL seems to require a rather
platform-specific wart added in Node.java."
,pljava-packaging/src/main/java/Node.java,124ae8025c40786bf97686b9ff2d72e83aacfbc7,Chapman Flack,2020-08-24T21:38:53Z,chap@anastigmatix.net,Chapman Flack,2020-08-24T21:38:53Z,chap@anastigmatix.net,31,28,3,"Avoid spurious failure when using pg_ctl

The test for whether the server process has exited during the
ready wait must not use the passed Process p; that's just the
pg_ctl process, and would be expected to have exited."
,pljava-packaging/src/main/java/JarX.java,5f0994eadec62effc22ddd7c8dd4fd0c16bfff09,Chapman Flack,2020-08-23T18:57:10Z,chap@anastigmatix.net,Chapman Flack,2020-08-23T18:57:10Z,chap@anastigmatix.net,2931,2837,94,Merge pull request #287 from chore/master/denashorn
,pljava-packaging/src/main/java/Node.java,5f0994eadec62effc22ddd7c8dd4fd0c16bfff09,Chapman Flack,2020-08-23T18:57:10Z,chap@anastigmatix.net,Chapman Flack,2020-08-23T18:57:10Z,chap@anastigmatix.net,2931,2837,94,Merge pull request #287 from chore/master/denashorn
,pljava-packaging/src/main/java/Node.java,4bd5b55fb81dc21fcb5bc2c47a6999766b36237c,Chapman Flack,2020-08-23T15:27:45Z,chap@anastigmatix.net,Chapman Flack,2020-08-23T15:27:45Z,chap@anastigmatix.net,198,196,2,"Add q flavors for ResultSet rows and columns

These allow extending the ""Stream<Object> driving a DFA"" idiom
so it can also be used to check ResultSet row contents, or
column and parameter metadata."
,pljava-packaging/src/main/java/Node.java,6f02f340d5549f3a1eefd0dc26faca3361e767e4,Chapman Flack,2020-08-23T00:45:53Z,chap@anastigmatix.net,Chapman Flack,2020-08-23T15:19:49Z,chap@anastigmatix.net,311,289,22,"Add a rudimentary DFA for checking a result stream

The caller can supply a list of lambdas representing numbered states of
a DFA, where the first in the list is considered state 1 and the initial
state. Repeatedly, the current state will be applied to the current item
of input, and may return the number of the next state, true to indicate
a successful match, or false for inability to proceed. When moving to
a new state, the current input item may be consumed, or retained and
examined again in the new state.

Also add a method peek(Object), which will print an object largely the
same way qp would, but intended to be passed to Stream.peek to create a
stream that will visibly print its members while also being passed to
dfa() for matching. Unlike qp, peek declares no checked exceptions (as
the Stream API requires), and will print only the metadata of a
ResultSet, avoiding closing it or disturbing its cursor, so it can still
be examined in the DFA."
,pljava-packaging/src/main/java/Node.java,959bba3cb30afb7f19cef295f5b7acc3db41f274,Chapman Flack,2020-08-19T02:52:41Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:52:41Z,chap@anastigmatix.net,484,339,145,"Produce documentation for Node in -packaging

In passing, move the implementation of q(Statement,Callable)
nearer to q(Statement,String) so the javadoc flows better."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptEngineLoader.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/package-info.java,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-so/src/main/c/PgSavepoint.c,03fd5cc320398ddfb86c0ca028a966aa69abab81,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:51:14Z,chap@anastigmatix.net,2377,2039,338,Merge branch 'master' into chore/master/denashorn
,pljava-packaging/src/main/java/Node.java,2b266d8353b9d51e1d43be35bf566e21f2b9924e,Chapman Flack,2020-08-19T02:48:26Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:48:26Z,chap@anastigmatix.net,52,47,5,"Add semiFlattenDiagnostics

The flattenDiagnostics method relies on the behavior of
SQLException.iterator(), which will produce one flattened stream
of SQLExceptions or SQLWarnings and their causes, if any.

In many cases, it will be preferable only to flatten the
chain represented by getNextException or getNextWarning, leaving
causes to be retrieved from the exception or warning they caused.
That's what semiFlattenDiagnostics does. It is now the default
behavior for qp with no 'flattener' argument; a new qp that takes
a flattener argument is supplied to preserve the choice."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,7c80d742ed0deb6ee2fbffcefe312c2828dd737c,Chapman Flack,2020-08-19T02:32:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-19T02:32:11Z,chap@anastigmatix.net,3,1,2,"Late-caught bug in just-merged PR

When -Dpgsql.pgconfig is supplied on Maven's command line, it
appears as a system property, not a project property. If there
is another PostgreSQL version installed with a pg_config on the
default path, the build would end up using that rather than the
intended version."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptEngineLoader.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/package-info.java,0ed8840257b5e07e5af69ecb80ba1acaa2ae689f,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T16:18:11Z,chap@anastigmatix.net,2404,2071,333,Merge pull request #288 from feature/master/scriptreports
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,0654edde01c34cab95f8d4029a8208fdfce7135b,amCap1712,2020-08-18T13:59:59Z,kartikohri13@gmail.com,GitHub,2020-08-18T13:59:59Z,noreply@github.com,118,42,76,"Merge pull request #12 from jcflack/polishing

A few last touches of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,0654edde01c34cab95f8d4029a8208fdfce7135b,amCap1712,2020-08-18T13:59:59Z,kartikohri13@gmail.com,GitHub,2020-08-18T13:59:59Z,noreply@github.com,118,42,76,"Merge pull request #12 from jcflack/polishing

A few last touches of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,0654edde01c34cab95f8d4029a8208fdfce7135b,amCap1712,2020-08-18T13:59:59Z,kartikohri13@gmail.com,GitHub,2020-08-18T13:59:59Z,noreply@github.com,118,42,76,"Merge pull request #12 from jcflack/polishing

A few last touches of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,0654edde01c34cab95f8d4029a8208fdfce7135b,amCap1712,2020-08-18T13:59:59Z,kartikohri13@gmail.com,GitHub,2020-08-18T13:59:59Z,noreply@github.com,118,42,76,"Merge pull request #12 from jcflack/polishing

A few last touches of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,0654edde01c34cab95f8d4029a8208fdfce7135b,amCap1712,2020-08-18T13:59:59Z,kartikohri13@gmail.com,GitHub,2020-08-18T13:59:59Z,noreply@github.com,118,42,76,"Merge pull request #12 from jcflack/polishing

A few last touches of polishing"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,01a89f89768dcd8360792a23d33d47a9baf43a2a,Chapman Flack,2020-08-18T00:41:58Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,20,20,0,"Javadoc warnings in new code

With so much of the project legacy code, I have formed the bad habit
of shrugging at Javadoc warnings (or viewing them as confirmation
that javadoc ran). But there were few enough in this new code to
simply fix them all and have javadoc run warning-free for a change."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,01a89f89768dcd8360792a23d33d47a9baf43a2a,Chapman Flack,2020-08-18T00:41:58Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,20,20,0,"Javadoc warnings in new code

With so much of the project legacy code, I have formed the bad habit
of shrugging at Javadoc warnings (or viewing them as confirmation
that javadoc ran). But there were few enough in this new code to
simply fix them all and have javadoc run warning-free for a change."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,01a89f89768dcd8360792a23d33d47a9baf43a2a,Chapman Flack,2020-08-18T00:41:58Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,20,20,0,"Javadoc warnings in new code

With so much of the project legacy code, I have formed the bad habit
of shrugging at Javadoc warnings (or viewing them as confirmation
that javadoc ran). But there were few enough in this new code to
simply fix them all and have javadoc run warning-free for a change."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,01a89f89768dcd8360792a23d33d47a9baf43a2a,Chapman Flack,2020-08-18T00:41:58Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,20,20,0,"Javadoc warnings in new code

With so much of the project legacy code, I have formed the bad habit
of shrugging at Javadoc warnings (or viewing them as confirmation
that javadoc ran). But there were few enough in this new code to
simply fix them all and have javadoc run warning-free for a change."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,0281612946468a5c11e21a313d19f76f4789ff51,Chapman Flack,2020-08-18T00:20:10Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,4,2,2,A couple last javac warnings
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,0281612946468a5c11e21a313d19f76f4789ff51,Chapman Flack,2020-08-18T00:20:10Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:48:47Z,chap@anastigmatix.net,4,2,2,A couple last javac warnings
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,49764b5140b7abb531f1c86be764aecf4793e4ae,Chapman Flack,2020-08-17T23:38:48Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:47:41Z,chap@anastigmatix.net,28,10,18,"Tweak names of new goal and report

scripting-report -> scripted-report (the first way sounded like
it could be a report about use of scripting in the project).

scripting -> scripted-goal for consistency.

The id of a scripted goal or report should be used to say something
about what it is intended to do."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,49764b5140b7abb531f1c86be764aecf4793e4ae,Chapman Flack,2020-08-17T23:38:48Z,chap@anastigmatix.net,Chapman Flack,2020-08-18T00:47:41Z,chap@anastigmatix.net,28,10,18,"Tweak names of new goal and report

scripting-report -> scripted-report (the first way sounded like
it could be a report about use of scripting in the project).

scripting -> scripted-goal for consistency.

The id of a scripted goal or report should be used to say something
about what it is intended to do."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,fd1cbbe2f4a40358d3a76c998b79b8124c79b844,amCap1712,2020-08-17T15:09:08Z,kartikohri13@gmail.com,GitHub,2020-08-17T15:09:08Z,noreply@github.com,688,547,141,"Merge pull request #11 from jcflack/intermodule-javadoc-2

Some fixes, and get intermodule javadoc links working"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,fd1cbbe2f4a40358d3a76c998b79b8124c79b844,amCap1712,2020-08-17T15:09:08Z,kartikohri13@gmail.com,GitHub,2020-08-17T15:09:08Z,noreply@github.com,688,547,141,"Merge pull request #11 from jcflack/intermodule-javadoc-2

Some fixes, and get intermodule javadoc links working"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,5f4673f435b0d6f2dfe5f83b9e9729ba5c07ae9b,Chapman Flack,2020-08-13T03:21:36Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,58,46,12,"Extra .. needed when linking from modular code

The RelativizingFileManager has to check whether the output
location is module-oriented, and add another ../ if so, to
account for the module-name directory level at the top of
the tree.

For some reason, javadoc in pljava/ will complain if the -d
option isn't passed to the file manager. In pljava-examples/
it wasn't being passed, and nothing complained. Anyway, moving
-d up to the start of args in both places for consistency."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,5168b88e134d62482adfe0dd2df7c6d0117c5148,Chapman Flack,2020-08-13T01:59:41Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,166,162,4,"Introduce a RelativizingFileManager

This is a workaround for javadoc's -linkoffline behavior, where
following the documented instruction to supply a URL relative to
the -d destination results in broken links, because javadoc forgets
to add the right number of ../ components when writing files in
subdirectories, as it would have to for that rule to work. It also
fails to expand {@docRoot} in a -linkoffline URL, which would
otherwise be a simpler workaround.

This file manager simply interposes on output HTML files as they
are written, and rewrites URLs containing RELDOTS to replace that
token with the appropriate number of ../ components, exactly as
{@docRoot} would be replaced if it were honored.

A supplied -linkoffline URL must have its own ../ components,
if any, placed before RELDOTS and not after, because javadoc
normalizes the URL, such that if RELDOTS were followed by
any ../ component, both would disappear, and this file manager
would find nothing to rewrite."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,0a6c14f48181e9c0065420e2f17110a6f3b9e4ae,Chapman Flack,2020-08-13T23:21:27Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,35,32,3,"Add a handleFirstOptions method

As the options recognized by the standard file manager are generally
those among the ""Standard Options"" that javadoc inherits from javac
(including the various location-setting options such as -classpath,
as well as -encoding), with a little care to place those first
in the argument list to be passed to the tool itself, the same list
can be passed to a method on RelativizingFileManager that simply
calls handleOption() repeatedly until it doesn't recognize an option,
and thereby configure the file manager without repeating yourself much."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,e99f844532279c669356205b94a33828ae165177,Chapman Flack,2020-08-12T00:20:34Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,7,7,0,"Default methods solve problems and cause others

Before default methods, API updates could prevent recompiling
your code until you added implementations, possibly causing pain.

With default methods, if you have a forwarding/proxy implementation
and an API update adds a default method, everything compiles and
now you have a forwarding implementation that doesn't forward every
method, possibly causing pain.

No silver bullets."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/RelativizingFileManager.java,87831e4fdcc75d3de21f5bf1f86779eae35ad0c2,Chapman Flack,2020-08-13T02:13:37Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,128,128,0,Start on RelativizingFileManager
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,2d3181b30835f574e73326293b861b61c30cdd8c,Chapman Flack,2020-08-13T23:12:10Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:27:34Z,chap@anastigmatix.net,14,6,8,"Get classpath/modulepath segregation working

The pljava-examples javadoc was working, which sounds good,
but was actually weird, because it was only passing -classpath
to javadoc, and buildPaths() should have been detecting that
pljava-api is modular, and putting it on the module path instead,
where javadoc would not have been able to find it.

That was a small matter in buildPaths(): the endsWith() method
on a Path does not mean what endsWith() on a String means. On
a Path, it tests for an ending sequence of intact path elements.
If you want to match just the ending /portion/ of the last path
element against some /characters/, it has to be a String first.

With that working, of course the -examples javadoc fails, which
could be fixed two ways: either smash paths['classpath'] and
paths['modulepath'] back into a single string and call it -classpath
(which is back to what was happening before, and works because the
examples code isn't modular, so even the dependencies that are
modules don't have to be treated as such), or, pass the class path
and the module path separately, and name org.postgresql.pljava in
an --add-modules option (which is needed because the examples code,
being ignorant of modules, has no way of saying ""hey, I use that
module"").

Done here the second way, as it seems more in the spirit of the
module system."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,1d9a3759ab250911c3f21ff4772cb5899381e2ce,Chapman Flack,2020-08-17T12:26:33Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T12:26:33Z,chap@anastigmatix.net,1,0,1,Explicit close no longer needed in try-resources
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/package-info.java,cb21e6da0cf6aa2e3ceba8fea5a5a9b9c94027ec,Kartik Ohri,2020-08-17T08:39:33Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:20Z,kartikohri13@gmail.com,29,26,3,Add more documentation to PL/Java PGXS
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,8ff8cd771ffe6e06633e8e383affd7358425ed68,Kartik Ohri,2020-08-15T04:14:09Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:20Z,kartikohri13@gmail.com,239,228,11,Add missing javadocs
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,8ff8cd771ffe6e06633e8e383affd7358425ed68,Kartik Ohri,2020-08-15T04:14:09Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:20Z,kartikohri13@gmail.com,239,228,11,Add missing javadocs
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,8ff8cd771ffe6e06633e8e383affd7358425ed68,Kartik Ohri,2020-08-15T04:14:09Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:20Z,kartikohri13@gmail.com,239,228,11,Add missing javadocs
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,8ff8cd771ffe6e06633e8e383affd7358425ed68,Kartik Ohri,2020-08-15T04:14:09Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:20Z,kartikohri13@gmail.com,239,228,11,Add missing javadocs
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,01314b27cfe1b5f7f43a2119f70be88b88774de6,Kartik Ohri,2020-08-10T20:54:42Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:19Z,kartikohri13@gmail.com,141,128,13,"Add utility methods buildPaths and isProfileActive

buildPaths can be used to obtain the modulepath and classpath from
a list of string paths. isProfileActive can be used to detect whether
profile with given name is active for the current session."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,01314b27cfe1b5f7f43a2119f70be88b88774de6,Kartik Ohri,2020-08-10T20:54:42Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:19Z,kartikohri13@gmail.com,141,128,13,"Add utility methods buildPaths and isProfileActive

buildPaths can be used to obtain the modulepath and classpath from
a list of string paths. isProfileActive can be used to detect whether
profile with given name is active for the current session."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,01314b27cfe1b5f7f43a2119f70be88b88774de6,Kartik Ohri,2020-08-10T20:54:42Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-17T08:40:19Z,kartikohri13@gmail.com,141,128,13,"Add utility methods buildPaths and isProfileActive

buildPaths can be used to obtain the modulepath and classpath from
a list of string paths. isProfileActive can be used to detect whether
profile with given name is active for the current session."
,pljava-packaging/src/main/java/Node.java,98cc847af06d361230cd351e209783f564e99a7e,Chapman Flack,2020-08-17T02:10:47Z,chap@anastigmatix.net,Chapman Flack,2020-08-17T02:10:47Z,chap@anastigmatix.net,73,56,17,"Factor out void result set tests

Testing code may wish to examine these results, not merely
print them."
,pljava-packaging/src/main/java/Node.java,d3b16434eee3ce58f1718f593eb79e79247dac4d,Chapman Flack,2020-08-16T14:58:41Z,chap@anastigmatix.net,Chapman Flack,2020-08-16T14:58:41Z,chap@anastigmatix.net,26,23,3,"Handle the empty-argument case for Windows

There will probably never be an empty argument in any expected
invocation of initdb or postgres from here, but make sure the case
is not left unhandled in forWindowsCRuntime anyway, in case the code
gets reused elsewhere.

Kartik confirmed empirically that """" works, and that the Java runtime
doesn't catch the case itself."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,e4acbbab72dd0908d0f901807f63bfc69a099b12,Chapman Flack,2020-08-07T23:33:25Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T19:28:12Z,kartikohri13@gmail.com,133,82,51,"Give scripts some logging functions (& cleanup)

Bind into the script engine some references to Maven's logging
methods for convenience, and also one that can dispatch to the
right Maven method based on a Diagnostic.Kind, for convenience
if a script might handle diagnostics from a java.compiler tool.

Also ... reformat scripts more consistently in CDATA sections ...
drop the misnamed setPgConfigProperty method; setting a project
property is more general than that, and doesn't need to be
spread over two classes."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,e4acbbab72dd0908d0f901807f63bfc69a099b12,Chapman Flack,2020-08-07T23:33:25Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T19:28:12Z,kartikohri13@gmail.com,133,82,51,"Give scripts some logging functions (& cleanup)

Bind into the script engine some references to Maven's logging
methods for convenience, and also one that can dispatch to the
right Maven method based on a Diagnostic.Kind, for convenience
if a script might handle diagnostics from a java.compiler tool.

Also ... reformat scripts more consistently in CDATA sections ...
drop the misnamed setPgConfigProperty method; setting a project
property is more general than that, and doesn't need to be
spread over two classes."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,1ae9eb6d006cf17e2c408aa4de6f0bb9c8cbc540,Chapman Flack,2020-08-05T22:43:25Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,159,152,7,"Ensure plugin works in Java 15 for reports too

Profiles that add dependencies to pljava-pgxs can't be in
the parent pom, as they would cause failure in a first-time
build where that plugin isn't built yet. So they have to be
duplicated in each submodule that uses pljava-pgxs, and there
are more of those now, thanks to its use for javadocs. Not
delightful, but bearable.

In profiles that add dependencies bar and baz to plugin foo,
it isn't necessary to specify the version of foo; that would
just become a value duplicated in many places and probably
overlooked for updates.

The profile in the parent pom that adds the graaljs dependencies
to maven-antrun-plugin still needs to be there, as long as we are
still using that plugin to run any scripts. One day if all those
scripts have been migrated to use the new plugin, that will
become unnecessary. That profile is also responsible for setting
the polyglot.js.nashorn-compat system property to true, without
which the Graal engine behaves differently from the Nashorn one.

That turns out not to be enough, because properties-maven-plugin
doesn't run in the 'site' lifecycle, but the report scripts still
need the property. So a bit of hardcoding in PGXSUtils will also
set it, if it isn't set and this is Java 15 or later. Also not
delightful, but it seems to be necessary. That means that the
setting of that property via profile in the parent pom could also
become unnecessary if all uses of script in antrun get migrated
to the new plugin.

In passing, fix an older apparent logic bug in PGXSUtils and put
a comment back on the line where it belonged."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,5863279d84f9e858faa85e77648a8838e2a11f25,Chapman Flack,2020-08-05T02:11:02Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,16,9,7,"First method called isn't always executeReport

In particular, canGenerateReport gets called earlier."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,78aa7616e8943b103d3678fb4a5670075c3c21fc,Chapman Flack,2020-08-05T01:50:26Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,111,60,51,"Use Invocable for ReportScript

ReportScript is an interface that the scripting engine (provided
it implements Invocable) can automagically generate an implementation
of, as long as the script block that has been evaluated contained
appropriate function definitions.

It is even possible to give the interface default methods, which
the script block can override, but doesn't have to.

The interface methods end up needing the mojo as a parameter
(so the default interface methods have a way to refer to it), and
of course that means the script functions need to accept that
parameter as well. That's ok; the script needed a reference to
the mojo anyway. It used to be bound in the script engine with the
name 'report'; now it's a function parameter. The world still spins.

If the interface default methods to return the same defaults
implemented by AbstractMavenReport, they just have to call back on
some new, non-public methods on the mojo, which do nothing but
call the corresponding superclass methods."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,78aa7616e8943b103d3678fb4a5670075c3c21fc,Chapman Flack,2020-08-05T01:50:26Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,111,60,51,"Use Invocable for ReportScript

ReportScript is an interface that the scripting engine (provided
it implements Invocable) can automagically generate an implementation
of, as long as the script block that has been evaluated contained
appropriate function definitions.

It is even possible to give the interface default methods, which
the script block can override, but doesn't have to.

The interface methods end up needing the mojo as a parameter
(so the default interface methods have a way to refer to it), and
of course that means the script functions need to accept that
parameter as well. That's ok; the script needed a reference to
the mojo anyway. It used to be bound in the script engine with the
name 'report'; now it's a function parameter. The world still spins.

If the interface default methods to return the same defaults
implemented by AbstractMavenReport, they just have to call back on
some new, non-public methods on the mojo, which do nothing but
call the corresponding superclass methods."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScript.java,6ac9059352f1c831c0a300e849a44b40f49fcb09,Kartik Ohri,2020-08-04T11:43:50Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,120,101,19,"Create ReportScript interface for extensibility

Some parameters like getOutputName and so on were hardcoded inside the
ReportScriptingMojo. While this was enough to meet the current needs of
generating javadoc, it could be problematic with other future potential
use cases. Therefore, a ReportScript interface has been created with
some relevant methods that are subset of AbstractMavenReport class.

The script can extend the interface and override only the values it
wants to. For the remaining, the defaults will be used. This new
instance must then be passed to the ReportScriptingMojo using
setReportScript."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,6ac9059352f1c831c0a300e849a44b40f49fcb09,Kartik Ohri,2020-08-04T11:43:50Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,120,101,19,"Create ReportScript interface for extensibility

Some parameters like getOutputName and so on were hardcoded inside the
ReportScriptingMojo. While this was enough to meet the current needs of
generating javadoc, it could be problematic with other future potential
use cases. Therefore, a ReportScript interface has been created with
some relevant methods that are subset of AbstractMavenReport class.

The script can extend the interface and override only the values it
wants to. For the remaining, the defaults will be used. This new
instance must then be passed to the ReportScriptingMojo using
setReportScript."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,0baa6866c20170d7d2e994cc7fadb37cd187eb29,Kartik Ohri,2020-08-03T19:14:37Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,57,8,49,"Fix bug in javadoc generation

TL,DR; override isExternalReport to return true
There was a flaw in the logic of the ReportScriptingMojo. The
index.html under apidocs is created by the javadoc tool. Before this
commit, the mojo created an index.html of its own in the same place
overwriting the one created by the javadoc tool. Deleting the snippet
creating this file is not enough because maven would automatically
generate a file with the project styling but empty contents of its own.
This would again override the index.html created by javadoc tool.

Maven obtains the name of the html to generate from getOutputName
method of the report. This file name is automatically linked to the
project-reports.html page so changing the name would spill its own
problems. However, the solution is fairly simple. Maven Reporting API
provides a isExternalReport method which can be overridden to turn off
this behaviour."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,f87f204e721d10f3924858937f830130d945c06e,Kartik Ohri,2020-07-30T20:52:54Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,58,36,22,Expose some more useful methods from ReportScriptingMojo for use in scripting
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,c796ac34c5a875ec5996156c4f714c16bd599333,Kartik Ohri,2020-07-30T14:11:46Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,49,49,0,Use Doxia sink to generate report html
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,133f6a321e9c8be1f34a34fc3c9899face1152b4,Kartik Ohri,2020-07-30T14:10:19Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,19,15,4,Expose path to pljava-api jar to scripts using ReportScriptingMojo
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,3b5b39d6c8137131227356bf2b2a12fa1837f9ac,Kartik Ohri,2020-07-28T19:04:05Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,174,79,95,"Move usage of javadoc tool from mojo to script

The ReportScriptingMojo is now completely agnostic to what it does during the site phase. The Mojo loads the script and executes it. This opens it up to other potential use cases."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ReportScriptingMojo.java,3b5b39d6c8137131227356bf2b2a12fa1837f9ac,Kartik Ohri,2020-07-28T19:04:05Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,174,79,95,"Move usage of javadoc tool from mojo to script

The ReportScriptingMojo is now completely agnostic to what it does during the site phase. The Mojo loads the script and executes it. This opens it up to other potential use cases."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/DocumentationMojo.java,d6468be3493b86cbd6f6092801ce43d52dde45ce,Kartik Ohri,2020-07-28T17:43:08Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,38,16,22,Replace explicit ProcessBuilder call with DocumentationTool
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,d6468be3493b86cbd6f6092801ce43d52dde45ce,Kartik Ohri,2020-07-28T17:43:08Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,38,16,22,Replace explicit ProcessBuilder call with DocumentationTool
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/JavadocMojo.java,6e39cff36d1b941d955ca92c589b2b4c10c10ede,Kartik Ohri,2020-07-27T10:32:53Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,98,94,4,Add JavadocMojo for executing the javadoc tool during site phase
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,fffac8f461c739403e57f1021dffcc1288c4d5f6,Kartik Ohri,2020-07-27T10:27:53Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,285,169,116,"Move ScriptEngineLoader and getScriptEngine out of ScriptingMojo

Both of these are required by the JavadocMojo as well so extract these into utilities classes to avoid code duplication."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptEngineLoader.java,fffac8f461c739403e57f1021dffcc1288c4d5f6,Kartik Ohri,2020-07-27T10:27:53Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,285,169,116,"Move ScriptEngineLoader and getScriptEngine out of ScriptingMojo

Both of these are required by the JavadocMojo as well so extract these into utilities classes to avoid code duplication."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,fffac8f461c739403e57f1021dffcc1288c4d5f6,Kartik Ohri,2020-07-27T10:27:53Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,285,169,116,"Move ScriptEngineLoader and getScriptEngine out of ScriptingMojo

Both of these are required by the JavadocMojo as well so extract these into utilities classes to avoid code duplication."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,e47ce41adfe39249baef21c34d6c54735c113996,Kartik Ohri,2020-07-21T19:00:40Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,99,55,44,Allow script tag to specify script engine and mime type
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,8ef1c7c0c48ed034598543aa632b440ef7e05007,Chapman Flack,2020-07-19T21:27:54Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,16,9,7,"It's the platform loader, not the application one

I had been relying on [1] in believing that Nashorn had been moved
onto the application class path, but it turns out to be found with
no trouble by the platform class loader. If the Maven developers
were concerned about stability if delegating to the application
loader, that concern should be reduced by delegating just to the
platform loader instead.

[1] https://issues.apache.org/jira/browse/MANTRUN-200?focusedCommentId=16138712&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16138712"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,f570bab229dd8204df48a22951f6f78e6507e16d,Chapman Flack,2020-07-19T21:19:49Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,48,30,18,"Swap the two parents of ScriptEngineLoader

My understanding of the reason Nashorn started failing to load
in Java 9 has been somewhat mistaken since 6cd539b. It is not
so much that the Maven-supplied class loader never delegates to
Java's loader. The key change came with the Java 9 module system,
and the way the ServiceLoader works for services in named modules.

The former (and current, for unnamed modules) algorithm involved
searching for META-INF/services/* resources to find the providers
of services. For named modules, the bindings are computed from the
module-info files, and the javadoc for ServiceLoader.load provides:

""Step 1: Locate providers in named modules.

Service providers are located in all named modules of the class loader
or to any class loader reachable via parent delegation.""

That turns out to be literally true. The ServiceLoader is not guided
by whatever delegation policy a class loader actually implements by
the way it overrides ClassLoader's default search order. To identify
reachable modules, ServiceLoader only knows to follow a ClassLoader's
actual parent link, nothing else.

That means this two-parent classloader idea wasn't wrong, but if it's
to find providers in Java-supplied modules, it needs its parents
swapped so the Java application class loader is the real one and the
loader supplied by Maven is the 'extra' one.

With that delegation order, it could present some risk of class version
conflicts, if the Maven-supplied loader has defined some classes that
should supersede those from the application loader. That could be fixed
by overriding other ClassLoader methods to change the standard delegation
strategy. But with the narrow, targeted use of this loader only with the
ScriptEngineManager, the risk may be low enough.

It is fortunate that, for now, Maven itself and Maven plugins are not
heavy users of named modules. This headache could recur if it ever
becomes necessary to load named-module services from *both* parents
of this loader. At that point, it could become necessary to explore
whether the comments in ServiceLoader.load about ModuleLayer searching
would offer any solution."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,8eb132f27a63f717eda11499a86c684a74f3e0d4,Chapman Flack,2020-07-19T20:15:41Z,chap@anastigmatix.net,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,69,68,1,"Try a 2-parent classloader for ScriptEngineManager

My understanding (since 6cd539b) has been that Java 9 moved Nashorn
from the bootstrap classloader to the application classloader [1], and
that Maven creates classloaders that do not delegate to the application
classloader (a/k/a the system classloader, as various ClassLoader
methods still call it).

So, what seemed an easy solution would be to create a new ClassLoader
as a child of the Maven-supplied loader, but that would also behave as
if it had the application class loader as a second parent.

It still doesn't find Nashorn though. Back to the drawing board.

[1] https://issues.apache.org/jira/browse/MANTRUN-200?focusedCommentId=16138712&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16138712"
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,1a5811d067fb78b17a5fa19acf2aa2544242aa88,Kartik Ohri,2020-07-19T07:58:13Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,25,19,6,"Temporary fix for ClassLoader issue to make ScriptingMojo work

Maven has weird classloading issues due to which it is not able
to detect the Nashorn Script Engine. As a temporary fix, the
System ClassLoader is passed to the ScriptEngineManager to
ensure it is able to find Nashorn."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/PGXSUtils.java,c1eee7bfb5420b3432af392d8308f4227485a426,Kartik Ohri,2020-07-09T19:23:52Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,624,376,248,"Setup PL/Java PGXS plugin

This commit intriduces the PL/Java PGXS plugin. The ultimate
aim is to replace nar maven plugin in PL/Java's build system
to solve the fair share of problems it brings with it. All big
things begin small. This commit makes it possible for the PGXS
plugin to launch pg_config, retrieve the required properties
from it and set those in the maven project. These properties
are required by nar maven plugin during its build process.
Before this commit, the task was achieved using maven
properties and maven antrun plugins. The commit also removes
these from the relevant parts where they are no longer needed.

The pljava build process already uses bits of
javascript. The aim is to extract the bland
parts of JavaScript in the Java Code and expose
a nice set of functions that make configuring
the build process from the pom.xml using small
javascript snippets easy. This commit is the
first step in that direction.

Instead of the setting the Properties using
PropertiesMojo and PackagingMojo, now a
setProjectProperty and getPgConfigProperty
method is exposed by the ScriptingMojo. These
methods are called by in a script block inside
th configuration block of the plugin in pom.xml."
,pljava-pgxs/src/main/java/org/postgresql/pljava/pgxs/ScriptingMojo.java,c1eee7bfb5420b3432af392d8308f4227485a426,Kartik Ohri,2020-07-09T19:23:52Z,kartikohri13@gmail.com,Kartik Ohri,2020-08-15T04:09:44Z,kartikohri13@gmail.com,624,376,248,"Setup PL/Java PGXS plugin

This commit intriduces the PL/Java PGXS plugin. The ultimate
aim is to replace nar maven plugin in PL/Java's build system
to solve the fair share of problems it brings with it. All big
things begin small. This commit makes it possible for the PGXS
plugin to launch pg_config, retrieve the required properties
from it and set those in the maven project. These properties
are required by nar maven plugin during its build process.
Before this commit, the task was achieved using maven
properties and maven antrun plugins. The commit also removes
these from the relevant parts where they are no longer needed.

The pljava build process already uses bits of
javascript. The aim is to extract the bland
parts of JavaScript in the Java Code and expose
a nice set of functions that make configuring
the build process from the pom.xml using small
javascript snippets easy. This commit is the
first step in that direction.

Instead of the setting the Properties using
PropertiesMojo and PackagingMojo, now a
setProjectProperty and getPgConfigProperty
method is exposed by the ScriptingMojo. These
methods are called by in a script block inside
th configuration block of the plugin in pom.xml."
,pljava-packaging/src/main/java/Node.java,926f6063d7b851b138fdee402e73b1abe0cdb200,Chapman Flack,2020-07-25T01:09:04Z,chap@anastigmatix.net,Chapman Flack,2020-07-25T01:09:04Z,chap@anastigmatix.net,22,22,0,Wanted no-arg initialized_cluster/started_server
,pljava-packaging/src/main/java/Node.java,5b2e990901688ad644c33f5864b3c98747647ee8,Chapman Flack,2020-07-24T03:14:42Z,chap@anastigmatix.net,Chapman Flack,2020-07-24T03:14:42Z,chap@anastigmatix.net,18,18,0,Meant to have no-arg versions of init and start
,pljava-packaging/src/main/java/Node.java,2fc851397028b1d3a5b25c2f4851f0967566e28d,Chapman Flack,2020-07-24T02:53:29Z,chap@anastigmatix.net,Chapman Flack,2020-07-24T02:53:29Z,chap@anastigmatix.net,4,2,2,"Make the ProcessBuilder transformations static

There was never any reason for them to be otherwise."
,pljava-packaging/src/main/java/Node.java,801452137f1fc9409d9a1067d8e32a20d7fddf73,Chapman Flack,2020-07-24T01:30:23Z,chap@anastigmatix.net,Chapman Flack,2020-07-24T02:49:08Z,chap@anastigmatix.net,4,2,2,"Save key locations even if not dry run

A jshell invocation might invoke main() to extract
and then do other work."
,pljava-packaging/src/main/java/Node.java,a344af6896b87098faeda24a17f33e44ea753036,Chapman Flack,2020-07-24T02:47:02Z,chap@anastigmatix.net,Chapman Flack,2020-07-24T02:47:40Z,chap@anastigmatix.net,12,6,6,"Fussing with Node/Windows details

os.name may be simply Linux on Linux, but on Windows
it's Windows something something.

To CMD, \ is not special, and ^ is.

If I'm going to write ""n may be zero"" in the comment, it's only fair
to use * and not + in the regexp."
,pljava-packaging/src/main/java/Node.java,b1b2d1f2114d394c31aa9b4defefab4335fa7c0c,Chapman Flack,2020-07-24T00:17:06Z,chap@anastigmatix.net,Chapman Flack,2020-07-24T00:17:06Z,chap@anastigmatix.net,304,296,8,"Tackle argument passing via pg_ctl and on Windows

Wasn't expecting to have to bite this bullet quite so soon,
but discovering that pg_ctl also constructs command lines in
egregiously injectable ways kind of moved the schedule up.

Introduce two methods that 'transform' a ProcessBuilder (by
rewriting its 'command' argument list).

forWindowsCRuntime assumes the starting argument list is what
the target program is intended to get as its arguments, and that
it is a C program that will parse them apart using the C/C++
rules covered in [1], and rewrites them with awareness of both
those parsing rules and what the Java runtime does to the arguments
before the process is launched (from painstaking examination of
the ProcessImpl source).

asPgCtlInvocation assumes the starting argument list is what would
start a server by invoking postgres directly, and transforms it to
one that would invoke it via pg_ctl. Because of the way pg_ctl
handles options, this transformation needs to be platform-aware
and apply quoting for Bourne shell or Windows CMD as appropriate.
Even that only covers getting the args safely from pg_ctl to
postgres. Getting them safely from Java to pg_ctl in the first place
requires (on Windows) following this transformation with
forWindowsCRuntime.

[1] http://www.daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV"
,pljava-packaging/src/main/java/Node.java,9f18f3af1c23bf0ec2122caf6c656d7431c028d2,Chapman Flack,2020-07-19T00:36:25Z,chap@anastigmatix.net,Chapman Flack,2020-07-19T00:36:25Z,chap@anastigmatix.net,149,134,15,"Add option to use pg_ctl to start/stop server

This may be of use on Windows, where pg_ctl has OS-specific powers
to drop admin credentials and run the server even under an account
that has them.

Discussion:
https://www.postgresql.org/message-id/5F123C4B.3020509%40anastigmatix.net"
,pljava-packaging/src/main/java/Node.java,71b90d73d8132016290e6a2bb6f37129889c4455,Chapman Flack,2020-07-17T00:38:21Z,chap@anastigmatix.net,Chapman Flack,2020-07-17T00:38:21Z,chap@anastigmatix.net,5,1,4,There were two places using PosixFilePermissions
,pljava-packaging/src/main/java/Node.java,6951855472c8d5480214c7982753409836329ebc,Chapman Flack,2020-07-16T22:29:05Z,chap@anastigmatix.net,Chapman Flack,2020-07-16T22:29:05Z,chap@anastigmatix.net,92,76,16,"Allow caller of init/start to tweak ProcessBuilder

Running under PowerShell on Windows, it will be desirable
to call redirectErrorStream(true)."
,pljava-packaging/src/main/java/Node.java,f67bbfbedad1893819a834b18c631c3442967be4,Chapman Flack,2020-07-16T21:39:39Z,chap@anastigmatix.net,Chapman Flack,2020-07-16T21:39:39Z,chap@anastigmatix.net,7,2,5,"POSIX file permissions aren't accepted on Windows

Perhaps a Windows-specific alternative exists using ACLs,
but at least for now just use default permissions on the
temporary directory."
,pljava-packaging/src/main/java/Node.java,afd89e99dd0df7c72561379a09d0c4d9915d90fc,Chapman Flack,2020-07-16T03:18:03Z,chap@anastigmatix.net,Chapman Flack,2020-07-16T03:18:03Z,chap@anastigmatix.net,6,3,3,Straggling javac warnings in new Node class
,pljava-packaging/src/main/java/Node.java,a835174feff96f3cfb4e18720bc30cc46541aca4,Chapman Flack,2020-07-15T01:38:12Z,chap@anastigmatix.net,Chapman Flack,2020-07-15T01:38:12Z,chap@anastigmatix.net,38,38,0,"Add a qp overload to examine ParameterMetaData

Continuing in the spirit of least work to get something
that just clears the bar of 'usable', this simply fakes up
a ResultSetMetaData with the values found in the supplied
ParameterMetaData (leaving unset all the details, like column
names, that ResultSetMetaData has but not ParameterMetaData),
then uses writeXml again as if dumping a ResultSet.

For a quick answer to the question ""hey, what does PostgreSQL
think the parameters to this statement should be?"", it's
good enough."
,pljava-packaging/src/main/java/Node.java,86721d4f6856e387f7d9d038dcac97c819ab829a,Chapman Flack,2020-07-14T23:30:20Z,chap@anastigmatix.net,Chapman Flack,2020-07-14T23:30:20Z,chap@anastigmatix.net,4,2,2,"Use XML elements consistently, not PIs

If qp's output vibe is going to be XMLish, at least consistently
use element syntax; that will be easier to work with (should anyone
use it for anything beyond visual inspection) than using a hodge-podge
of different constructs."
,pljava-packaging/src/main/java/Node.java,a42c416f777eee1a3cf9f178e06851af582ed8d3,Chapman Flack,2020-07-14T21:47:44Z,chap@anastigmatix.net,Chapman Flack,2020-07-14T21:47:44Z,chap@anastigmatix.net,14,13,1,"Never underestimate the sneakiness of Windows

pg_config writes its output followed explicitly by
a single \n character, not using any platform-specific
'write a text line' method. However, Windows (probably the
C run-time library, really) treats its stdout pipe as being
in ""text mode"", which pg_config makes no special effort to
change, and so the \n by the time we read it from the pipe
has been changed to \r\n. There is no escape from having to
refer to the line.separator property when removing the line
ending from the received value.

https://stackoverflow.com/questions/5813301"
,pljava-packaging/src/main/java/Node.java,1017f13a75f1d3b10be75accabb23abd5bab39ae,Chapman Flack,2020-07-14T03:11:54Z,chap@anastigmatix.net,Chapman Flack,2020-07-14T03:11:54Z,chap@anastigmatix.net,51,46,5,"Adjust default server and connection settings

Shorten the server's log line prefix by default, so it includes
the name of the Node and (for a connection) the application name.
Have connect() assign an application name that is distinct per
connection by default. (And add connect() overloads that allow
properties to be specified.)"
,pljava-packaging/src/main/java/Node.java,18959bc2683fe98d6879a45f6935e999d07c9f5d,Chapman Flack,2020-07-14T01:49:42Z,chap@anastigmatix.net,Chapman Flack,2020-07-14T01:49:42Z,chap@anastigmatix.net,234,152,82,"Simplify, favoring short method names

Once there was an overload qp(Stream<Object>) as a convenient
short alias for print(Stream<Object>), it was a small step to see
that the method should just be qp; there's no need for an alias
with a longer name. In fact, just overload qp to print all the
things you might want to print, and q for the ways you might want
to query. Two static imports, q and qp, will take you a long way.

Axe the createExtensionPLJava method. It was hardly shorter, and
no clearer, than qp(c, ""create extension pljava"").

Factor a classify() method out of qp(Throwable), to simplify code
that wants to classify them the same way for analysis rather than
printing."
,pljava-packaging/src/main/java/JarX.java,2093db5802218f2f9efac552b95220f7860491fc,Chapman Flack,2020-07-12T21:12:11Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T21:12:11Z,chap@anastigmatix.net,22,10,12,Merge branch 'external/cuspy/JarXinPLJava' into chore/master/denashorn
,pljava-packaging/src/main/java/Node.java,39e63d5d5ebba653351da3dcb6d75f49398d42c3,Chapman Flack,2020-07-12T01:26:30Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T21:10:32Z,chap@anastigmatix.net,13,13,0,"Print 1-column void results less verbosely

Often enough, one is calling a simple function that returns void;
that doesn't need a screenful of XML describing the result set
in grueling detail."
,pljava-packaging/src/main/java/Node.java,9c0d1561f57b1fae9ddcd9a373ce17d78e24b7fb,Chapman Flack,2020-07-12T21:07:13Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T21:07:13Z,chap@anastigmatix.net,52,41,11,"Don't let failed Statements dangle

It's a bit subtle to manage the Statements created within
convenience methods: they can't be closed immediately, as if
in a try-with-resources, because when the method returns a
stream of results, the Statement has to remain open as long
as the stream does. But if an exception is thrown on execution
of the statement, before the result stream is created, the
statement does have to be closed.

For consistency, now any SQLException thrown during that
initial execution of the statement is returned in the result
stream, as would any later exception thrown while retrieving
the results. Any Throwable outside the SQLException hierarchy,
on the other hand, is simply rethrown."
,pljava-packaging/src/main/java/Node.java,06b0678ceb0452d65b8107ab8539bfa4f5c59125,Chapman Flack,2020-07-11T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T20:57:41Z,chap@anastigmatix.net,71,71,0,"Add some combined, convenience methods

Add methods to install the examples jar and place it on the
class path, to install Saxon from an expected location, to
install Saxon and place it on the class path, or a four-fer
that does all of the above in the right order.

These all return concatenated result streams from their
constituent operations. That probably would not work nearly
as well if some of those operations had streams of data to return.
But as they all return void, pgjdbc-ng does not seem to have any
problem with the consecutive Statements remaining open while their
streams are consumed, and it's quite convenient."
,pljava-packaging/src/main/java/Node.java,502c0b95c8344df7d45f993aa77855e939e64fb2,Chapman Flack,2020-07-11T22:55:04Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T20:57:23Z,chap@anastigmatix.net,487,483,4,"Add ability to connect to the node

For convenience, a new Maven profile pgjdbc-ng can be specified when
building, and will declare the latest version of the pgjdbc-ng driver
as a dependency. It is not really needed for the build, but declaring
it a dependency will conveniently get it downloaded into the local
Maven repository, where it can be added to jshell's class path and
used to do some testing.

Serving suggestion:

jshell \
--class-path=pljava-packaging/target/pljava-pg....jar \
--execution=local \
-J--add-modules=java.sql,java.sql.rowset \
-J--class-path=pljava-packaging/target/pljava-pg....jar:\
$HOME/.m2/repository/com/impossibl/pgjdbc-ng/pgjdbc-ng-all/.../pgjdbc-ng-all-....jar \
-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true \
-J-Dpgconfig=path/to/pgversion/bin/pg_config

The -J--add-modules is needed because even though jshell treats java.sql
and java.sql.rowset as available by default, the local JVM it is running on
wouldn't know that without being told.

The class path given to the JVM also needs to mention the pgjdbc-ng-all
jar if it will be used to make connections to a node. Don't waste time
with the original pgjdbc, it completely throws away notices/warnings
so isn't very usable for testing purposes. (As for pgjdbc-ng, it will
collect whatever warnings, notices, infos it receives and chain them all
together as SQLWarnings. To tell them apart, use getSQLState(); it should
be 00000 for non-warnings. Which of those it does or doesn't receive,
of course, is controlled by client_min_messages.)

The path given to jshell itself does not need that jar, because
pgjdbc-ng can be just a provider of the java.sql.Driver service
and doesn't have to be visible.

The noUnsafe setting silences a complaint from the netty library
about Java (correctly!) denying it access to private internals.

A number of convenience methods are added to use an existing JDBC
connection and: change PostgreSQL config settings, CREATE EXTENSION
pljava, install and remove jars, set the jar path, and so on.

Aiming to unify, as nearly as practical, the interface to
resultset-returning, count-returning, and nothing-returning
SQL snippets, without forgetting to check for warnings/notices,
pretty much all of the convenience methods return a Stream<Object>.
The objects coming back on the stream can be ResultSet instances,
Long instances (for commands that return update counts), SQLException
or SQLWarning instances. (An SQLException or SQLWarning can be the
head of a list of such, and has its own iterator/forEach methods that
should be used to traverse the whole list.)

A roughly thrown-together print() method is provided to take such a
Stream<Object> and print whatever exceptions/warnings/update counts/
ResultSet instances are retrieved. A ResultSet is dumped in the XML
format produced by WebRowSet. It is unpleasingly verbose, and does
not support all data types well, but at least is a way to dump a
ResultSet in fairly complete form using few lines of code."
,pljava-packaging/src/main/java/JarX.java,f07b7ad2efb3006b95ae4f664a166f9691212fad,Chapman Flack,2020-07-12T16:18:55Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T16:18:55Z,chap@anastigmatix.net,22,10,12,Merge branch 'external/cuspy/JarXscripted' into external/cuspy/JarXinPLJava
,pljava-packaging/src/main/java/Node.java,8fc6daf7e6d187ade72eeaee7c9a1cb6738f4aaa,Chapman Flack,2020-07-11T19:57:41Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T16:12:29Z,chap@anastigmatix.net,83,81,2,"Clean up on exit

When a Node is created, add a shutdown hook to stop() and
clean_node() if those chores have not already been done.

Also add initialized_cluster() and started_server() methods
that return AutoCloseables, so try-with-resources can be used
to bound the life of the datadir or the server."
,pljava-packaging/src/main/java/Node.java,d32e3eea6dfe62b55cb05b819a4bde7bad303a6e,Chapman Flack,2020-07-11T19:36:32Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T16:12:29Z,chap@anastigmatix.net,543,540,3,"Start on PostgresNode-like behavior

Add some methods patterned on PostgreSQL's PostgresNode.pm ...
just enough to allow using jshell with this jar to initialize /
start / stop / etc. a PG instance for testing.

Gotta run it like this:

jshell \
--class-path=pljava-packaging/target/pljava-pg....jar \
--execution=local \
-J--class-path=pljava-packaging/target/pljava-pg....jar:\
-J-Dpgconfig=path/to/pgversion/bin/pg_config

The first --class-path is for the jshell REPL, so it will let you
talk about the classes in the jar. Then --execution=local tells jshell
to run your snippets in the same JVM it is running in itself. (In its
default ""jdi"" execution style, a separate JVM is started to run your
snippets, and standard output/error *from that JVM* are brought back
to jshell's own output where you can see them, but output/error *from
subprocesses it spawns* are lost.)

The remaining -J options are needed because of the local execution.
The earlier --class-path option only controlled what jshell
believes is the class path, but -J--class-path is also needed so the
underlying JVM has that path too.

Finally, the -J-Dpgconfig= is where you point to the pg_config binary
for the PostgreSQL version you want to use.

A -J-Djava.io.tmpdir= can be used if the default temporary directory
isn't what's wanted."
,org/gjt/cuspy/JarX.java,a32306c2c22f847c4bdf33b1f1691dc235d9861b,Chapman Flack,2020-07-12T15:53:45Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T15:53:45Z,chap@anastigmatix.net,22,10,12,Merge branch 'JarXmodernize' into JarXscripted
,org/gjt/cuspy/JarX.java,d152704b26540ed96a7345a137838fe38feaf491,Chapman Flack,2020-07-12T15:37:13Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T15:37:13Z,chap@anastigmatix.net,18,9,9,"Pacify recent javadoc regarding header levels

Recently, Javadoc has become insistent that HTML <h[n]>
levels be used in strictly consecutive levels [n], starting
with h2 because the automatically generated page header is h1."
,pljava-packaging/src/main/java/Node.java,75916cfb2835a6e5348602c2d602dc4c4fdc4618,Chapman Flack,2020-07-11T03:30:36Z,chap@anastigmatix.net,Chapman Flack,2020-07-12T01:27:33Z,chap@anastigmatix.net,12,6,6,"Give Extractor new name Node

The intent is to give it (some small fraction of) the functionality
of PostgreSQL's PostgresNode.pm, when run from within jshell. That
will provide a somewhat platform-independent way of building tests."
,pljava-packaging/src/main/java/Extractor.java,85461c15e77c98a27abdb109b6baf7b4abdf240e,Chapman Flack,2020-07-11T18:37:50Z,chap@anastigmatix.net,Chapman Flack,2020-07-11T18:37:50Z,chap@anastigmatix.net,1,1,0,"Annnd close the child's stdin pipe

This ""do as I say, not as I do"" business is surprisingly hard
to shake."
,pljava-packaging/src/main/java/Extractor.java,560a678e5f7da2389da133c784ec81ecf1da4056,Chapman Flack,2020-07-11T00:38:05Z,chap@anastigmatix.net,Chapman Flack,2020-07-11T00:38:51Z,chap@anastigmatix.net,34,23,11,"Modernize the resolve method a bit

It was originally copied rather literally from the embedded
JavaScript of 1.5.x, which of course was limited to Java 6 API.
Bring it along to Java 9, and observe the same fine points
I've just been emphasizing to Kartik for the Maven plugin."
,pljava-so/src/main/c/PgSavepoint.c,acd78292eec4634ed9af508ee4cd760bb020a166,Chapman Flack,2020-06-22T22:13:49Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T22:13:49Z,chap@anastigmatix.net,2,1,1,"Fix function/prototype mismatch

There were two issues here. That the prototype and function had
the parameters in a different order was not a compile error
(because the types were the same), but certainly misleading
and a risk for future maintenance.

That the types were int in the prototype and jint in the function
is a compile error, but has never been flagged by any compiler
until building with Mingw-w64 (where presumably there is more of
a distinction between jint and int).

Addresses #282.

Backpatched from 515e0d5."
,pljava-so/src/main/c/PgSavepoint.c,b510602978a133cc0f96dfa09323a388bd19974d,Chapman Flack,2020-06-22T22:06:55Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T22:06:55Z,chap@anastigmatix.net,2,1,1,Merge pull request #284 from bug/master/issue282
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,381f7cda537a24ade975d2bd9380810a24bc983b,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,1139,943,196,Merge pull request #283 from feature/REL1_5_STABLE/moreadjxml
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,381f7cda537a24ade975d2bd9380810a24bc983b,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,1139,943,196,Merge pull request #283 from feature/REL1_5_STABLE/moreadjxml
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,381f7cda537a24ade975d2bd9380810a24bc983b,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,1139,943,196,Merge pull request #283 from feature/REL1_5_STABLE/moreadjxml
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,381f7cda537a24ade975d2bd9380810a24bc983b,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,Chapman Flack,2020-06-22T21:43:22Z,chap@anastigmatix.net,1139,943,196,Merge pull request #283 from feature/REL1_5_STABLE/moreadjxml
,pljava-packaging/src/main/java/Extractor.java,72cf37d13466d207662e0f13922929c8c2891483,Chapman Flack,2020-06-21T17:21:43Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T19:40:13Z,chap@anastigmatix.net,127,70,57,"Extractor takes over path-resolving duties

A more-or-less literal porting to Java of the JavaScript,
which was mostly using Java API anyway."
,pljava-packaging/src/main/java/Extractor.java,3085de0f3362a640a6ca106320c41a374d5dd67a,Chapman Flack,2020-06-21T15:36:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T19:40:01Z,chap@anastigmatix.net,35,34,1,"Add Extractor JarX subclass to resolve paths

Just adds the class; the superclass (and script) are still
doing the work."
,pljava-packaging/src/main/java/JarX.java,f9ff23b827a1f7951044602eb5adeffb034ffef0,Chapman Flack,2020-06-21T19:39:16Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T19:39:16Z,chap@anastigmatix.net,109,84,25,Merge branch 'external/cuspy/JarXinPLJava' into chore/master/denashorn
,pljava-packaging/src/main/java/JarX.java,7cb6ebde2fe252db1a16a0336b5ae61ef1286d74,Chapman Flack,2020-06-21T19:34:55Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T19:34:55Z,chap@anastigmatix.net,109,84,25,Merge branch 'external/cuspy/JarXscripted' into external/cuspy/JarXinPLJava
,org/gjt/cuspy/JarX.java,b0330f7ae30e18848d23cdb3e4d4db51f018df2c,Chapman Flack,2020-06-21T18:48:38Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T18:48:38Z,chap@anastigmatix.net,109,84,25,"Refactor for easier alternatives to ScriptEngines

With the removal of Nashorn in Java 15, leaving no scripting language
that can be assumed present in the Java runtime, a script in the
manifest may no longer be the simplest way to customize the resolution
of path names when extracting. This class has been refactored now to
expose two methods, prepareResolver and resolve, easily overridden in a
subclass.  The value of the _JarX_PathResolver main attribute is passed
to prepareResolver as a string (so it can be parsed in any way useful to
the subclass, not necessarily as described in JarX javadoc, or ignored),
and resolve is passed the stored path and platform path, and returns the
platform path unchanged or a replacement. A self-extracting jar with
resolution can be made without depending on any script engine, by
placing /two/ classes in the jar, JarX and the subclass, and naming the
subclass as the jar's Main-Class. It needs a main method that simply
instantiates the class and calls extract()."
,pljava-so/src/main/c/PgSavepoint.c,515e0d57258ec4ca7f9b1e535ae483664f9ed474,Chapman Flack,2020-06-21T12:49:23Z,chap@anastigmatix.net,Chapman Flack,2020-06-21T12:51:00Z,chap@anastigmatix.net,2,1,1,"Fix function/prototype mismatch

There were two issues here. That the prototype and function had
the parameters in a different order was not a compile error
(because the types were the same), but certainly misleading
and a risk for future maintenance.

That the types were int in the prototype and jint in the function
is a compile error, but has never been flagged by any compiler
until building with Mingw-w64 (where presumably there is more of
a distinction between jint and int).

Addresses #282.

Was introduced in 1.5.3 so should be backpatched to 1.5."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,3e94c30c7a329ef6f95a17f7643f06cfed7b8ed4,Chapman Flack,2020-06-20T03:16:16Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,70,59,11,"Handle set(SAXSource) when no XMLReader supplied

Introduction of the Adjusting.XML.Parsing API left one non-obvious
case where a parser could be created internally without being exposed
for adjustments through the new API.

When AdjustingSourceResult.set(SAXSource) is passed a SAXSource that
wraps an InputSource but no XMLReader of its own, the expectation is
that an XMLReader will be created and used to parse the InputSource.
This case is effectively a stream source but passed via SAX API.

So create the XMLReader, but make sure it is exposed as adjustable.
No special effort is made to 'correct' the XML Decl, wrap for
possible CONTENT form, etc.; if some foreign driver is handing us
a no-XMLReader SAXSource and expecting us to parse it, it had better
be acceptable to a vanilla JAXP parser."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,a2f6e615fc3488429f80beb39f6ed46e79fef164,Chapman Flack,2020-06-14T00:08:24Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,3,3,0,"Fixed adjustments suffice in useWrappingElement

Its pre-scan is over as soon as a DTD is seen, with no need
to further interpret it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,8590b6ffe83098a49e5947f4c032376d290ed412,Chapman Flack,2020-06-13T22:44:13Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,111,109,2,Add to XML examples
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,db52f32cea377d1f7264ee11adfea92c3840ece4,Chapman Flack,2020-06-13T21:14:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,269,238,31,Support setting a schema for SAX or DOM
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,db52f32cea377d1f7264ee11adfea92c3840ece4,Chapman Flack,2020-06-13T21:14:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,269,238,31,Support setting a schema for SAX or DOM
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,db52f32cea377d1f7264ee11adfea92c3840ece4,Chapman Flack,2020-06-13T21:14:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-20T21:55:25Z,chap@anastigmatix.net,269,238,31,Support setting a schema for SAX or DOM
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,07455fa499e8446dcbb6c8a7d5c687c56ed18265,Chapman Flack,2020-06-13T15:16:01Z,chap@anastigmatix.net,Chapman Flack,2020-06-13T21:15:28Z,chap@anastigmatix.net,103,53,50,"Errata in changes picked from 4e9476f

There was a duplicated import that snuck in with that change,
and a couple places using SuppressWarnings(""unchecked"") to
hide too much, when the real issue was overly-specific declaration
of another variable."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,968a6dba3207458bcb68d597d25e1147e8ca05e6,Chapman Flack,2020-06-13T14:23:49Z,chap@anastigmatix.net,Chapman Flack,2020-06-13T21:15:28Z,chap@anastigmatix.net,6,5,1,De-java7ify the changes from master
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,141eab564916c27bef62a640ee319f28c3e9fb8d,Chapman Flack,2020-06-13T14:22:42Z,chap@anastigmatix.net,Chapman Flack,2020-06-13T21:15:28Z,chap@anastigmatix.net,77,55,22,"Cherrypick just SQLXMLImpl changes from 4e9476f

To support setting Schema will require migrating from XMLReaderFactory
to SAXParserFactory, which has happened in master already in the course
of snuffing out javac warnings."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,f7eaf725f1106d7f3848cfb30a459fc6ea38d9da,Chapman Flack,2020-06-13T19:12:48Z,chap@anastigmatix.net,Chapman Flack,2020-06-13T21:15:27Z,chap@anastigmatix.net,74,74,0,Support setting EntityResolver for SAX or DOM
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,f7eaf725f1106d7f3848cfb30a459fc6ea38d9da,Chapman Flack,2020-06-13T19:12:48Z,chap@anastigmatix.net,Chapman Flack,2020-06-13T21:15:27Z,chap@anastigmatix.net,74,74,0,Support setting EntityResolver for SAX or DOM
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,97b525a7b87c22739d0b79b1ea5ea4facf61448d,Chapman Flack,2020-06-12T02:47:57Z,chap@anastigmatix.net,Chapman Flack,2020-06-12T02:48:20Z,chap@anastigmatix.net,201,59,142,"Simplify

The defaults() methods are the same everywhere and can be hoisted
into AdjustingJAXPParser.

Several adjustments have to be done differently in StAX but at least
are common to SAX and DOM, so can be hoisted into a subclass that
SAX and DOM extend.

Once Java 8 is baseline, many of these can simply be default methods
in the API interfaces."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,bc500407fdd7a5b54796fe6c124d56d13fcbdea9,Chapman Flack,2020-06-12T00:33:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-12T02:48:20Z,chap@anastigmatix.net,292,285,7,"Add the JAXP security-related properties

The properties, described in [1], are distinct from
the already supported 'features', which are simply on/off;
properties take values of specified types.

Only the ones applicable to XML parsers are added here; the
SQLXML API doesn't wrap or conceal instantiation of schemas
or transformers, so existing Java API is available for
configuring those.

[1] https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,bc500407fdd7a5b54796fe6c124d56d13fcbdea9,Chapman Flack,2020-06-12T00:33:27Z,chap@anastigmatix.net,Chapman Flack,2020-06-12T02:48:20Z,chap@anastigmatix.net,292,285,7,"Add the JAXP security-related properties

The properties, described in [1], are distinct from
the already supported 'features', which are simply on/off;
properties take values of specified types.

Only the ones applicable to XML parsers are added here; the
SQLXML API doesn't wrap or conceal instantiation of schemas
or transformers, so existing Java API is available for
configuring those.

[1] https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,46c3df9d9a842263643fa29d1b51a4c815a121d9,Chapman Flack,2020-06-09T02:31:47Z,chap@anastigmatix.net,Chapman Flack,2020-06-09T02:31:47Z,chap@anastigmatix.net,46,34,12,Merge pull request #281 from bug/REL1_5_STABLE/issue280
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,57edd56068b68db58fce0134107f52e4c9db496f,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,274,148,126,Merge pull request #279 from refactor/master/use-in
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,57edd56068b68db58fce0134107f52e4c9db496f,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,274,148,126,Merge pull request #279 from refactor/master/use-in
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,57edd56068b68db58fce0134107f52e4c9db496f,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:19:41Z,chap@anastigmatix.net,274,148,126,Merge pull request #279 from refactor/master/use-in
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,d8549279b06155efbafaf8aca63cada051e07e87,Chapman Flack,2020-06-06T16:15:41Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:18:48Z,chap@anastigmatix.net,46,34,12,"Fix XMLTABLE for XML-typed columns and parameters

XML-typed output columns didn't work because of a simple
omitted test for the type.

XML-typed input parameters didn't work because of the (extension
to the spec) choice to make them available to column expressions
as well as to the row expression, while the JDBC SQLXML type is
only allowed to be read one time. It doesn't make sense to do the
work of tree building more than once anyway, so simply cache the
built tree rather than the SQLXML object.

Addresses #280."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/Backend.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/Invocation.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Boolean.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Double.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Float.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Integer.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Long.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava-so/src/main/c/type/Short.c,0faf5869058c2c7fef1d32254acbffb19d4e84bc,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,Chapman Flack,2020-06-06T16:17:17Z,chap@anastigmatix.net,256,181,75,Merge pull request #279 from backpatch/REL1_5_STABLE/checkjni
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,08b8378d30ed662805939ef9013d0558fff7b380,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,274,148,126,"Give Checked a nicer idiom, java8ify more

XMLEventToStreamConsumer even had a comment saying ""Do the below
with lambdas once Java back horizon >= 8"" and (probably because of
the words between Java and 8) grep missed it in the earlier rounds
of java8ification.

It would be trivial but for the fact that n -> add(n) could throw
XMLStreamException, while an Iterator's forEachRemaining doesn't
accept a lambda that can throw anything. Happily, that's the kind
of infelicity that Checked was meant to smooth over.

It turns out the initial commit of Checked had narrowly missed
a much more pleasing way to set up the idiom. Now it's just

  use(lambda that could throw stuff).in(code wanting lambda that can't)

as in this case

  use((Namespace n) -> add(n))
  .in(event.getNamespaces()::forEachRemaining)

Conforming changes in Loader, the only other current user of Checked.

First changed 'of' to 'use' because the language was tricky, a
Checked.Supplier.of(() -> foo) could sound like ""a Supplier of
() -> foo"", which would be a supplier of suppliers of foo, when
it's really a direct supplier of foo.

The name 'use' wards off that confusion, *and* tees up the nice
use(...).in(...) idiom."
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,08b8378d30ed662805939ef9013d0558fff7b380,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,274,148,126,"Give Checked a nicer idiom, java8ify more

XMLEventToStreamConsumer even had a comment saying ""Do the below
with lambdas once Java back horizon >= 8"" and (probably because of
the words between Java and 8) grep missed it in the earlier rounds
of java8ification.

It would be trivial but for the fact that n -> add(n) could throw
XMLStreamException, while an Iterator's forEachRemaining doesn't
accept a lambda that can throw anything. Happily, that's the kind
of infelicity that Checked was meant to smooth over.

It turns out the initial commit of Checked had narrowly missed
a much more pleasing way to set up the idiom. Now it's just

  use(lambda that could throw stuff).in(code wanting lambda that can't)

as in this case

  use((Namespace n) -> add(n))
  .in(event.getNamespaces()::forEachRemaining)

Conforming changes in Loader, the only other current user of Checked.

First changed 'of' to 'use' because the language was tricky, a
Checked.Supplier.of(() -> foo) could sound like ""a Supplier of
() -> foo"", which would be a supplier of suppliers of foo, when
it's really a direct supplier of foo.

The name 'use' wards off that confusion, *and* tees up the nice
use(...).in(...) idiom."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,08b8378d30ed662805939ef9013d0558fff7b380,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,Chapman Flack,2020-06-04T00:04:53Z,chap@anastigmatix.net,274,148,126,"Give Checked a nicer idiom, java8ify more

XMLEventToStreamConsumer even had a comment saying ""Do the below
with lambdas once Java back horizon >= 8"" and (probably because of
the words between Java and 8) grep missed it in the earlier rounds
of java8ification.

It would be trivial but for the fact that n -> add(n) could throw
XMLStreamException, while an Iterator's forEachRemaining doesn't
accept a lambda that can throw anything. Happily, that's the kind
of infelicity that Checked was meant to smooth over.

It turns out the initial commit of Checked had narrowly missed
a much more pleasing way to set up the idiom. Now it's just

  use(lambda that could throw stuff).in(code wanting lambda that can't)

as in this case

  use((Namespace n) -> add(n))
  .in(event.getNamespaces()::forEachRemaining)

Conforming changes in Loader, the only other current user of Checked.

First changed 'of' to 'use' because the language was tricky, a
Checked.Supplier.of(() -> foo) could sound like ""a Supplier of
() -> foo"", which would be a supplier of suppliers of foo, when
it's really a direct supplier of foo.

The name 'use' wards off that confusion, *and* tees up the nice
use(...).in(...) idiom."
,pljava-so/src/main/c/Backend.c,b8e458d42ff0634de427a5e27e5fafb0f7daeab7,Chapman Flack,2020-06-02T05:02:34Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,24,19,5,"Make JNI local ref capacity warning more helpful

Backpatch of 6f63568.

It helps to know some things about tracking down these warnings.
The stacktrace given by the JVM is not terribly helpful, as it
goes only as deep as the native method called from Java, and not
the deeper calls it has made, so it is not uncommon to look at the
method suggested by the stacktrace and find nothing that could
give rise to the warning.

So display the capacity warning (if displayed at all, that is, not
the one from JMX) as an INFO ereport with just the first line of
its JVM-provided stacktrace as errdetail, and with an errhint
explaining where to set a gdb breakpoint and use that stacktrace
to find the the real offender."
,pljava-so/src/main/c/Backend.c,ddb3b9531d700b46fe3fcdb9291f71c891694561,Chapman Flack,2020-06-02T05:01:07Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,62,62,0,"Eat the local-ref capacity warnings from JMX

Backpatch of 4e001ae.

A lot of -Xcheck:jni output consists of local reference capacity
exceeded warnings coming from way down in the Java Management
Extensions where nothing in PL/Java's power to do would fix them.

The sheer volume of those makes it difficult to discern any real
PL/Java issues being reported among the JNI checks.

Because the -Xcheck:jni output goes through the vfprintf hook,
a simple state machine can be added there to recognize the
particular sequences of messages originating in the culprit JMX
class, and swallow them. Other messages will be allowed through.

This is quite hacky and sure to break in non-en_US locales (if
the -Xcheck:jni messages are localized; then it would simply fail
to recognize and eat them, and the noise would be back), but
should save a lot of fuss going through CI log output, as long
as the CI runs are done in en_US.

I was expecting to see a handful of actual PL/Java issues reported
once the flood of these was out of the way, but it seems the
earlier commits have taken care of those for now. I actually get
a quiet run (which unnerved me enough to step through the state
machine in gdb and make sure it wasn't eating anything it shouldn't,
and it wasn't).

There is no 'flush' operation ever applied to this state machine;
there could, in the absence of any following message or stack trace,
be one unreported ""WARNING: JNI local refs: %u, exceeds capacity: %u""
line that doesn't get seen. That seems acceptable; it's just a
warning, and is usually followed by a stack trace, so the chance of
it not being flushed is slim. Sending any message at all through the
vfprintf hook that doesn't match that pattern will cause any saved
one to be flushed."
,pljava-so/src/main/c/type/Boolean.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Double.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Float.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Integer.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Long.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Short.c,4105a78892f0ae72db659a561579a0c4d83725e0,Chapman Flack,2020-06-02T04:57:50Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,162,94,68,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,62ef14bb5fc86095f25ed97d3c96210135867dfe,Chapman Flack,2020-06-02T04:52:10Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:06:18Z,chap@anastigmatix.net,6,3,3,"Dodge an excessively-strict -Xcheck:jni check

Backpatch of 6a83db4.

The various numeric sub'classes' of Type.c retain methodIDs
to the primitive-returning methods of Java's corresponding
boxed types. For instance, Double.c keeps a method reference
to doubleValue().

Those methods are really inherited or overridden methods
of Number, and PL/Java has been relying on that, as can be seen
in SPIConnection.basicNumericCoercion() being a no-op as long as
the value is assignable to Number, even if it isn't strictly
of the expected class. The assumption is that in Double.c, for
example, it will work to call doubleValue() even on an object
that isn't a Double, as long as it's a Number.

That works fine with -Xcheck:jni off, but when on, it's reported
as a FATAL ERROR if the methodID (obtained from Double.class)
is applied to anything that isn't assignable to Double.

The systematic way to fix that would be to rototill all the C
numeric Type 'classes' and have them get their fooValue()
methodIDs from Number.class rather than Foo.class.

But because this only seems to be a case of -Xcheck:jni being
more strict than JVM rules require, for now I will take a lazy
way out, and tweak the one case among all existing tests that
happens to trigger the error (the SELECT 1.5 with no explicit
cast has type NUMERIC by default, which is fetched as a Java
BigDecimal where the result tupledesc would call for a FLOAT,
i.e. a Java double)."
,pljava-so/src/main/c/Backend.c,3f159a3e590d80a8dca106ff02836e1d0008e547,Chapman Flack,2020-06-02T05:04:59Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:04:59Z,chap@anastigmatix.net,12,8,4,"Fix a stored non-global-JNI-reference bug

Backpatch of 7aa9554.

Also arrange for Invocation's ""boot context"" to also push
and pop a JNI local reference frame, to unburden initPLJavaClasses
of tracking and deleting local references retail (as it is
not called *from* Java, that isn't guaranteed to be handled
automatically). Should also silence a couple local ref
""exceeds capacity"" warnings, albeit not the thundering hordes
of them from the depths of JMX.

I was even expecting that it might flush out some more
bugs in reference management inside the boot context, but there
are no more complaints. It may have been just this one."
,pljava-so/src/main/c/Invocation.c,3f159a3e590d80a8dca106ff02836e1d0008e547,Chapman Flack,2020-06-02T05:04:59Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T05:04:59Z,chap@anastigmatix.net,12,8,4,"Fix a stored non-global-JNI-reference bug

Backpatch of 7aa9554.

Also arrange for Invocation's ""boot context"" to also push
and pop a JNI local reference frame, to unburden initPLJavaClasses
of tracking and deleting local references retail (as it is
not called *from* Java, that isn't guaranteed to be handled
automatically). Should also silence a couple local ref
""exceeds capacity"" warnings, albeit not the thundering hordes
of them from the depths of JMX.

I was even expecting that it might flush out some more
bugs in reference management inside the boot context, but there
are no more complaints. It may have been just this one."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/Backend.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Boolean.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Double.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Float.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Integer.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Long.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/type/Short.c,7f83109ab8759973a138f2572e1a27dac9e3ac22,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T04:38:51Z,chap@anastigmatix.net,152,118,34,Merge pull request #276 from chore/master/checkjni
,pljava-so/src/main/c/Backend.c,46b17ac6832c635b03681a0edf72aa5e8c1daddb,Chapman Flack,2020-06-02T00:39:07Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T00:39:07Z,chap@anastigmatix.net,6,4,2,Merge pull request #275 from bug/master/issue274
,pljava-so/src/main/c/Invocation.c,46b17ac6832c635b03681a0edf72aa5e8c1daddb,Chapman Flack,2020-06-02T00:39:07Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T00:39:07Z,chap@anastigmatix.net,6,4,2,Merge pull request #275 from bug/master/issue274
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,e56e05be91093e54637c4c61f0e87b814190b648,Chapman Flack,2020-06-02T00:33:04Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T00:33:04Z,chap@anastigmatix.net,1016,962,54,Merge pull request #273 from bug/REL1_5_STABLE/issue272
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,e56e05be91093e54637c4c61f0e87b814190b648,Chapman Flack,2020-06-02T00:33:04Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T00:33:04Z,chap@anastigmatix.net,1016,962,54,Merge pull request #273 from bug/REL1_5_STABLE/issue272
,pljava-so/src/main/c/Backend.c,6f6356841c77db35b12d3561408d2d69f9aa9c2c,Chapman Flack,2020-06-02T00:12:10Z,chap@anastigmatix.net,Chapman Flack,2020-06-02T00:12:10Z,chap@anastigmatix.net,24,19,5,"Make JNI local ref capacity warning more helpful

It helps to know some things about tracking down these warnings.
The stacktrace given by the JVM is not terribly helpful, as it
goes only as deep as the native method called from Java, and not
the deeper calls it has made, so it is not uncommon to look at the
method suggested by the stacktrace and find nothing that could
give rise to the warning.

So display the capacity warning (if displayed at all, that is, not
the one from JMX) as an INFO ereport with just the first line of
its JVM-provided stacktrace as errdetail, and with an errhint
explaining where to set a gdb breakpoint and use that stacktrace
to find the the real offender."
,pljava-so/src/main/c/Backend.c,4e001aece513261f3fd1605bc648ba0b263c874b,Chapman Flack,2020-06-01T02:58:56Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,62,62,0,"Eat the local-ref capacity warnings from JMX

A lot of -Xcheck:jni output consists of local reference capacity
exceeded warnings coming from way down in the Java Management
Extensions where nothing in PL/Java's power to do would fix them.

The sheer volume of those makes it difficult to discern any real
PL/Java issues being reported among the JNI checks.

Because the -Xcheck:jni output goes through the vfprintf hook,
a simple state machine can be added there to recognize the
particular sequences of messages originating in the culprit JMX
class, and swallow them. Other messages will be allowed through.

This is quite hacky and sure to break in non-en_US locales (if
the -Xcheck:jni messages are localized; then it would simply fail
to recognize and eat them, and the noise would be back), but
should save a lot of fuss going through CI log output, as long
as the CI runs are done in en_US.

I was expecting to see a handful of actual PL/Java issues reported
once the flood of these was out of the way, but it seems the
earlier commits have taken care of those for now. I actually get
a quiet run (which unnerved me enough to step through the state
machine in gdb and make sure it wasn't eating anything it shouldn't,
and it wasn't).

There is no 'flush' operation ever applied to this state machine;
there could, in the absence of any following message or stack trace,
be one unreported ""WARNING: JNI local refs: %u, exceeds capacity: %u""
line that doesn't get seen. That seems acceptable; it's just a
warning, and is usually followed by a stack trace, so the chance of
it not being flushed is slim. Sending any message at all through the
vfprintf hook that doesn't match that pattern will cause any saved
one to be flushed."
,pljava-so/src/main/c/type/Boolean.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Double.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Float.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Integer.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Long.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-so/src/main/c/type/Short.c,1d2a664ce95ccc518fbdfd6695897811999c81bd,Chapman Flack,2020-06-01T00:56:40Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,72,40,32,"Control local refs in primitive array coercers

These were responsible for the bulk of the 'capacity exceeded'
messages seen while running the examples.

Possible future optimization: use local frames rather than
deleting each ref at retail."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,6a83db454198d6674a36e7b7502fb53c74ec234f,Chapman Flack,2020-05-31T20:26:46Z,chap@anastigmatix.net,Chapman Flack,2020-06-01T03:00:42Z,chap@anastigmatix.net,4,2,2,"Dodge an excessively-strict -Xcheck:jni check

The various numeric sub'classes' of Type.c retain methodIDs
to the primitive-returning methods of Java's corresponding
boxed types. For instance, Double.c keeps a method reference
to doubleValue().

Those methods are really inherited or overridden methods
of Number, and PL/Java has been relying on that, as can be seen
in SPIConnection.basicNumericCoercion() being a no-op as long as
the value is assignable to Number, even if it isn't strictly
of the expected class. The assumption is that in Double.c, for
example, it will work to call doubleValue() even on an object
that isn't a Double, as long as it's a Number.

That works fine with -Xcheck:jni off, but when on, it's reported
as a FATAL ERROR if the methodID (obtained from Double.class)
is applied to anything that isn't assignable to Double.

The systematic way to fix that would be to rototill all the C
numeric Type 'classes' and have them get their fooValue()
methodIDs from Number.class rather than Foo.class.

But because this only seems to be a case of -Xcheck:jni being
more strict than JVM rules require, for now I will take a lazy
way out, and tweak the one case among all existing tests that
happens to trigger the error (the SELECT 1.5 with no explicit
cast has type NUMERIC by default, which is fetched as a Java
BigDecimal where the result tupledesc would call for a FLOAT,
i.e. a Java double)."
,pljava-so/src/main/c/Backend.c,7aa9554d2e3a04f00b5bc38de7b3f186989f7d97,Chapman Flack,2020-05-31T18:02:51Z,chap@anastigmatix.net,Chapman Flack,2020-05-31T18:02:51Z,chap@anastigmatix.net,6,4,2,"Fix a stored non-global-JNI-reference bug

Also arrange for Invocation's ""boot context"" to also push
and pop a JNI local reference frame, to unburden initPLJavaClasses
of tracking and deleting local references retail (as it is
not called *from* Java, that isn't guaranteed to be handled
automatically). Should also silence a couple local ref
""exceeds capacity"" warnings, albeit not the thundering hordes
of them from the depths of JMX.

I was even expecting that it might flush out some more
bugs in reference management inside the boot context, but there
are no more complaints. It may have been just this one."
,pljava-so/src/main/c/Invocation.c,7aa9554d2e3a04f00b5bc38de7b3f186989f7d97,Chapman Flack,2020-05-31T18:02:51Z,chap@anastigmatix.net,Chapman Flack,2020-05-31T18:02:51Z,chap@anastigmatix.net,6,4,2,"Fix a stored non-global-JNI-reference bug

Also arrange for Invocation's ""boot context"" to also push
and pop a JNI local reference frame, to unburden initPLJavaClasses
of tracking and deleting local references retail (as it is
not called *from* Java, that isn't guaranteed to be handled
automatically). Should also silence a couple local ref
""exceeds capacity"" warnings, albeit not the thundering hordes
of them from the depths of JMX.

I was even expecting that it might flush out some more
bugs in reference management inside the boot context, but there
are no more complaints. It may have been just this one."
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,8a98f5c6a03c733dcd3fa0bc52557f5f71a8c6af,Chapman Flack,2020-05-30T03:46:55Z,chap@anastigmatix.net,Chapman Flack,2020-05-30T03:46:55Z,chap@anastigmatix.net,10,6,4,"Persuade XMLCopier.StAX not to reorder elements

That right there needed better test coverage. Any test
coverage, really. In hardly-uncommon conditions an END_ELEMENT
was not forwarded to the XMLStreamWriter. Rather than throwing
an exception, the stream writer silently supplies any missing
END_ELEMENTs at the end of the document, in strict reverse order
of the unclosed START_ELEMENTs. Convenient unless the original
had them in, say, some other order."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,908f1b0fe84e979a5495191f71548de899c5a869,Chapman Flack,2020-05-29T05:06:18Z,chap@anastigmatix.net,Chapman Flack,2020-05-30T03:18:31Z,chap@anastigmatix.net,52,50,2,"Error reporting from XMLCopier.StAX

The JRE implementation of XMLEventReader, when wrapping an
XMLStreamReader, flat-out swallows exceptions thrown by the
stream reader's hasNext(). So sneak in a StreamReaderDelegate
just below the event reader, to save any exception from hasNext
and rethrow it from next()."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,ad3fd5fcea0e190012d8976ebd333390060625d9,Chapman Flack,2020-05-29T02:17:05Z,chap@anastigmatix.net,Chapman Flack,2020-05-30T03:18:30Z,chap@anastigmatix.net,411,409,2,"Apply the same whitespace fix in StAXUnwrapFilter

After working the same behavior into the SAX filter, just a simple
matter of turning brain inside out and hey presto! it's done for StAX.

There is one knuckle-biting moment in the StAX spec, here:

  int next()
  ...
  If the property javax.xml.stream.isCoalescing is set to true element
  content must be coalesced and only one CHARACTERS event must be
  returned for contiguous element content or CDATA Sections.

That would be more painful to implement. But a helpful language lawyer
points out that the requirement above applies explicitly to ""element
content"", and the only CHARACTERS events being given different treatment
here are the ones properly classified as ""markup""."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,53943263db8f85a606df297aa7a069de102b3146,Chapman Flack,2020-05-30T00:16:45Z,chap@anastigmatix.net,Chapman Flack,2020-05-30T00:16:45Z,chap@anastigmatix.net,62,20,42,"Refactor StAXUnwrapFilter a bit before WS changes

Simplify the structure without changing behavior yet."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,793effe776d85f34d2b4b1ab6df8a83290c15ed4,Chapman Flack,2020-05-27T04:53:53Z,chap@anastigmatix.net,Chapman Flack,2020-05-29T03:43:55Z,chap@anastigmatix.net,126,124,2,"Complete the whitespace fix for SAXUnwrapFilter

Snag the relevant events that go to the LexicalHandler.
All those methods have to be implemented, as the SAX
XMLFilterImpl doesn't cover them."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,d235bb47e2b8797ae47d7054e0f4e58c224c655c,Chapman Flack,2020-05-27T03:24:34Z,chap@anastigmatix.net,Chapman Flack,2020-05-29T03:43:55Z,chap@anastigmatix.net,73,73,0,"Whitespace handling in SAXUnwrapFilter

Still needed: handle the parse events that are reported through
the LexicalHandler interface. SAXUnwrapFilter never had to care
about those before.

Comments can appear outside the root element in XML(DOCUMENT) form,
so should simply incur a whitespace discard. The other lexical events,
CDATA and entity references, can't appear there, so should trigger
commitToContent."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,5f984596fcbf692a35aa9ecf18b1693851910cae,Chapman Flack,2020-05-27T03:13:56Z,chap@anastigmatix.net,Chapman Flack,2020-05-29T03:41:56Z,chap@anastigmatix.net,234,229,5,"Correct DOCUMENT v. CONTENT whitespace handling

There are more kinds of whitespace in XML than were dreamt of
in my (former) philosophy.

My uses of isElementContentWhitespace in domUnwrap, and of (SPACE = evt)
in useWrappingElement, were ill-informed. Both are specified to pertain
to a category of whitespace that can never exist where I was testing for
it.  ""Element content whitespace"" is a term of art in the spec, and
refers only to direct text-node children of elements that are explicitly
declared to have ""element content"", which can only happen in a DTD, and
there is no way to reach the code where I was using those tests if a DTD
is found in the input. Therefore nothing being checked for whitespace in
domUnwrap was matching (even when it was whitespace), and domUnwrap was
producing DocumentFragment in some cases when Document was correct.

""Element content whitespace"" is a different category from whitespace
found at the top level, outside of any element. The XML specs declare
top-level whitespace (I could not make this up) to be ""markup"" and
not ""character data"" at all! While a parser that detects element
content whitespace (in an element that can have it, as declared in
the DTD) is supposed to pass it on to the application, suitably
labeled, the whitespace that is ""markup"" seems not to get reported
to the application at all.

In this commit, completely correct the handling of ""markup""
whitespace in domUnwrap, and introduce a WhitespaceAccumulator
class to use for an efficiently-streamable approximation to
correct behavior for SAX and StAX. (Nothing is implemented in
the SAX- or StAX-related code yet; this just adds the needed
WhitespaceAccumulator class.)

The ""efficiently-streamable approximation"" will always have
correct behavior for input that turns out to be DOCUMENT, but
may lose some ""markup"" whitespace in input that turns out to be
CONTENT, preceding the point where it first becomes certain
that the input has CONTENT form.

That may be good enough to cover a lot of uses. Consumers most
likely to be thrown by ""markup"" whitespace may be those strictly
expecting DOCUMENT, and what they see will be strictly correct.

For the approximately-correct CONTENT case, it would be hard to
do better, as long as PostgreSQL does not save information on
the form of the value, and java.xml.SQLXML doesn't expose a way
for the application to weigh in. One could be added with
Adjusting.XML, perhaps. The determination of form can require
pre-parsing all the way to the end of the document just to decide
how to really parse it; that just seems excessive."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,21e361aeb782a7012bd7dd349a70203dbbc814e0,Chapman Flack,2020-05-24T22:13:54Z,chap@anastigmatix.net,Chapman Flack,2020-05-24T22:13:54Z,chap@anastigmatix.net,107,94,13,Merge pull request #269 from backpatch/REL1_5_STABLE/inflateDS
,pljava-so/src/main/c/VarlenaWrapper.c,81b531a0e0a619e701bd3db3b50199f90b7bcca8,Chapman Flack,2020-05-24T22:12:56Z,chap@anastigmatix.net,Chapman Flack,2020-05-24T22:12:56Z,chap@anastigmatix.net,25,18,7,Merge pull request #267 from trackpg/REL1_5_STABLE/pg13
,pljava-so/src/main/c/type/TupleTable.c,81b531a0e0a619e701bd3db3b50199f90b7bcca8,Chapman Flack,2020-05-24T22:12:56Z,chap@anastigmatix.net,Chapman Flack,2020-05-24T22:12:56Z,chap@anastigmatix.net,25,18,7,Merge pull request #267 from trackpg/REL1_5_STABLE/pg13
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,8a33ee4783e5d351d58a0d002ebaf1c7849b92ed,Chapman Flack,2020-05-08T04:04:29Z,chap@anastigmatix.net,Chapman Flack,2020-05-22T00:21:22Z,chap@anastigmatix.net,21,6,15,"Simplify PinCount stack

As it has a peculiar requirement on the caller (only an object just
obtained from allocate() may be passed to push()), just make push()
do the allocation itself and return the object, so it can't be
called in violation of assumptions."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,0fb1455d05e7a2ab0c2f3e753ad6db36f7480b8b,Chapman Flack,2020-05-07T02:53:36Z,chap@anastigmatix.net,Chapman Flack,2020-05-22T00:21:22Z,chap@anastigmatix.net,116,103,13,"Replace ArrayDeque-based PinCount stack

Implement a custom, minimal array-based stack that hangs on to
a few previously allocated elements as a pool, with the aim to
reduce the amount of garbage observed with the old implementation."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,d8e3ee74f7527af13d81a25de9b2df9034cf4e29,Chapman Flack,2020-05-21T01:57:48Z,chap@anastigmatix.net,Chapman Flack,2020-05-21T01:57:48Z,chap@anastigmatix.net,208,182,26,Merge pull request #262 from optimize/master/inflateDS
,pljava-so/src/main/c/VarlenaWrapper.c,33e7b51afcac3bf39fd6b2aa4c72628883e62811,Chapman Flack,2020-05-21T01:35:37Z,chap@anastigmatix.net,Chapman Flack,2020-05-21T01:47:33Z,chap@anastigmatix.net,25,18,7,"The minimal changes to build on PG 13beta1

SPITupleTable sprouts numvals (postgres/postgres@bc8393c)

tuptoaster.h -> detoast.h (postgres/postgres@8b94dab)

heap_tuple_fetch_attr gets non-heap-specific name
detoast_external_attr (postgres/postgres@2e8b6bf)"
,pljava-so/src/main/c/type/TupleTable.c,33e7b51afcac3bf39fd6b2aa4c72628883e62811,Chapman Flack,2020-05-21T01:35:37Z,chap@anastigmatix.net,Chapman Flack,2020-05-21T01:47:33Z,chap@anastigmatix.net,25,18,7,"The minimal changes to build on PG 13beta1

SPITupleTable sprouts numvals (postgres/postgres@bc8393c)

tuptoaster.h -> detoast.h (postgres/postgres@8b94dab)

heap_tuple_fetch_attr gets non-heap-specific name
detoast_external_attr (postgres/postgres@2e8b6bf)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,3076810d61dfc0fdff0d9ecb915d652a95bd0c1d,Chapman Flack,2020-05-21T01:45:24Z,chap@anastigmatix.net,Chapman Flack,2020-05-21T01:45:24Z,chap@anastigmatix.net,153,61,92,Merge pull request #263 from feature/REL1_5_STABLE/saxon10
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,dbc703b72c648f92db46ea245262e5ea0fd3066b,Chapman Flack,2020-05-20T02:48:34Z,chap@anastigmatix.net,Chapman Flack,2020-05-20T02:48:34Z,chap@anastigmatix.net,2,1,1,"This wasn't preserved in 2255756

Remember not to take another real pin if this thread already
has one lower on the PinCount stack. Was correct before 2255756
but missed in that change. (Such nesting isn't covered by
existing tests.)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,53cd7d8fc13f10c05d65390c706c5d449da29854,Chapman Flack,2020-05-10T21:51:56Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:52:26Z,chap@anastigmatix.net,132,44,88,"Implement returnContent differently

Michael Kay of Saxonica pointed out that the evaluate() method
of XQueryEvaluator forces materialization of the entire result
in memory, and that a simple loop (or, in his example, stream/
forEach) may do better, while having the same SQL/XML-mandated
effect (equivalent to document{$EXPR}).
https://sourceforge.net/p/saxon/mailman/message/36969060/"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,0bfd845b2f56db8665295a64989a25de5e232e6d,Chapman Flack,2020-04-02T03:40:56Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:52:26Z,chap@anastigmatix.net,18,15,3,Exploit Saxon 10's new java.time support
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,ab55afb2574530dcd0701e47a1bd1caa0176da58,Chapman Flack,2020-04-02T02:30:37Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:52:26Z,chap@anastigmatix.net,7,4,3,Accommodate Saxon 10 SequenceIterator API change
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,2255756b7bde4457600d9f471b4c31261abe31df,Chapman Flack,2020-05-09T01:37:23Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:48:12Z,chap@anastigmatix.net,100,88,12,"Make DualState inflatable

The statistics MBean shows only a few contentions typically for
tens of thousands of DualState instances, so avoid allocating a
wait queue for every one. Any instance that needs to be waited on
will sprout a queue the first time that happens."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,0b1ff1a1a6cfd8610e01a6cb7f4171a52c377141,Chapman Flack,2020-05-08T04:04:29Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:48:12Z,chap@anastigmatix.net,21,6,15,"Simplify PinCount stack

As it has a peculiar requirement on the caller (only an object just
obtained from allocate() may be passed to push()), just make push()
do the allocation itself and return the object, so it can't be
called in violation of assumptions."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,54e8ff2f9a54e9e0ca9ebfe99b85e9edafac2320,Chapman Flack,2020-05-07T02:53:36Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:48:12Z,chap@anastigmatix.net,117,103,14,"Replace ArrayDeque-based PinCount stack

Implement a custom, minimal array-based stack that hangs on to
a few previously allocated elements as a pool, with the aim to
reduce the amount of garbage observed with the old implementation."
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,993acdd2acb66487ce6394cda95476660c08b88d,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,174,114,60,Merge pull request #259 from bug/master/variadic
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/AnyTest.java,993acdd2acb66487ce6394cda95476660c08b88d,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,174,114,60,Merge pull request #259 from bug/master/variadic
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,993acdd2acb66487ce6394cda95476660c08b88d,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:44Z,chap@anastigmatix.net,174,114,60,Merge pull request #259 from bug/master/variadic
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRWriter.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,acbe1055cbdfdba8d2836265daf843ad23d89390,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,Chapman Flack,2020-05-10T21:45:02Z,chap@anastigmatix.net,1916,1612,304,Merge pull request #256 from feature/master/implicitdeps
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,6745166530bb336a497bcb3e3206f762241e1bcb,Chapman Flack,2020-03-08T02:40:32Z,chap@anastigmatix.net,Chapman Flack,2020-03-08T02:40:32Z,chap@anastigmatix.net,167,109,58,"Add a variadic-call test to AnyTest

It makes sense to add it there because of a current bug in Type
caching that creates an order dependency between this test and
AnyTest's makeArray method: a Heisenbuggy behavior depending on
what type oid was last associated in the cache with the Object[]
type.

Other than that bug, it appears not at all difficult to support
variadic functions. PostgreSQL takes care of gathering the
arguments into an array, so that while the Java method may be
declared variadic, it does not have to be; it may simply declare
an array parameter in the right position. This is desirable,
because a declared variadic parameter would need to be the last one
in the Java method's argument list, which conflicts with the existing
convention for composite returns. But it is no problem to simply
declare a variadic parameter in the SQL function declaration, and
a corresponding ordinary array parameter in the Java method.

Completing variadic support will require fixing the Type caching bug
and creating some annotation syntax to tell the DDR generator to
produce the keyword VARIADIC. Future work; this test is simply here
to make sure support does not regress meanwhile."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/AnyTest.java,6745166530bb336a497bcb3e3206f762241e1bcb,Chapman Flack,2020-03-08T02:40:32Z,chap@anastigmatix.net,Chapman Flack,2020-03-08T02:40:32Z,chap@anastigmatix.net,167,109,58,"Add a variadic-call test to AnyTest

It makes sense to add it there because of a current bug in Type
caching that creates an order dependency between this test and
AnyTest's makeArray method: a Heisenbuggy behavior depending on
what type oid was last associated in the cache with the Object[]
type.

Other than that bug, it appears not at all difficult to support
variadic functions. PostgreSQL takes care of gathering the
arguments into an array, so that while the Java method may be
declared variadic, it does not have to be; it may simply declare
an array parameter in the right position. This is desirable,
because a declared variadic parameter would need to be the last one
in the Java method's argument list, which conflicts with the existing
convention for composite returns. But it is no problem to simply
declare a variadic parameter in the SQL function declaration, and
a corresponding ordinary array parameter in the Java method.

Completing variadic support will require fixing the Type caching bug
and creating some annotation syntax to tell the DDR generator to
produce the keyword VARIADIC. Future work; this test is simply here
to make sure support does not regress meanwhile."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,216f340261b7406482f9ef58c39a1d03eaa8a111,Chapman Flack,2020-03-08T01:20:16Z,chap@anastigmatix.net,Chapman Flack,2020-03-08T01:20:16Z,chap@anastigmatix.net,7,5,2,"Always produce a fixed-arity method handle

If a Java target method is variadic, and its SQL function
declaration calls the corresponding argument variadic,
PostgreSQL already will have collected arguments into an array.
If the method handle does not have its asVarargsCollector
property turned off, it will wrap the PostgreSQL-provided array
inside another array, which is one wrapper too many. Use
asFixedArity() on the method handle so that doesn't happen."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,c0da267cb9ad7dcb426dbbc53dd6884f07fe00b2,Chapman Flack,2020-03-04T03:40:58Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T03:40:58Z,chap@anastigmatix.net,21,7,14,"Simplify BaseUDTFunctionID constructor

No need to involve regular expressions in constructing
a handful of enum instances; just make the constructor
variadic.

Also replace DBType.Named::new with fromSQLTypeAnnotation.
Won't ever be mistaken for lightweight, but does the right thing;
the parameters typed ""integer"" should become DBType.Reserved,
not Named."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,6183f49167109c55046eac314c9d16ccb25a190a,Chapman Flack,2020-03-01T19:34:46Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T00:24:25Z,chap@anastigmatix.net,116,79,37,"Better msgr integration for recent code

Begin adapting the newly-added code to report more errors
through javac's Messager."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,cf3a4245731c2f2d1f34c3513142ce474c43e44f,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,442,399,43,"Use dependency tracking to order BaseUDT

... and remove now-unnecessary explicit provides/requires
in examples that formerly needed them."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,cf3a4245731c2f2d1f34c3513142ce474c43e44f,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,442,399,43,"Use dependency tracking to order BaseUDT

... and remove now-unnecessary explicit provides/requires
in examples that formerly needed them."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,cf3a4245731c2f2d1f34c3513142ce474c43e44f,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,442,399,43,"Use dependency tracking to order BaseUDT

... and remove now-unnecessary explicit provides/requires
in examples that formerly needed them."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,cf3a4245731c2f2d1f34c3513142ce474c43e44f,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,Chapman Flack,2020-03-04T00:24:21Z,chap@anastigmatix.net,442,399,43,"Use dependency tracking to order BaseUDT

... and remove now-unnecessary explicit provides/requires
in examples that formerly needed them."
,pljava-api/src/main/java/module-info.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/elog/ELogHandler.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/Privilege.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/internal/UncheckedException.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetField.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,d24c31dd1f62f01485ffb140b296273e89c195cf,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-03T23:17:25Z,chap@anastigmatix.net,747,489,258,Merge pull request #255 from feature/master/javacwarn
,pljava-api/src/main/java/module-info.java,3b8fd9366a01bf6ef6a432925fb4c03f0bef0e12,Chapman Flack,2020-03-02T05:04:48Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T05:04:48Z,chap@anastigmatix.net,1,1,0,"Suppress qualified-export warning in pljava-api

The annotation.processing package isn't really deemed
polished enough to call API, so it isn't generally exported,
but for now it is exported to o.p.p.internal because
InstallHelper uses a DDRWriter method. That's kind of ugly
and should be fixed eventually by moving a more polished
version of that functionality into the o.p.p.sqlgen package,
which is exported unconditionally, and letting the internal
module use that.

There remain some warnings in DDRProcessor, but that's being
refactored in another branch."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,b1b111bf753442622b385c345bf6b3b1d303f0c9,Chapman Flack,2020-03-02T03:44:25Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,4,2,2,Finish up with Loader
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,9803433074a7c5970fe3d70c0035b3ebd3332996,Chapman Flack,2020-02-10T06:38:37Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,195,95,100,"This never got java7ified or java8ified

... perhaps because it was expected imminently to be replaced
by something much more glorious. But here is an opportunity to
see what can be accomplished with just a small tweak.

For uniformity, take this opportunity to use UncheckedException
in places here where things were getting laboriously wrapped as
other unchecked exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/UncheckedException.java,8ab5548640a218b5a30525d4acad730820cab5c3,Chapman Flack,2020-02-09T23:51:31Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,150,150,0,An unchecked exception carrier
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/elog/ELogHandler.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/internal/Privilege.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetField.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,4e9476f8314b868bbe16a381e5b6dadc69b7fe12,Chapman Flack,2020-03-01T20:42:34Z,chap@anastigmatix.net,Chapman Flack,2020-03-02T03:48:04Z,chap@anastigmatix.net,397,241,156,"Have Maven not suppress Java compiler warnings

What a riot: the nar-maven-plugin goads gcc into flooding
the output with every least interesting warning it's got,
while at the same time the maven-compiler-plugin has been
telling javac all along to report no warnings at all.

In passing, address some of those warnings that have been
suppressed all this time.

Leave out the warnings in Loader for now; first cherry-pick
some Loader work-in-progress java8ifying it, then see about
whatever warnings are left."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,d491b04fcfd86e313a4b83405258da2b769d96a4,Chapman Flack,2020-02-24T06:29:13Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,47,29,18,"Record provideTags for MappedUDT

And remove some no-longer-needed explicit dependency annotations
from the ComplexTuple example.

In passing, tighten the cycle reports from the topological orderer,
and give AbstractAnnotationImpl a serviceable toString() for
debugging convenience.

BaseUDT is going to be interesting: the inherent cycle between type
and type functions can be escaped in the install direction by splitting
the type creation into the shell and the final update. That trick isn't
available for the remove direction, which will require some combination
of DROP TYPE ... CASCADE and suppression of the undeploy strings that
would otherwise be generated by the type functions."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,d491b04fcfd86e313a4b83405258da2b769d96a4,Chapman Flack,2020-02-24T06:29:13Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,47,29,18,"Record provideTags for MappedUDT

And remove some no-longer-needed explicit dependency annotations
from the ComplexTuple example.

In passing, tighten the cycle reports from the topological orderer,
and give AbstractAnnotationImpl a serviceable toString() for
debugging convenience.

BaseUDT is going to be interesting: the inherent cycle between type
and type functions can be escaped in the install direction by splitting
the type creation into the shell and the final update. That trick isn't
available for the remove direction, which will require some combination
of DROP TYPE ... CASCADE and suppression of the undeploy strings that
would otherwise be generated by the type functions."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,a339a2aa5f9921da7519d026bf8dcb7d7e5cbd59,Chapman Flack,2020-02-23T22:56:07Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,188,159,29,"Record dependency tags for functions

A Function now records that it provides itself, and requires
its parameter and return types. (Nothing useful happens because
of that, until types also record that they provide themselves).

DependTag.Function had to be extended to identify the function
by parameter-type signature as well as by name. Overlooked that
at first.

That in turn required a very rudimentary equals() implementation
for DBType. It may well be unsuited for any use other than
function signature comparison, where defaults and modifiers don't
matter. It will also be very easy to see false negatives for
DBType.Reserved owing to semantically meaningless differences in
spelling of the uninterpreted reserved text. (This could be a reason
to revisit the way Reserved currently makes no even halfhearted effort
to segregate 'name' from 'modifier'.)

But false negatives of that sort might turn out to be tolerable.
They won't lead to more-than-one-provider errors as false positives
would, and implicit tags generated from the same sources will probably
be spelled the same. If they aren't, they won't match up at
toplogical ordering time, and will just be ignored, with the possible
worst-case result that explicit tags will have to be added to avoid
an ordering mistake. That doesn't sound like the end of the world."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,a339a2aa5f9921da7519d026bf8dcb7d7e5cbd59,Chapman Flack,2020-02-23T22:56:07Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,188,159,29,"Record dependency tags for functions

A Function now records that it provides itself, and requires
its parameter and return types. (Nothing useful happens because
of that, until types also record that they provide themselves).

DependTag.Function had to be extended to identify the function
by parameter-type signature as well as by name. Overlooked that
at first.

That in turn required a very rudimentary equals() implementation
for DBType. It may well be unsuited for any use other than
function signature comparison, where defaults and modifiers don't
matter. It will also be very easy to see false negatives for
DBType.Reserved owing to semantically meaningless differences in
spelling of the uninterpreted reserved text. (This could be a reason
to revisit the way Reserved currently makes no even halfhearted effort
to segregate 'name' from 'modifier'.)

But false negatives of that sort might turn out to be tolerable.
They won't lead to more-than-one-provider errors as false positives
would, and implicit tags generated from the same sources will probably
be spelled the same. If they aren't, they won't match up at
toplogical ordering time, and will just be ignored, with the possible
worst-case result that explicit tags will have to be added to avoid
an ordering mistake. That doesn't sound like the end of the world."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,69ed06bd44fc18d814d08e676fb0d1c386bb3987,Chapman Flack,2020-02-23T21:07:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,166,111,55,"Factor type resolution out of deployStrings

Factor into one step that creates DBType instances for a function's
return type and all parameters, and use those later when generating
the function's deployStrings."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,cd88264adfc40b174e7973baea292deb50c99c11,Chapman Flack,2020-02-23T17:45:28Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,78,32,46,"Simplify

As long as there is a fallback policy to parse as Reserved whenever
what follows the initial identifier (and precedes array dims, if any)
does not look like a parenthesized type modifier, then there is no need
for extra work to recognize DOUBLE PRECISION, NATIONAL CHARACTER or
NATIONAL CHAR as reserved; the second word will trigger the fallback
treatment. If the fallback policy is ever changed (say, to report such
cases as clearly erroneous), then the extra DOUBLE/NATIONAL checking
removed in this commit will have to go back in.

In the spirit of simplification, use the existing pattern
ISO_AND_PG_IDENTIFIER_CAPTURING here rather than deriving a new one
that excludes the Unicode-delimited-identifier case. It is true that
the input values here are coming from Java source, which already has
its own convention for escaping Unicode characters, and there could
be an argument for not doing extra work to support an additional
convention for accomplishing the same thing. But that may not be a
strong argument for doing extra work NOT to support it. As prior
PL/Java versions dumped the SQLType string directly into the
descriptor for PostgreSQL to make sense of, allowing all of the
identifier styles here reduces the chance of breaking code that worked.

This change involved revisiting the ISO_UNICODE_ESCAPE_SPECIFIER pattern
to make sure it's right, and expanding a comment to confirm that it is."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,cd88264adfc40b174e7973baea292deb50c99c11,Chapman Flack,2020-02-23T17:45:28Z,chap@anastigmatix.net,Chapman Flack,2020-02-29T20:18:13Z,chap@anastigmatix.net,78,32,46,"Simplify

As long as there is a fallback policy to parse as Reserved whenever
what follows the initial identifier (and precedes array dims, if any)
does not look like a parenthesized type modifier, then there is no need
for extra work to recognize DOUBLE PRECISION, NATIONAL CHARACTER or
NATIONAL CHAR as reserved; the second word will trigger the fallback
treatment. If the fallback policy is ever changed (say, to report such
cases as clearly erroneous), then the extra DOUBLE/NATIONAL checking
removed in this commit will have to go back in.

In the spirit of simplification, use the existing pattern
ISO_AND_PG_IDENTIFIER_CAPTURING here rather than deriving a new one
that excludes the Unicode-delimited-identifier case. It is true that
the input values here are coming from Java source, which already has
its own convention for escaping Unicode characters, and there could
be an argument for not doing extra work to support an additional
convention for accomplishing the same thing. But that may not be a
strong argument for doing extra work NOT to support it. As prior
PL/Java versions dumped the SQLType string directly into the
descriptor for PostgreSQL to make sense of, allowing all of the
identifier styles here reduces the chance of breaking code that worked.

This change involved revisiting the ISO_UNICODE_ESCAPE_SPECIFIER pattern
to make sure it's right, and expanding a comment to confirm that it is."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,e5dde46b60411130ca225bff439663c4b07448df,Chapman Flack,2020-02-23T04:54:44Z,chap@anastigmatix.net,Chapman Flack,2020-02-23T19:13:58Z,chap@anastigmatix.net,419,381,38,"DBType now groks modifier, array, and default

It now has fromSQLTypeAnnotation to construct a DBType from
whatever could be found in the 'value' element of SQLType, which
formerly could be anything PostgreSQL wouldn't object to when
dumped into a deployment descriptor where a type should go. It
is still about that lenient, but will try to tease out a qualified
identifier for the type whenever it can make enough sense of the
syntax to do so. If it has done so, then dependTag() will return
a DependTag.Type for it.

If the syntax did not fit the generic qualified-identifier,
optional parenthesized typmod, optional array dimensions form, it
will have been treated as a type named with SQL's grammatically
reserved syntax, and dependTag will return null. That should be
adequate, as the only types named using grammatically reserved
SQL syntax should be those that are already known to be present,
and therefore uninteresting for the task of ordering the deployment
descriptor.

It may be overkill to parse the SQLType annotation value with all
the machinery in Lexicals, such as allowing separator() in all the
places it could go in SQL. It would have been possible to choose
syntax restrictions for an SQLType value (no spaces around the
qualified identifier dot! no comments!) and hand-roll shorter
parsing code tailored to it. But it is good to begin getting some
experience applying the Lexicals machinery to real work; the full
capabilities will be needed for future tasks like overhauling the
deployment-time descriptor parsing."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,45f74cea3587d9645a0066d1acb61aa492ac5782,Chapman Flack,2020-02-22T15:22:15Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T15:22:15Z,chap@anastigmatix.net,156,136,20,DBType smarter about array vs other suffix
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,2ddcce1a8f6e77c5c700d82be930e4e9ffe9a16a,Chapman Flack,2020-02-20T02:52:11Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T01:21:19Z,chap@anastigmatix.net,40,14,26,Bit of java8ification
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,a2323be0f3f11f46407e5d38574c67ad7f5658be,Chapman Flack,2020-02-19T02:37:34Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T01:21:06Z,chap@anastigmatix.net,220,186,34,"Now with DependTag for provides/requires

The existing forms of provides/requires, provided as free-form
Strings in annotations, are now represented by DependTag.Explicit,
opening a door for more DependTag.Foo types to be generated
implicitly."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRWriter.java,a2323be0f3f11f46407e5d38574c67ad7f5658be,Chapman Flack,2020-02-19T02:37:34Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T01:21:06Z,chap@anastigmatix.net,220,186,34,"Now with DependTag for provides/requires

The existing forms of provides/requires, provided as free-form
Strings in annotations, are now represented by DependTag.Explicit,
opening a door for more DependTag.Foo types to be generated
implicitly."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,1faf1a59befe9eec368a30ae0284ec947651c50e,Chapman Flack,2020-02-16T01:14:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T01:19:18Z,chap@anastigmatix.net,266,192,74,"DDRProcessor using Identifier.Qualified for types

Had to introduce DBType, an abstraction over database type names,
which are usually qualified identifiers, but sometimes reserved
SQL syntax. DBType also has to hold stuff like the [] suffix on
an array type, which clearly isn't part of the qualified name.
It is also currently being used to hold the defaults string when
returned from typeWithDefault().

DBType clearly has room to improve. It doesn't have equals() right
now, as it would be hard to do the right thing except in the case of
a plain Identifier.Qualified without array suffix or defaults. That
might be barely ok for the purpose of recognizing user-defined types,
as those will probably always have qualified identifier names, not
SQL reserved syntax, and won't be replacing arrays. Still, it should
probably handle arrayness more explicitly than just as a string
suffix, and maybe should not be overloaded for defaults duty (or just
define equals() to be independent of any defaults payload it might
be carrying)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,2d4c50760387325a524a328c7ea4d76e7b6ba503,Chapman Flack,2020-02-22T01:11:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-22T01:16:56Z,chap@anastigmatix.net,37,27,10,"Suppress DDRProcessor's unchecked warnings

Some had crept in; may as well silence them before further changes."
,pljava-so/src/main/c/Backend.c,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava-so/src/main/c/Function.c,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava-so/src/main/c/TypeOid.c,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava-so/src/main/include/pljava/Function.h,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,dd0a1964abf716829fe226ac9ee41e311618f754,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,Chapman Flack,2020-02-13T00:10:27Z,chap@anastigmatix.net,555,455,100,Merge pull request #254 from feature/master/validator
,pljava-so/src/main/c/Function.c,dffc1636317c80ddb9a949b9a70108aa967e27b3,Chapman Flack,2020-02-12T23:51:54Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T23:51:54Z,chap@anastigmatix.net,36,25,11,"Don't leak rejected Function into TopMemoryContext

That context doesn't get reset, so catch error exits from
Function_create and ensure the Function struct gets pfreed.

In passing, drop the retail pfree of the procTup; that's in
the current context and will get wholesale freed anyway."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,f1e8ef5764f6183f278b65f7e5a14c46af996c63,Chapman Flack,2020-02-12T03:46:04Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,48,38,10,"Make Function.java's regular expressions less lax

They were derived at first straight from the C code, which
wasn't any more strict than necessary to distinguish the parts,
as it could always count on Java to flag what wasn't a valid
type or method name.

But in a validator, if check_function_bodies is false, whatever
isn't caught by the regular expressions won't be caught at all.
And it's better in general to get a quick parse error than a later
one from Java trying to resolve something bogus."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,a81ef5ec66ae12b7707306212d634915d4bc9c5f,Chapman Flack,2020-02-12T02:25:39Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,16,16,0,"Use CREATE OR REPLACE LANGUAGE

It can add the validator if the language had been created
earlier without it, with no disruption to objects depending
on the language.

This syntax first appears in PostgreSQL 9.0, so ...."
,pljava-so/src/main/c/Function.c,35f5d0fb2ecc87e9720a458154157c3a287e45c0,Chapman Flack,2020-02-12T00:49:16Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,3,0,3,"This appears never to have been a good idea

javaNameString was passed in as the type name from the explicit
method signature.

This line could only do one of two things: replace it with the
same name, and be correct, or replace it with anything else,
and be wrong.

Ok, ""never"" hasn't been very long. I introduced it in ffe41c8.
It was modeled on the C buildSignature code, which used
Type_getJNISignature, and substituted Type_getJavaTypeName as
needed to work with method handles in Java.

Turns out Type_getJNISignature has an overridden implementation
for a Coerce type (returns the signature of the Coerce's inner
type), while Type_getJavaTypeName was never taught the same trick.

Still, I'm not convinced it makes sense to do anything here, at
most assert that the Type's name IS the one from the explicit
signature."
,pljava-so/src/main/c/Backend.c,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava-so/src/main/c/Function.c,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava-so/src/main/c/TypeOid.c,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava-so/src/main/include/pljava/Function.h,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,b9480d0adac4a0cdf270d8654477f7ade1752e50,Chapman Flack,2020-02-11T03:28:22Z,chap@anastigmatix.net,Chapman Flack,2020-02-12T06:17:21Z,chap@anastigmatix.net,332,278,54,"A start on a function validator

PL/Java has been without one long enough. This start does not include
much of an effort to improve or beautify the existing error messages for
unsuccessful function definitions, but only to make the same old ugly
ones happen at a more useful time, that of CREATE FUNCTION instead of
only later with attempts to use the function.

The validator is shoehorned in by passing a forValidator boolean to
Function_getFunction, which is now capable of returning NULL, rather
than always a usable Function instance. Naturally, it should only
return NULL when forValidator is true. The validator doesn't use
the result.

For a non-UDT function, a complete, usable Function should result
if check_function_bodies is true, but not if it's false. If it is
produced, it is saved in the hash table; no point re-doing the work
later when the function is used.

For a UDT function, incomplete initialization will be the rule,
not the exception, as UDT functions are created while the associated
PostgreSQL type is only a shell, and that's too early to save any
vitals about it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/Backend.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/Function.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/Invocation.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/JNICalls.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/PgObject.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Boolean.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Byte.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Coerce.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Composite.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Double.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Float.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Integer.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Long.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Short.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Type.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/UDT.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/c/type/Void.c,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/Function.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/Invocation.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/JNICalls.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/PgObject.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/type/Type.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/type/Type_priv.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/type/UDT.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava-so/src/main/include/pljava/type/UDT_priv.h,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava/src/test/java/FunctionCreationTest.java,c39b7fa88ac6cca4a652a409fba38ab5f5cb8dcb,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:38:20Z,chap@anastigmatix.net,3644,2907,737,Merge pull request #253 from refactor/master/createfunc
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,e48492853c16bd479891abf820755c0b7eb9e2ac,Chapman Flack,2020-02-09T22:36:39Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T22:36:39Z,chap@anastigmatix.net,16,9,7,Fix javadoc comments overlooked in 97010eb
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,e8a57dcd38e70abc11e8fc0cabffff8203d0001a,Chapman Flack,2020-02-09T18:53:56Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T18:53:56Z,chap@anastigmatix.net,2,0,2,No-longer-needed import was overlooked
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava-so/src/main/c/Function.c,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava-so/src/main/c/Invocation.c,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava-so/src/main/include/pljava/Function.h,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava-so/src/main/include/pljava/Invocation.h,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,a92b513724601037f478e8a3891adbe77491b6f6,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-09T01:27:59Z,chap@anastigmatix.net,256,227,29,"Allow rare reentrant invocation activity

The preparation to invoke a general PL/Java function involves
converting parameters and storing them in a static area from which
the function's Java method handle will fetch them. The fetching is
complete and they are all on the Java stack before the target method
is invoked, so reentrant PL/Java invocations from that method do not
pose any problem.

Reentrant invocation while enumerating and converting those parameters
can pose a problem. It could occur if one of the parameters is a PL/Java
UDT. The UDT read/write/parse/toString methods themselves are handled
specially, without touching the static parameter area, so they do not
directly exercise this case. But no rule limits what a PL/Java UDT
implementing method can do, so should one involve a query that calls
another PL/Java function, the problem case arises.

It can be detected by seeing that the countCheck field in the parameter
area is already nonzero, saving the slot contents if so, and restoring
them when the current invocation (normally or exceptionally) completes.
To make the countCheck test reliable, every general PL/Java function's
MethodHandle tree is now constructed to leave countCheck zero after
all the parameters have been fetched.

Adds a bit of copying overhead in the expected-to-be-rare case, but
keeps it out of the common case.

Add a few lines to an existing UDT example to make sure this gets
exercised."
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,fe656c54eeabaee29270986b9fe55dc267d99cfc,Chapman Flack,2020-02-08T03:06:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-08T03:06:30Z,chap@anastigmatix.net,125,119,6,Not to forget the javadoc
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,fe656c54eeabaee29270986b9fe55dc267d99cfc,Chapman Flack,2020-02-08T03:06:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-08T03:06:30Z,chap@anastigmatix.net,125,119,6,Not to forget the javadoc
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,a3cb91c3e8f1cd3464a92be320b41d7a70a99981,Chapman Flack,2020-02-08T00:27:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-08T00:27:29Z,chap@anastigmatix.net,44,36,8,"Zero the static parameter slots after use

Zero/null the static slots after the parameter values have been
loaded onto the stack for the target method. For both primitives
and references, this is worth doing to avoid having potentially
sensitive values indefinitely sitting in the static area. For
references, it's also important to avoid indefinitely holding
them live.

It seems to add maybe 100 ns to null a reference, and negligible
cost to zero a primitive."
,pljava-so/src/main/c/Function.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Boolean.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Byte.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Coerce.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Composite.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Double.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Float.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Integer.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Long.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Short.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/type/Void.c,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/include/pljava/Function.h,1116f4b846c71e42510bfb421d419a0f7a995757,Chapman Flack,2020-02-06T23:59:21Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,83,53,30,"Rototill the affected type implementations again

Add a very-limited-purpose pljava_Function_setParameter method for
use by Composite_invoke to supply the last parameter of a composite-
returning function, just to keep some semblance of encapsulation of
the static parameter area within Function."
,pljava-so/src/main/c/Backend.c,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/c/Function.c,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/c/type/Type.c,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/include/pljava/Function.h,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/include/pljava/type/Type.h,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/include/pljava/type/Type_priv.h,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava/src/test/java/FunctionCreationTest.java,97010eb7b9b675e2f8d1b1e2ece67a8b609aaf0e,Chapman Flack,2020-02-06T03:23:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,635,323,312,"Make parameter passing areas ... static!

Seriously. Only the PG thread gets to make calls. The method
handle tree built up over the intended invocation target will
fetch all the parameters from the static area onto the stack
before the (potentially reentrant) target code receives control.

Eliminates per-call allocation of object array or byte buffer.
Also means the primitives array always exists, and can be used
for the return value of primitive-returning functions, collapsing
the former ten EntryPoints methods down to two. Again, the return
value is only put there after the (potentially reentrant) method
has returned."
,pljava-so/src/main/c/Function.c,91ac9c23b7cc52d48fa27c66c894a1ea809a2bd3,Chapman Flack,2020-02-03T02:03:44Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,354,194,160,"Dedicate an EntryPoints class

There are too many entrypoint methods taking up too much
of Function.java. A dedicated class would be a clear place
to centralize the places PG enters Java.

(Of course, there are a LOT of places where the current C code
makes JNI upcalls, usually to Java library code. Treating all of
those places consistently with function entry will have to be a
non-goal for now.)"
,pljava/src/main/java/org/postgresql/pljava/internal/EntryPoints.java,91ac9c23b7cc52d48fa27c66c894a1ea809a2bd3,Chapman Flack,2020-02-03T02:03:44Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,354,194,160,"Dedicate an EntryPoints class

There are too many entrypoint methods taking up too much
of Function.java. A dedicated class would be a clear place
to centralize the places PG enters Java.

(Of course, there are a LOT of places where the current C code
makes JNI upcalls, usually to Java library code. Treating all of
those places consistently with function entry will have to be a
non-goal for now.)"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,91ac9c23b7cc52d48fa27c66c894a1ea809a2bd3,Chapman Flack,2020-02-03T02:03:44Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,354,194,160,"Dedicate an EntryPoints class

There are too many entrypoint methods taking up too much
of Function.java. A dedicated class would be a clear place
to centralize the places PG enters Java.

(Of course, there are a LOT of places where the current C code
makes JNI upcalls, usually to Java library code. Treating all of
those places consistently with function entry will have to be a
non-goal for now.)"
,pljava-so/src/main/c/Function.c,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/c/type/Type.c,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/c/type/UDT.c,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/include/pljava/Function.h,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/include/pljava/type/UDT.h,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/include/pljava/type/UDT_priv.h,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,cdea77fcbbf0ef3a94ac94300bdcab695ec57bc4,Chapman Flack,2020-01-29T23:26:50Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,360,315,45,"Bring UDT methods into the new arrangement

Because these methods have predictable signatures rather than the
arbitrarily variable ones of non-UDT methods, it was possible to
create new specific invocation wrapper methods, rather than
piggybacking on the Object[],ByteBuffer general purpose ones.

But that adds four more invocation wrappers. I'm not really happy
with having so many invocation wrappers; that could make it quite
tedious to add new behavior affecting all of them.

The only new method-handle generating methods are for a UDT's
readSQL and parse methods. There wasn't really any need for the
former code's grabbing writeSQL and toString methodIDs for every
UDT, as those are common methods every UDT class inherits. (Of
course, readSQL is inherited too, but a method handle is made
here that also calls the constructor, so it behaves more like a
static factory method.)"
,pljava-so/src/main/c/Function.c,819fa362d6d609ed47fe1fbbba6445a87e288f98,Chapman Flack,2020-01-27T02:39:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,158,25,133,"Retire the C buildSignature / getMethodID code

The Java implementation now obtains a MethodHandle instead.

UDT methods get called in their own different way, none of which
has changed yet."
,pljava-so/src/main/c/type/Composite.c,819fa362d6d609ed47fe1fbbba6445a87e288f98,Chapman Flack,2020-01-27T02:39:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,158,25,133,"Retire the C buildSignature / getMethodID code

The Java implementation now obtains a MethodHandle instead.

UDT methods get called in their own different way, none of which
has changed yet."
,pljava-so/src/main/c/type/Type.c,819fa362d6d609ed47fe1fbbba6445a87e288f98,Chapman Flack,2020-01-27T02:39:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,158,25,133,"Retire the C buildSignature / getMethodID code

The Java implementation now obtains a MethodHandle instead.

UDT methods get called in their own different way, none of which
has changed yet."
,pljava-so/src/main/include/pljava/type/Type.h,819fa362d6d609ed47fe1fbbba6445a87e288f98,Chapman Flack,2020-01-27T02:39:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,158,25,133,"Retire the C buildSignature / getMethodID code

The Java implementation now obtains a MethodHandle instead.

UDT methods get called in their own different way, none of which
has changed yet."
,pljava-so/src/main/include/pljava/type/Type_priv.h,819fa362d6d609ed47fe1fbbba6445a87e288f98,Chapman Flack,2020-01-27T02:39:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,158,25,133,"Retire the C buildSignature / getMethodID code

The Java implementation now obtains a MethodHandle instead.

UDT methods get called in their own different way, none of which
has changed yet."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,5fdf1af79095268fd652c6788e51c1c721cbb206,Chapman Flack,2020-01-26T02:41:07Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:12Z,chap@anastigmatix.net,24,22,2,"Clear the loader cache if deployment fails

Cached references to defunct classes from a failed jar install
are not conducive to a later attempt succeeding.

This is not yet a complete solution: it is now possible
for an installJar to fail, be retried, and not bonk into
a method-not-found exception (because of old defunct classes
in the signature with the right names but wrong loaders),
but still bonk into a ""cannot cast Foo to Foo"" class cast
exception for the same sort of reason, if a mapped UDT is
involved, which Type is caching, I suspect.

But neither problem is new with this refactoring; they can
be triggered in the former code the same way. And the workaround
is pretty simple, just get a new backend with \c. So tracking down
the rest of this doesn't have to be a priority."
,pljava-so/src/main/c/Function.c,d7c277f3934638d08c2029611474527396a7270b,Chapman Flack,2020-01-25T22:59:29Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,25,20,5,"Type_isPrimitive isn't quite what you'd think

It is true also for an array of Java primitive types.

Which is the expected meaning when PL/Java is working out
type mappings, and allowing Integer[] to replace int[].

But it's not what's needed to determine whether to pass a
parameter as a Java reference or primitive."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,473711f786786405cac1f69925c6fc7543043d11,Chapman Flack,2020-01-25T22:54:01Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,2,1,1,"Must use publicLookup().in(...)

Without the in(...), it will find public methods just fine,
but it finds them ""from"" Object, which means class references
end up cached in the bootstrap class loader. Hilarity ensues
if a jar then gets replaced."
,pljava-so/src/main/c/type/Boolean.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Byte.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Coerce.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Composite.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Double.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Float.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Integer.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Long.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Short.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/type/Void.c,7c00e4111e84639a8aa37fdeec3d6a86c0180d12,Chapman Flack,2020-01-25T16:08:59Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,191,112,79,Rototill the affected type implementations
,pljava-so/src/main/c/Function.c,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/c/JNICalls.c,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/c/type/Type.c,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/include/pljava/Function.h,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/include/pljava/JNICalls.h,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/include/pljava/type/Type.h,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava-so/src/main/include/pljava/type/Type_priv.h,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,df122549b5b9baa31170fcc53275e721a9bdcf24,Chapman Flack,2020-01-25T02:02:58Z,chap@anastigmatix.net,Chapman Flack,2020-02-07T02:24:11Z,chap@anastigmatix.net,644,553,91,"Start on invokability

Give Function.java a bunch of private methods invokable from JNI, one
for each possible return type, all taking the same three parameters
(MethodHandle, Object[], ByteBuffer) where the MethodHandle is as
produced by adaptHandle.

Function.create now returns that handle instead of a method name string,
to be stored in the C Function_ struct. The signatures of various
invocation-related functions in Function and Type change. A lot of the
JNI callStatic<Foo>Method (no suffix, or suffix V) were left out of
JNICalls.c as unneeded, so they have to be there now.

Still to do: rototill the actual type/<foo>.c implementations affected
by the new signatures. It looks like those will only be the primitives,
and maybe a couple extras like Composite or Void, as the default method
for common reference-returning cases gets inherited from Type."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,f06f522f422235b6bbb2458b34f269180ddc3782,Chapman Flack,2020-01-25T00:35:12Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:33Z,chap@anastigmatix.net,8,3,5,"Embrace the intra-module lookup limitations

After all, it was never intended to let anybody CREATE FUNCTION
and name any method inside org.postgresql.pljava.internal!

By providing an intra-module-capable Lookup with only public
access enabled, and only when the target class is Commands,
the actually-wanted result of allowing just the public static
methods in Commands to be CREATE FUNCTION targets, follows
naturally.

There is still an addClassImages method in Commands that's
declared public just because a method in Backend calls it,
which is an implementation artifact that seems fixable."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,f06f522f422235b6bbb2458b34f269180ddc3782,Chapman Flack,2020-01-25T00:35:12Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:33Z,chap@anastigmatix.net,8,3,5,"Embrace the intra-module lookup limitations

After all, it was never intended to let anybody CREATE FUNCTION
and name any method inside org.postgresql.pljava.internal!

By providing an intra-module-capable Lookup with only public
access enabled, and only when the target class is Commands,
the actually-wanted result of allowing just the public static
methods in Commands to be CREATE FUNCTION targets, follows
naturally.

There is still an addClassImages method in Commands that's
declared public just because a method in Backend calls it,
which is an implementation artifact that seems fixable."
,pljava-so/src/main/c/Function.c,56eed76123b73de18ea48e1f73430e07688ffc7f,Chapman Flack,2020-01-26T01:37:46Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:33Z,chap@anastigmatix.net,258,258,0,"Adapt the method handle to invoke from JNI

That's a trick headline. You can't invoke a method handle from JNI.
adaptHandle() here piles a bunch of MethodHandle combinators on top
of the underlying handle, to produce something that can be passed an
object array and a ByteBuffer. The idea is for the C code to segregate
the actual parameters, putting all those of reference type into an
object array, and the primitives into an array of jvalue mapped with
a direct byte buffer, and pass the method handle, array, and buffer
to a Java method that does the invocation.

This does seem somewhat unpleasingly roundabout."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,56eed76123b73de18ea48e1f73430e07688ffc7f,Chapman Flack,2020-01-26T01:37:46Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:33Z,chap@anastigmatix.net,258,258,0,"Adapt the method handle to invoke from JNI

That's a trick headline. You can't invoke a method handle from JNI.
adaptHandle() here piles a bunch of MethodHandle combinators on top
of the underlying handle, to produce something that can be passed an
object array and a ByteBuffer. The idea is for the C code to segregate
the actual parameters, putting all those of reference type into an
object array, and the primitives into an array of jvalue mapped with
a direct byte buffer, and pass the method handle, array, and buffer
to a Java method that does the invocation.

This does seem somewhat unpleasingly roundabout."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,58823c2b72ca17d5ef932e8be2efec3b51892cd5,Chapman Flack,2020-01-23T23:41:13Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:33Z,chap@anastigmatix.net,15,13,2,"But must use publicLookup outside own module

The lookup created inside o.p.p.internal can't see things on the
class path. (Module.addReads might also do the trick, but simply
using a publicLookup seems to take care of it.)"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,ced43abc83f7a9682abc1b4f522e520d043eb605,Chapman Flack,2020-01-23T23:58:40Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:32Z,chap@anastigmatix.net,10,7,3,"Can't use publicLookup() intra-module

For methods like get_classpath implemented within o.p.p.internal,
a publicLookup() can't touch them, even from within the same module.
Create a regular lookup() for that purpose, with PACKAGE access
dropped."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,a327473752100ad21b8d1b7237aa4733044389ec,Chapman Flack,2020-01-23T23:58:11Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:32Z,chap@anastigmatix.net,213,203,10,Now with getMethodHandle
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,3bd02ce521d983e183b50aba269298bb9a8b74cf,Chapman Flack,2020-01-16T04:02:36Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:32Z,chap@anastigmatix.net,352,345,7,"Begin moving more of method lookup to Java.

The goal is to get the proper method looked up in Java in the form
of a MethodHandle, rather than poking details down to C and having
a jmethodID looked up there. This is only a step along.

In passing, add a specialization() method similar to the one in the
SQL generator (only longer and messier, as the API available for use
at runtime is way more fiddly than what an annotation processor can use
at compile time). Nothing uses it yet, but uses are anticipated."
,pljava/src/test/java/FunctionCreationTest.java,3bd02ce521d983e183b50aba269298bb9a8b74cf,Chapman Flack,2020-01-16T04:02:36Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:32Z,chap@anastigmatix.net,352,345,7,"Begin moving more of method lookup to Java.

The goal is to get the proper method looked up in Java in the form
of a MethodHandle, rather than poking details down to C and having
a jmethodID looked up there. This is only a step along.

In passing, add a specialization() method similar to the one in the
SQL generator (only longer and messier, as the API available for use
at runtime is way more fiddly than what an annotation processor can use
at compile time). Nothing uses it yet, but uses are anticipated."
,pljava-so/src/main/c/Function.c,9e84d5ee48f759d004cb719402b6b9892f44dab9,Chapman Flack,2020-01-16T02:37:05Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:20Z,chap@anastigmatix.net,79,47,32,"Rebased, which brought issue #192 back, re-fixed.

The function-class loading code, now moved to Java, needs to pass
the initiating loader back through the JNI calls to be saved in
the native Function struct. (As before, it's the /initiating/ loader
that needs to be saved; asking the class for its loader would produce
the /defining/ loader, which isn't good enough.)"
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,9e84d5ee48f759d004cb719402b6b9892f44dab9,Chapman Flack,2020-01-16T02:37:05Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T01:24:20Z,chap@anastigmatix.net,79,47,32,"Rebased, which brought issue #192 back, re-fixed.

The function-class loading code, now moved to Java, needs to pass
the initiating loader back through the JNI calls to be saved in
the native Function struct. (As before, it's the /initiating/ loader
that needs to be saved; asking the class for its loader would produce
the /defining/ loader, which isn't good enough.)"
,pljava-so/src/main/c/Function.c,fee095051c912dc86072d04aa7e020b5bbdf81f9,Chapman Flack,2016-04-21T04:15:54Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,273,44,229,"Retire the C function parsing code.

Function_checkTypeUDT was the last user of the parsing code in C,
now relies on a Java method. The C parsing code is now removed."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,fee095051c912dc86072d04aa7e020b5bbdf81f9,Chapman Flack,2016-04-21T04:15:54Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,273,44,229,"Retire the C function parsing code.

Function_checkTypeUDT was the last user of the parsing code in C,
now relies on a Java method. The C parsing code is now removed."
,pljava-so/src/main/c/Function.c,77ef0c22c5c3fe7b7bf31c3ec7f168c5154cafbd,Chapman Flack,2016-04-21T02:05:26Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,340,35,305,"An interim, working state.

The Java replacement for Function_create accomplishes the same
steps as the original, up to but not including building the
method signature and obtaining the JNI method ID. It then returns
to the C code (with the method name as its return value, as a
convenience), and the signature building and method ID retrieval
are still done there for now, by the former Function_init which
is now stripped to only those duties, and renamed
Function_getMethodID.

The exception for an unparsable AS gives no details, which is a bit
unhelpful now (when it won't be thrown until an attempt to *use* a
function), but will be less unhelpful once there is a validator
entry point."
,pljava-so/src/main/c/PgObject.c,77ef0c22c5c3fe7b7bf31c3ec7f168c5154cafbd,Chapman Flack,2016-04-21T02:05:26Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,340,35,305,"An interim, working state.

The Java replacement for Function_create accomplishes the same
steps as the original, up to but not including building the
method signature and obtaining the JNI method ID. It then returns
to the C code (with the method name as its return value, as a
convenience), and the signature building and method ID retrieval
are still done there for now, by the former Function_init which
is now stripped to only those duties, and renamed
Function_getMethodID.

The exception for an unparsable AS gives no details, which is a bit
unhelpful now (when it won't be thrown until an attempt to *use* a
function), but will be less unhelpful once there is a validator
entry point."
,pljava-so/src/main/include/pljava/PgObject.h,77ef0c22c5c3fe7b7bf31c3ec7f168c5154cafbd,Chapman Flack,2016-04-21T02:05:26Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,340,35,305,"An interim, working state.

The Java replacement for Function_create accomplishes the same
steps as the original, up to but not including building the
method signature and obtaining the JNI method ID. It then returns
to the C code (with the method name as its return value, as a
convenience), and the signature building and method ID retrieval
are still done there for now, by the former Function_init which
is now stripped to only those duties, and renamed
Function_getMethodID.

The exception for an unparsable AS gives no details, which is a bit
unhelpful now (when it won't be thrown until an attempt to *use* a
function), but will be less unhelpful once there is a validator
entry point."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,77ef0c22c5c3fe7b7bf31c3ec7f168c5154cafbd,Chapman Flack,2016-04-21T02:05:26Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,340,35,305,"An interim, working state.

The Java replacement for Function_create accomplishes the same
steps as the original, up to but not including building the
method signature and obtaining the JNI method ID. It then returns
to the C code (with the method name as its return value, as a
convenience), and the signature building and method ID retrieval
are still done there for now, by the former Function_init which
is now stripped to only those duties, and renamed
Function_getMethodID.

The exception for an unparsable AS gives no details, which is a bit
unhelpful now (when it won't be thrown until an attempt to *use* a
function), but will be less unhelpful once there is a validator
entry point."
,pljava-so/src/main/c/Function.c,aefefae32f80d775933b34e88e8c99a5ff662278,Chapman Flack,2016-04-21T00:20:17Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,60,56,4,"Complete the Javafication of setupFunctionParams.

Its last step: *another* possible adaptation of the return type,
based this time on an explicit return type at the left end of the
AS spec. This can clobber the one done by parseParameters; probably
that's a case that just hasn't come up in practical use. For now, it
still works that way, in the spirit of reimplementing without
substantive behavior changes at the same time."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,aefefae32f80d775933b34e88e8c99a5ff662278,Chapman Flack,2016-04-21T00:20:17Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,60,56,4,"Complete the Javafication of setupFunctionParams.

Its last step: *another* possible adaptation of the return type,
based this time on an explicit return type at the left end of the
AS spec. This can clobber the one done by parseParameters; probably
that's a case that just hasn't come up in practical use. For now, it
still works that way, in the spirit of reimplementing without
substantive behavior changes at the same time."
,pljava-so/src/main/c/Function.c,ffe41c830c72e1869c599afeeb540c32fea1ede2,Chapman Flack,2020-01-16T02:56:04Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,312,250,62,Add parseParameters return-type adaptation.
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,ffe41c830c72e1869c599afeeb540c32fea1ede2,Chapman Flack,2020-01-16T02:56:04Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,312,250,62,Add parseParameters return-type adaptation.
,pljava-so/src/main/c/Function.c,7916a73e1045520de52088b78f927e1d0f987352,Chapman Flack,2020-01-16T02:13:32Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,289,274,15,"Most of Function_create/init now in Java.

Remaining: the second, ""parseParameters"" type-coercion pass,
generating the method signature and looking up the method."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,7916a73e1045520de52088b78f927e1d0f987352,Chapman Flack,2020-01-16T02:13:32Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,289,274,15,"Most of Function_create/init now in Java.

Remaining: the second, ""parseParameters"" type-coercion pass,
generating the method signature and looking up the method."
,pljava-so/src/main/c/Function.c,ea0ebb7523c55c352460d92fe5e7cecc0c2e22cf,Chapman Flack,2016-04-16T15:44:42Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,12,12,0,Document parseParameters.
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,619bd3c9adb9d1ce894698ce818620e798e5c6d1,Chapman Flack,2016-04-16T04:44:23Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,48,47,1,Is loading classes from Java.
,pljava-so/src/main/c/Function.c,3c21996cd159a975325398f1512b55a5b55e0427,Chapman Flack,2016-04-16T03:56:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,11,8,3,Does use schema name and CALLED_AS_TRIGGER.
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,3c21996cd159a975325398f1512b55a5b55e0427,Chapman Flack,2016-04-16T03:56:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,11,8,3,Does use schema name and CALLED_AS_TRIGGER.
,pljava-so/src/main/c/Function.c,25618287dae5702d30984124aa9143b140dbcba1,Chapman Flack,2016-04-16T03:45:04Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,4,2,2,Confirm setupFunctionParams doesn't use fcinfo.
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,2cf212dfdf189d7eaa215b01e803ad8bd1da7cb2,Chapman Flack,2016-04-16T03:29:43Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,72,71,1,Parse the function spec.
,pljava-so/src/main/c/Function.c,26fadd555e8a04960ea8e5f39cc597b1a4cc24c5,Chapman Flack,2019-03-21T03:07:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,66,63,3,"Prepare to do more of Function_create in Java.

The C code for Function create/parse/init is just hairy enough
to discourage adaptation...."
,pljava/src/main/java/org/postgresql/pljava/internal/Function.java,26fadd555e8a04960ea8e5f39cc597b1a4cc24c5,Chapman Flack,2019-03-21T03:07:30Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,66,63,3,"Prepare to do more of Function_create in Java.

The C code for Function create/parse/init is just hairy enough
to discourage adaptation...."
,pljava-so/src/main/c/Function.c,b67034592ddfb9399d964031b009f00abe36cd99,Chapman Flack,2015-12-06T02:25:20Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:45:48Z,chap@anastigmatix.net,47,32,15,"Give Function_getFunction a simpler contract.

It will now always be true that currentInvocation->function is set
when getFunction successfully returns. Formerly that was true on the
first call when the Function had to be constructed, but would not be
true otherwise, and had to be done later in invoke or invokeTrigger.

Also now retrieve the typeMap only if the function is not a UDT.
It was being stored in func.nonudt and the finalizer would only free it
in the nonUDT case, so setting it in all cases might have been a mistake."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,19c7e8e475de2d2eeeaa63716ecf94822b06bc37,Chapman Flack,2020-02-03T00:43:24Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:43:24Z,chap@anastigmatix.net,1301,1170,131,Merge pull request #250 from feature/master/morelexicals
,pljava-api/src/test/java/LexicalsTest.java,19c7e8e475de2d2eeeaa63716ecf94822b06bc37,Chapman Flack,2020-02-03T00:43:24Z,chap@anastigmatix.net,Chapman Flack,2020-02-03T00:43:24Z,chap@anastigmatix.net,1301,1170,131,Merge pull request #250 from feature/master/morelexicals
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,5384a63c9091dcbcf30b3dfb1c5035abe12ccc85,Chapman Flack,2020-02-02T23:15:32Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T23:15:32Z,chap@anastigmatix.net,277,273,4,"Add Qualified nameFromJava/operatorFromJava

... and make Simple.nameFromJava usable during compilation
with a Messager for diagnostic output. Flesh out some javadoc."
,pljava-api/src/main/java/module-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/SessionManager.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRWriter.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/TriggerNamer.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/package-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/package-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-so/src/main/c/Backend.c,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-so/src/main/c/InstallHelper.c,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-so/src/main/c/PgObject.c,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-so/src/main/include/pljava/InstallHelper.h,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-so/src/main/include/pljava/PgObject.h,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/module-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/elog/ELogFormatter.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/elog/ELogHandler.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/elog/package-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/mbeans/DualStateStatistics.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/mbeans/package-info.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,0a03b6abefc39a971d8c0cf53af6566fb8a6c606,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T16:15:08Z,chap@anastigmatix.net,1346,809,537,Merge pull request #249 from chore/master/java9ify
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/package-info.java,5ee9b6bb3ab93ed83e11478ace90bcdda2b99836,Chapman Flack,2020-02-02T04:44:47Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T04:44:47Z,chap@anastigmatix.net,60,56,4,"Javadoc generation also java9ified

The maven-javadoc-plugin (at the current release, 3.1.1) still lives
in a mostly pre-JPMS world, and boy does it show. Javadoc 9 introduces
handy new options to control what should be documented for a module,
based on what is declared for export in the module descriptor, all
of which can be figured out by javadoc itself. The maven-javadoc-plugin
forces all of that not to work right, by passing an explicit list of
packages, computed the wrong way, which overrides whatever convenient
selection option was passed to javadoc.

Interestingly, though the plugin has not been updated to handle the
new options specific to javadoc 9 (they just have to be passed as
<additionalOption>s), it does have a getPackageNamesRespectingJavaModules
method, which tries to duplicate what javadoc itself would do if passed
--show-packages exported—which would be ok, more or less, as long as
'--show-packages exported' was what you wanted, and if it were done right.
Alas, it doesn't seem to understand you might export a.b and not a.b.c,
so it can end up forcing the documentation of packages that were not
intended as API.

There seems to be one (maybe only one?) roundabout way to get the plugin
not to supply the list of package names, and thereby let javadoc just do
the right stuff it can already do. A fix for a reported bug MJAVADOC-365
tweaked the plugin's executeReport method to suppress the package list
if sourceFileExcludes or sourceFileIncludes are active. So it becomes
necessary to use one of those options.

Even that must be done with care. The list of includes or excludes can't
be empty, or the trick is ignored, but also can't include too much, lest
it once again override javadoc's efforts to do the right thing.

When the includes/excludes are not used, the plugin generates an argfile
by default that names only one source file, the module-info.java. So an
obvious idea would be to add sourceFileIncludes naming only that file.

That doesn't incur any reported errors; it just prevents javadoc from
running at all. Maven simply completes all the other 'site' activities,
says nothing at all about javadoc, and calls it success.

So the other almost-as-obvious workaround idea is to add
sourceFileExcludes, and specify some file that wasn't going to be
included anyway. But that causes a full enumeration of the other source
files to be generated and passed to javadoc, overriding its efforts to
do the right thing.

So it becomes necessary to use sourceFileExcludes with a wildcard pattern
to exclude everything (except the module-info.java file), producing the
same list of files (just one file) that was produced by default, while
also suppressing the list of packages. The pattern used here just excludes
all .java files under org/ (which is where all of them are, except for
module-info.java at top level).

That does the needed trick, but ends up leaving javadoc not finding any
classes to document at all; that is easily fixed with a --module option.

In passing, clean up three errors in javadoc comments that were flagged
by javadoc, once the excitement of just getting it to work died down,
and fix a comment that still referred to Java pre-9."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,5ee9b6bb3ab93ed83e11478ace90bcdda2b99836,Chapman Flack,2020-02-02T04:44:47Z,chap@anastigmatix.net,Chapman Flack,2020-02-02T04:44:47Z,chap@anastigmatix.net,60,56,4,"Javadoc generation also java9ified

The maven-javadoc-plugin (at the current release, 3.1.1) still lives
in a mostly pre-JPMS world, and boy does it show. Javadoc 9 introduces
handy new options to control what should be documented for a module,
based on what is declared for export in the module descriptor, all
of which can be figured out by javadoc itself. The maven-javadoc-plugin
forces all of that not to work right, by passing an explicit list of
packages, computed the wrong way, which overrides whatever convenient
selection option was passed to javadoc.

Interestingly, though the plugin has not been updated to handle the
new options specific to javadoc 9 (they just have to be passed as
<additionalOption>s), it does have a getPackageNamesRespectingJavaModules
method, which tries to duplicate what javadoc itself would do if passed
--show-packages exported—which would be ok, more or less, as long as
'--show-packages exported' was what you wanted, and if it were done right.
Alas, it doesn't seem to understand you might export a.b and not a.b.c,
so it can end up forcing the documentation of packages that were not
intended as API.

There seems to be one (maybe only one?) roundabout way to get the plugin
not to supply the list of package names, and thereby let javadoc just do
the right stuff it can already do. A fix for a reported bug MJAVADOC-365
tweaked the plugin's executeReport method to suppress the package list
if sourceFileExcludes or sourceFileIncludes are active. So it becomes
necessary to use one of those options.

Even that must be done with care. The list of includes or excludes can't
be empty, or the trick is ignored, but also can't include too much, lest
it once again override javadoc's efforts to do the right thing.

When the includes/excludes are not used, the plugin generates an argfile
by default that names only one source file, the module-info.java. So an
obvious idea would be to add sourceFileIncludes naming only that file.

That doesn't incur any reported errors; it just prevents javadoc from
running at all. Maven simply completes all the other 'site' activities,
says nothing at all about javadoc, and calls it success.

So the other almost-as-obvious workaround idea is to add
sourceFileExcludes, and specify some file that wasn't going to be
included anyway. But that causes a full enumeration of the other source
files to be generated and passed to javadoc, overriding its efforts to
do the right thing.

So it becomes necessary to use sourceFileExcludes with a wildcard pattern
to exclude everything (except the module-info.java file), producing the
same list of files (just one file) that was produced by default, while
also suppressing the list of packages. The pattern used here just excludes
all .java files under org/ (which is where all of them are, except for
module-info.java at top level).

That does the needed trick, but ends up leaving javadoc not finding any
classes to document at all; that is easily fixed with a --module option.

In passing, clean up three errors in javadoc comments that were flagged
by javadoc, once the excitement of just getting it to work died down,
and fix a comment that still referred to Java pre-9."
,pljava-so/src/main/c/Backend.c,78fbd4cdd9c06560ab6720e640810aa58131d508,Chapman Flack,2020-02-01T04:50:08Z,chap@anastigmatix.net,Chapman Flack,2020-02-01T04:50:08Z,chap@anastigmatix.net,125,117,8,"Make empty classpath mean no classpath

Not as difficult as I had anticipated. The getSystemClassLoader apidoc
https://docs.oracle.com/javase/9/docs/api/java/lang/ClassLoader.html#getSystemClassLoader--
has this to say:

""... the system property ""java.class.path"" during early initialization
of the VM. If the system property is not defined, or its value is
an empty string, then there is no class path when the initial module
is a module on the application module path, i.e. a named module.
If the initial module is not on the application module path then the
class path defaults to the current working directory.""

So, whether an empty java.class.path means ""current directory"" or
""there is no class path"" comes down to whether ""the initial module""
is a named module. What that means, more precisely, is here:
http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/65464a307408/src/java.base/share/classes/jdk/internal/loader/ClassLoaders.java#l75
which looks for a non-null value of jdk.module.main.

Sure enough, adding a -Djdk.module.main=org.postgresql.pljava to the
JVM launch options does the trick, ensuring that the default, empty,
value of java.class.path means ""there is no class path"" rather than
""trust random .class files you find in the datadir"".

Meanwhile, if a site for some reason wants to load some classes from
the datadir, simply adding -Djava.class.path=. will accomplish that,
just as one would naïvely expect.

As the need for a site to specify a class (as opposed to module) path
should be rare, and it can be done with -Djava.class.path= added in
pljava.vmoptions, it doesn't seem pressing to add any dedicated new
GUC for it.

In passing, just a few other doc tweaks of minor notes obsoleted
by Java 9."
,pljava-so/src/main/c/Backend.c,fcc16a35dad54832080024ef8beffcce63ef4d0e,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,171,99,72,"pljava.classpath => pljava.module_path

This works differently enough now that it should be reflected
in a name change for the setting. It should now have two jars
(the pljava internals jar and the pljava-api jar), separated
by the correct path separator for the platform. As before, the
default value should be right, if the jars are unpacked in the
expected places.

There may yet be uses in the field where something else was added
to pljava.classpath, and where the something-else possibly won't
work if placed on the module path. For such a case, there might
still be an argument for re-adding a GUC setting to control an
old-fashioned class path ... probably spelled pljava.class_path
to be closer to the modern Java usage and avoid confusion with the
old setting. That has not been done here either.

Even if that is not done, some thought needs to be given to what
the JVM's class-path should be set to when no class-path is desired.
It should be given a default value that prevents any classes being
found there, which is surprisingly hard. If left empty, it simply
means the current directory, and will be distractable by anything
named *.class in the PostgreSQL backend's CWD. If set to the name
of a nonexistent jar, it complains that the jar doesn't exist, and
refuses to start. It could be set to a directory guaranteed to
contain no .class files, but how to reliably arrange that?"
,pljava-so/src/main/c/InstallHelper.c,fcc16a35dad54832080024ef8beffcce63ef4d0e,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,171,99,72,"pljava.classpath => pljava.module_path

This works differently enough now that it should be reflected
in a name change for the setting. It should now have two jars
(the pljava internals jar and the pljava-api jar), separated
by the correct path separator for the platform. As before, the
default value should be right, if the jars are unpacked in the
expected places.

There may yet be uses in the field where something else was added
to pljava.classpath, and where the something-else possibly won't
work if placed on the module path. For such a case, there might
still be an argument for re-adding a GUC setting to control an
old-fashioned class path ... probably spelled pljava.class_path
to be closer to the modern Java usage and avoid confusion with the
old setting. That has not been done here either.

Even if that is not done, some thought needs to be given to what
the JVM's class-path should be set to when no class-path is desired.
It should be given a default value that prevents any classes being
found there, which is surprisingly hard. If left empty, it simply
means the current directory, and will be distractable by anything
named *.class in the PostgreSQL backend's CWD. If set to the name
of a nonexistent jar, it complains that the jar doesn't exist, and
refuses to start. It could be set to a directory guaranteed to
contain no .class files, but how to reliably arrange that?"
,pljava-so/src/main/c/PgObject.c,fcc16a35dad54832080024ef8beffcce63ef4d0e,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,171,99,72,"pljava.classpath => pljava.module_path

This works differently enough now that it should be reflected
in a name change for the setting. It should now have two jars
(the pljava internals jar and the pljava-api jar), separated
by the correct path separator for the platform. As before, the
default value should be right, if the jars are unpacked in the
expected places.

There may yet be uses in the field where something else was added
to pljava.classpath, and where the something-else possibly won't
work if placed on the module path. For such a case, there might
still be an argument for re-adding a GUC setting to control an
old-fashioned class path ... probably spelled pljava.class_path
to be closer to the modern Java usage and avoid confusion with the
old setting. That has not been done here either.

Even if that is not done, some thought needs to be given to what
the JVM's class-path should be set to when no class-path is desired.
It should be given a default value that prevents any classes being
found there, which is surprisingly hard. If left empty, it simply
means the current directory, and will be distractable by anything
named *.class in the PostgreSQL backend's CWD. If set to the name
of a nonexistent jar, it complains that the jar doesn't exist, and
refuses to start. It could be set to a directory guaranteed to
contain no .class files, but how to reliably arrange that?"
,pljava-so/src/main/include/pljava/InstallHelper.h,fcc16a35dad54832080024ef8beffcce63ef4d0e,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,171,99,72,"pljava.classpath => pljava.module_path

This works differently enough now that it should be reflected
in a name change for the setting. It should now have two jars
(the pljava internals jar and the pljava-api jar), separated
by the correct path separator for the platform. As before, the
default value should be right, if the jars are unpacked in the
expected places.

There may yet be uses in the field where something else was added
to pljava.classpath, and where the something-else possibly won't
work if placed on the module path. For such a case, there might
still be an argument for re-adding a GUC setting to control an
old-fashioned class path ... probably spelled pljava.class_path
to be closer to the modern Java usage and avoid confusion with the
old setting. That has not been done here either.

Even if that is not done, some thought needs to be given to what
the JVM's class-path should be set to when no class-path is desired.
It should be given a default value that prevents any classes being
found there, which is surprisingly hard. If left empty, it simply
means the current directory, and will be distractable by anything
named *.class in the PostgreSQL backend's CWD. If set to the name
of a nonexistent jar, it complains that the jar doesn't exist, and
refuses to start. It could be set to a directory guaranteed to
contain no .class files, but how to reliably arrange that?"
,pljava-so/src/main/include/pljava/PgObject.h,fcc16a35dad54832080024ef8beffcce63ef4d0e,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-27T01:58:42Z,chap@anastigmatix.net,171,99,72,"pljava.classpath => pljava.module_path

This works differently enough now that it should be reflected
in a name change for the setting. It should now have two jars
(the pljava internals jar and the pljava-api jar), separated
by the correct path separator for the platform. As before, the
default value should be right, if the jars are unpacked in the
expected places.

There may yet be uses in the field where something else was added
to pljava.classpath, and where the something-else possibly won't
work if placed on the module path. For such a case, there might
still be an argument for re-adding a GUC setting to control an
old-fashioned class path ... probably spelled pljava.class_path
to be closer to the modern Java usage and avoid confusion with the
old setting. That has not been done here either.

Even if that is not done, some thought needs to be given to what
the JVM's class-path should be set to when no class-path is desired.
It should be given a default value that prevents any classes being
found there, which is surprisingly hard. If left empty, it simply
means the current directory, and will be distractable by anything
named *.class in the PostgreSQL backend's CWD. If set to the name
of a nonexistent jar, it complains that the jar doesn't exist, and
refuses to start. It could be set to a directory guaranteed to
contain no .class files, but how to reliably arrange that?"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,b62b9528935bcb3b4bd570debfa67f1f7018eb71,Chapman Flack,2020-01-12T00:33:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,159,139,20,"Make Lexicals.Identifier serializable

One may want to use Identifier in a custom Principal subclass, and
any Principal has to implement Serializable (if it is to be used
in a Subject, anyway). Perhaps only Simple and its subclasses
needed to be made serializable, but the rest of the Identifier
hierarchy wasn't much harder.

Add Pseudo, intended as a principled approach to the special
identifiers that represent, say, PUBLIC as a privilege grantee."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,ec0bbac8d092ff6dfa9bc36335dd68f2adade769,Chapman Flack,2020-01-12T00:29:35Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,96,59,37,"Systematize Identifier's deparse() and toString()

deparse() now takes a Charset argument, for the purpose of
verifying that the identifier can be successfully written in
the specified charset (or, for the future, the purpose of
Unicode-escaping it if necessary to make sure it can be
written; for now, it will just complain).

toString() is now exactly deparse(UTF_8)."
,pljava-api/src/test/java/LexicalsTest.java,ec0bbac8d092ff6dfa9bc36335dd68f2adade769,Chapman Flack,2020-01-12T00:29:35Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,96,59,37,"Systematize Identifier's deparse() and toString()

deparse() now takes a Charset argument, for the purpose of
verifying that the identifier can be successfully written in
the specified charset (or, for the future, the purpose of
Unicode-escaping it if necessary to make sure it can be
written; for now, it will just complain).

toString() is now exactly deparse(UTF_8)."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,45140c33e563f458eb9aedf06ebe2855109b90be,Chapman Flack,2019-09-19T02:27:45Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,328,249,79,Identifier.Operator
,pljava-api/src/test/java/LexicalsTest.java,45140c33e563f458eb9aedf06ebe2855109b90be,Chapman Flack,2019-09-19T02:27:45Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,328,249,79,Identifier.Operator
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,a8cce0a52b9ebec08976dc4b5018650d8183b8c2,Chapman Flack,2019-09-02T02:30:30Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,23,21,2,Identifier.Qualified.fromSimplePair()
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,27d87fde49f98c19a6ab70f1edbb1ec1bc809e75,Chapman Flack,2019-06-15T19:56:45Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,63,62,1,Identifier.Simple.fromJava()
,pljava-api/src/test/java/LexicalsTest.java,27d87fde49f98c19a6ab70f1edbb1ec1bc809e75,Chapman Flack,2019-06-15T19:56:45Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,63,62,1,Identifier.Simple.fromJava()
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,12b7dd34a52cd4d81de8ab9882791c2cbaf24f6d,Chapman Flack,2019-03-24T19:45:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,56,55,1,More Identifier stuff
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,64b82bfdc75eebeadccb9c0c693c56507d79dc43,Chapman Flack,2019-03-24T18:57:28Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,240,240,0,Lexicals now with SEPARATOR handling.
,pljava-api/src/test/java/LexicalsTest.java,64b82bfdc75eebeadccb9c0c693c56507d79dc43,Chapman Flack,2019-03-24T18:57:28Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,240,240,0,Lexicals now with SEPARATOR handling.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,2c6d5a8f9780ad8bdd7bd7c8fbc9324eb72e6b24,Chapman Flack,2019-03-24T19:02:41Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:07:42Z,chap@anastigmatix.net,253,169,84,Divide Identifier into Simple and Qualified.
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,6f3d7a7b5b7bcb9ec3fb0647577e8a89ef93343f,Chapman Flack,2020-01-18T02:53:29Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,4,2,2,Java 9 introduces Class.getPackageName()
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,6f3d7a7b5b7bcb9ec3fb0647577e8a89ef93343f,Chapman Flack,2020-01-18T02:53:29Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,4,2,2,Java 9 introduces Class.getPackageName()
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4d8f5903ba750fefbd2c8d35422e23c6399457d0,Chapman Flack,2020-01-18T01:44:42Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,105,69,36,"Adopt VarHandle in SQLXMLImpl

Perhaps a long run for a short slide. If memory serves, the atomics
were used here mostly for a concise coding idiom (e.g. getAndSet(null)),
which doesn't very much survive a conversion to VarHandles. The actual
needed concurrency properties could likely be achieved in much less
exotic ways.

In passing, catch one bit of overlooked java7ification (Charset.forName
on a standard charset)."
,pljava-api/src/main/java/module-info.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRProcessor.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/DDRWriter.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/TriggerNamer.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/processing/package-info.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,5f7c2f10a8c17f0bc447a26f672c626530572606,Chapman Flack,2020-01-18T00:28:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,79,49,30,"Dedicate a non-exported package to the Processor

The SQL-generating DDR processor needs to be in the pljava-api
module so it can be provided to the java compiler, which uses
it. But its implementation really isn't part of PL/Java's API.

The Lexicals class has apparently been found useful by some
developers, so it gets to stay in the sqlgen package and be
exported. The rest of the annotation processor gets a new,
non-exported package."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,3dfbc77e06aa0bc9bae4419e099e8b8939e2badd,Chapman Flack,2020-01-15T00:41:37Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,75,31,44,"Replace Method with MethodHandle in class loader

... for the OpenJ9 class sharing integration. Method gets
access-checked on every reflective use; MethodHandle gets
checked once at creation only.

Technically, this is just java7ifying, not java9ifying,
but got overlooked in the java7ify branch."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,c319044465065df5c404abcc0c0ccb8b5cee6d75,Chapman Flack,2020-01-14T02:31:54Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,126,63,63,"Adopt VarHandle in DualState

Rather than a separately-allocated AtomicInteger held by
every DualState, prefer a simple primitive int field, and
bang on it with VarHandles."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,a2de7b4592d257c9cb32090a843c7ebd47861e4b,Chapman Flack,2020-01-13T04:57:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,18,4,14,Replace the ersatz reachabilityFence in DualState
,pljava/src/main/java/module-info.java,9fe3c503ec80816c84d0692df590952afa9c59b9,Chapman Flack,2020-01-13T04:36:58Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,88,66,22,"Dedicate an exported package to mbeans

Only the interface has to go there. It seems it must get an
unqualified export, as whatever internal machinery does the
querying shows up as some unnamed@1322ba3d-ish mystery module.

And with that, everything that worked pre-java9ify seems again
working. I was honestly expecting that to be harder."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,9fe3c503ec80816c84d0692df590952afa9c59b9,Chapman Flack,2020-01-13T04:36:58Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,88,66,22,"Dedicate an exported package to mbeans

Only the interface has to go there. It seems it must get an
unqualified export, as whatever internal machinery does the
querying shows up as some unnamed@1322ba3d-ish mystery module.

And with that, everything that worked pre-java9ify seems again
working. I was honestly expecting that to be harder."
,pljava/src/main/java/org/postgresql/pljava/mbeans/DualStateStatistics.java,9fe3c503ec80816c84d0692df590952afa9c59b9,Chapman Flack,2020-01-13T04:36:58Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,88,66,22,"Dedicate an exported package to mbeans

Only the interface has to go there. It seems it must get an
unqualified export, as whatever internal machinery does the
querying shows up as some unnamed@1322ba3d-ish mystery module.

And with that, everything that worked pre-java9ify seems again
working. I was honestly expecting that to be harder."
,pljava/src/main/java/org/postgresql/pljava/mbeans/package-info.java,9fe3c503ec80816c84d0692df590952afa9c59b9,Chapman Flack,2020-01-13T04:36:58Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,88,66,22,"Dedicate an exported package to mbeans

Only the interface has to go there. It seems it must get an
unqualified export, as whatever internal machinery does the
querying shows up as some unnamed@1322ba3d-ish mystery module.

And with that, everything that worked pre-java9ify seems again
working. I was honestly expecting that to be harder."
,pljava/src/main/java/module-info.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/elog/ELogFormatter.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/elog/ELogHandler.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/elog/package-info.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,f31d134e1637c5b708af3dc9399b8f57f4cfea73,Chapman Flack,2020-01-13T03:57:43Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,62,50,12,"Dedicate an exported package to elog

The java.logging module has to be fed its configuration as
names in a properties file, so it has to be able to instantiate
what it sees there."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,928fab0ca0f46074047657985f30dd28a1339ea9,Chapman Flack,2020-01-13T01:19:16Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,98,2,96,"Named-module version info isn't found in package

As seen in the Java 9 API docs for java.lang.Package:

Implementation Note:
The builtin class loaders do not explicitly define Package
objects for packages in named modules. Instead those packages
are automatically defined and have no specification and
implementation versioning information."
,pljava-so/src/main/c/Backend.c,403d8aa2289668449290e3db5b363072ef0daee3,Chapman Flack,2020-01-18T02:58:00Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,95,62,33,That got closer for a first try than I expected
,pljava-so/src/main/c/InstallHelper.c,403d8aa2289668449290e3db5b363072ef0daee3,Chapman Flack,2020-01-18T02:58:00Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,95,62,33,That got closer for a first try than I expected
,pljava-so/src/main/include/pljava/InstallHelper.h,403d8aa2289668449290e3db5b363072ef0daee3,Chapman Flack,2020-01-18T02:58:00Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,95,62,33,That got closer for a first try than I expected
,pljava-api/src/main/java/module-info.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava-api/src/main/java/org/postgresql/pljava/SessionManager.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/module-info.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,0772030732815785b971c0ff420bca0503444cab,Chapman Flack,2020-01-12T21:24:22Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,108,54,54,"Chase some compiler warnings

There's been an @Deprecated since Java 1.5, but the Java 9 API
first takes the position that it shouldn't be omitted if there
is a @deprecated javadoc tag, and javac agrees.

A few other warnings, leaving a bunch of 'unchecked' for later."
,pljava-api/src/main/java/module-info.java,dd91fca7b92b9f4a541f4ce3b7e8d531b6ed79ef,Chapman Flack,2020-01-12T03:00:49Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,100,54,46,"POM release specs and module-info files

Produces a ""successful"" (well, completing) build, wherein the
annotation processor never gets run, so no .ddr files get made.

Nothing done yet to split the shaded pljava{,-api} jar into
two modular jars, nor in Backend.c to supply them correctly."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,dd91fca7b92b9f4a541f4ce3b7e8d531b6ed79ef,Chapman Flack,2020-01-12T03:00:49Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,100,54,46,"POM release specs and module-info files

Produces a ""successful"" (well, completing) build, wherein the
annotation processor never gets run, so no .ddr files get made.

Nothing done yet to split the shaded pljava{,-api} jar into
two modular jars, nor in Backend.c to supply them correctly."
,pljava/src/main/java/module-info.java,dd91fca7b92b9f4a541f4ce3b7e8d531b6ed79ef,Chapman Flack,2020-01-12T03:00:49Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T05:01:08Z,chap@anastigmatix.net,100,54,46,"POM release specs and module-info files

Produces a ""successful"" (well, completing) build, wherein the
annotation processor never gets run, so no .ddr files get made.

Nothing done yet to split the shaded pljava{,-api} jar into
two modular jars, nor in Backend.c to supply them correctly."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/package-info.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-so/src/main/c/Backend.c,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-so/src/main/c/JNICalls.c,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava-so/src/main/c/type/Oid.c,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Privilege.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,61e6098b3f0cad4a76b33b99dd500ccf5de2f8b1,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:57:08Z,chap@anastigmatix.net,2749,2088,661,"Merge pull request #248 from chore/master/java8ify

Highlights: Java 8 lambdas allow a much more concise idiom for PL/Java's
many downcalls into C/PostgreSQL, which in turn makes possible more
approaches to the thread-exclusion problem."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,3437efd671b18468aadf576b74268b3e790341eb,Chapman Flack,2020-01-20T04:36:26Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:44:40Z,chap@anastigmatix.net,326,310,16,"Complete Checked's set of of() methods

They can be handy for writing and using lambda expressions
in places where the grammar doesn't allow them naked, or where
the compiler doesn't infer the intended type.

In the same breath, add cleaner versions of AccessController's
doPrivileged... methods. It's exhausting to use that API.

These wrapper methods must never ever ever be exported from this
module, because the real methods on AccessController will see
these wrappers as the caller, and apply this module's own privs.
But as long as they are only used within this module anyway, that
isn't a problem.

# Conflicts:
#	pljava/src/main/java/org/postgresql/pljava/internal/Checked.java"
,pljava/src/main/java/org/postgresql/pljava/internal/Privilege.java,3437efd671b18468aadf576b74268b3e790341eb,Chapman Flack,2020-01-20T04:36:26Z,chap@anastigmatix.net,Chapman Flack,2020-01-20T04:44:40Z,chap@anastigmatix.net,326,310,16,"Complete Checked's set of of() methods

They can be handy for writing and using lambda expressions
in places where the grammar doesn't allow them naked, or where
the compiler doesn't infer the intended type.

In the same breath, add cleaner versions of AccessController's
doPrivileged... methods. It's exhausting to use that API.

These wrapper methods must never ever ever be exported from this
module, because the real methods on AccessController will see
these wrappers as the caller, and apply this module's own privs.
But as long as they are only used within this module anyway, that
isn't a problem.

# Conflicts:
#	pljava/src/main/java/org/postgresql/pljava/internal/Checked.java"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,9951c7d7baabd69f1c446d698dde12bea89fe16b,Chapman Flack,2020-01-12T00:16:59Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,2,1,1,Bump DDRProcessor's SourceVersion to 8
,pljava-so/src/main/c/Backend.c,ece079f342e7f88f509223082c9e97b23cbe916f,Chapman Flack,2020-01-17T05:09:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,222,164,58,"Add 'throw' to pljava.java_thread_pg_entry enum

Like 'error', it prevents any thread other than the primordial one
from using doInPG(). Unlike 'error', it detects the case early (in
doInPG() itself in Java, before any crossing of the JNI boundary),
and gets both the C and Java code out of the business of taking and
releasing THREADLOCK."
,pljava-so/src/main/c/JNICalls.c,ece079f342e7f88f509223082c9e97b23cbe916f,Chapman Flack,2020-01-17T05:09:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,222,164,58,"Add 'throw' to pljava.java_thread_pg_entry enum

Like 'error', it prevents any thread other than the primordial one
from using doInPG(). Unlike 'error', it detects the case early (in
doInPG() itself in Java, before any crossing of the JNI boundary),
and gets both the C and Java code out of the business of taking and
releasing THREADLOCK."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,ece079f342e7f88f509223082c9e97b23cbe916f,Chapman Flack,2020-01-17T05:09:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,222,164,58,"Add 'throw' to pljava.java_thread_pg_entry enum

Like 'error', it prevents any thread other than the primordial one
from using doInPG(). Unlike 'error', it detects the case early (in
doInPG() itself in Java, before any crossing of the JNI boundary),
and gets both the C and Java code out of the business of taking and
releasing THREADLOCK."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,1fb52dd5a1e9e0d939652ba5738f8e8e00cf90d3,Chapman Flack,2020-01-11T20:15:54Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,177,121,56,"Use Java 8 LongAdder for DualState stats

Revert this if it proves expensive. Without it, the stats
might be less than precise, but lower overhead."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,f9f795f8ee5671bbeb0574d69f29527bc6e0004d,Chapman Flack,2019-10-05T02:58:52Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,3,2,1,Disheartening to watch javac 8 get this wrong.
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,c3f833b4fd2484249a6e8ba2cfdc9b034560f368,Chapman Flack,2019-06-06T01:05:23Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,490,179,311,"Convert the remaining sites that are obvious ...

... including those that have void return type, or throw checked
exceptions."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,71f9254608dfd5312728cb76ddbe71f5950c230a,Chapman Flack,2019-10-05T19:37:17Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,237,125,112,"Begin to centralize syncs-on-backend.

The doInPG method accepts 'checked' analogues of the standard functional
interfaces in java.util.function.

It also has overloads specialized for primitive return types. This isn't
strictly necessary, as the compiler is happy to add unboxing at a call
site and use the reference-returning version, but the specialized
versions allow it to avoid that.

This should allow finishing up the conversions of synchronized blocks
including those that throw checked exceptions.

In Java 8, javac has sprouted the ability to make JNI header files,
leaving less need for javah ... but not exactly *no* need, because javah
can extract the static final fields we need from the JDK class
java.sql.Types, something it's not obvious can be done with javac -h.
Happily, as of 2019, there have been no changes to the java.sql.Types
constants since Java 8; as we are now making Java 8 the minimum, just
unconditionally use the fallback java_sql_Types.h file that was
introduced in af0577a.

That saves the fuss of keeping the nar-maven-plugin's javah goal working
now that some actual Java 8 features, like lambdas, are in the class
files. The plugin tries to use BCEL to find out whether the classes
to be h'd contain anything that needs h'ing; in 3.2.3 it only considers
native methods, not @Native fields, and uses a version of BCEL that chokes
on such Java 8 features. Updating the plugin to 3.6.0 would fix the BCEL
issue, but for the simple purposes here, it's as easy to stop using javah.

It seems that the java.sql.Types constants are only used in Oid.c ...
find another way to do what that code's doing, and maybe the build can be
simplified further.

The version of maven-compiler-plugin should be updated one day; 2.5.1
only supports the (since deprecated) compilerArguments element. When it
is updated, the pom should be adjusted to use compilerArgs instead."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,71f9254608dfd5312728cb76ddbe71f5950c230a,Chapman Flack,2019-10-05T19:37:17Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,237,125,112,"Begin to centralize syncs-on-backend.

The doInPG method accepts 'checked' analogues of the standard functional
interfaces in java.util.function.

It also has overloads specialized for primitive return types. This isn't
strictly necessary, as the compiler is happy to add unboxing at a call
site and use the reference-returning version, but the specialized
versions allow it to avoid that.

This should allow finishing up the conversions of synchronized blocks
including those that throw checked exceptions.

In Java 8, javac has sprouted the ability to make JNI header files,
leaving less need for javah ... but not exactly *no* need, because javah
can extract the static final fields we need from the JDK class
java.sql.Types, something it's not obvious can be done with javac -h.
Happily, as of 2019, there have been no changes to the java.sql.Types
constants since Java 8; as we are now making Java 8 the minimum, just
unconditionally use the fallback java_sql_Types.h file that was
introduced in af0577a.

That saves the fuss of keeping the nar-maven-plugin's javah goal working
now that some actual Java 8 features, like lambdas, are in the class
files. The plugin tries to use BCEL to find out whether the classes
to be h'd contain anything that needs h'ing; in 3.2.3 it only considers
native methods, not @Native fields, and uses a version of BCEL that chokes
on such Java 8 features. Updating the plugin to 3.6.0 would fix the BCEL
issue, but for the simple purposes here, it's as easy to stop using javah.

It seems that the java.sql.Types constants are only used in Oid.c ...
find another way to do what that code's doing, and maybe the build can be
simplified further.

The version of maven-compiler-plugin should be updated one day; 2.5.1
only supports the (since deprecated) compilerArguments element. When it
is updated, the pom should be adjusted to use compilerArgs instead."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,71f9254608dfd5312728cb76ddbe71f5950c230a,Chapman Flack,2019-10-05T19:37:17Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:07Z,chap@anastigmatix.net,237,125,112,"Begin to centralize syncs-on-backend.

The doInPG method accepts 'checked' analogues of the standard functional
interfaces in java.util.function.

It also has overloads specialized for primitive return types. This isn't
strictly necessary, as the compiler is happy to add unboxing at a call
site and use the reference-returning version, but the specialized
versions allow it to avoid that.

This should allow finishing up the conversions of synchronized blocks
including those that throw checked exceptions.

In Java 8, javac has sprouted the ability to make JNI header files,
leaving less need for javah ... but not exactly *no* need, because javah
can extract the static final fields we need from the JDK class
java.sql.Types, something it's not obvious can be done with javac -h.
Happily, as of 2019, there have been no changes to the java.sql.Types
constants since Java 8; as we are now making Java 8 the minimum, just
unconditionally use the fallback java_sql_Types.h file that was
introduced in af0577a.

That saves the fuss of keeping the nar-maven-plugin's javah goal working
now that some actual Java 8 features, like lambdas, are in the class
files. The plugin tries to use BCEL to find out whether the classes
to be h'd contain anything that needs h'ing; in 3.2.3 it only considers
native methods, not @Native fields, and uses a version of BCEL that chokes
on such Java 8 features. Updating the plugin to 3.6.0 would fix the BCEL
issue, but for the simple purposes here, it's as easy to stop using javah.

It seems that the java.sql.Types constants are only used in Oid.c ...
find another way to do what that code's doing, and maybe the build can be
simplified further.

The version of maven-compiler-plugin should be updated one day; 2.5.1
only supports the (since deprecated) compilerArguments element. When it
is updated, the pom should be adjusted to use compilerArgs instead."
,pljava/src/main/java/org/postgresql/pljava/internal/Checked.java,2851fc80df577eb6e1eed11da401710ddb69ec9b,Chapman Flack,2020-01-17T05:32:03Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:32:03Z,chap@anastigmatix.net,1194,1194,0,"Functional interfaces handling checked exceptions.

The inferred exception type doesn't stay a union; it gets replaced
by the nearest common supertype, which is not as handy as it would
have been.

A composed() static function can be written, but it's not clear how
to do instance methods like andThen() and compose() analogously to
java.util.function.Function. The type inference seems to fall all
over itself.

Includes an experiment in wrapping these checked-exception versions
as the regular java.util.function no-checked-exception versions, using
an idiom first described by Lukas Eder that does not actually wrap
checked exceptions, but simply flies them under javac's radar until
they can be surfaced again by ederUnwrap().

This needs more testing and way more documentation, and a lot of
thought as to what situations might be appropriate for its use, if any.

Also, as the Java API lacks primitive Consumer/Supplier/Optional classes
for byte, short, char, float, and some of them for boolean, add some,
to allow a more orthogonal API for access to datum values.

These new ones are Checked flavors, though, because why not?
And the Consumers don't have andThen() methods; just use lambdas."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,85480fca98692163f90737ecc92ab33073f7e48a,Chapman Flack,2020-01-17T01:01:36Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,30,5,25,The various examples and DDR conditionals
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,85480fca98692163f90737ecc92ab33073f7e48a,Chapman Flack,2020-01-17T01:01:36Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,30,5,25,The various examples and DDR conditionals
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/package-info.java,85480fca98692163f90737ecc92ab33073f7e48a,Chapman Flack,2020-01-17T01:01:36Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,30,5,25,The various examples and DDR conditionals
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,f4d352bc840372fd6dad1f0a4e500b11609b2f3b,Chapman Flack,2019-03-10T21:58:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,125,22,103,"Low-hanging fruit.

Don't forget the various examples and DDR conditionals."
,pljava-so/src/main/c/type/Oid.c,f4d352bc840372fd6dad1f0a4e500b11609b2f3b,Chapman Flack,2019-03-10T21:58:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,125,22,103,"Low-hanging fruit.

Don't forget the various examples and DDR conditionals."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f4d352bc840372fd6dad1f0a4e500b11609b2f3b,Chapman Flack,2019-03-10T21:58:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,125,22,103,"Low-hanging fruit.

Don't forget the various examples and DDR conditionals."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,f4d352bc840372fd6dad1f0a4e500b11609b2f3b,Chapman Flack,2019-03-10T21:58:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:20:45Z,chap@anastigmatix.net,125,22,103,"Low-hanging fruit.

Don't forget the various examples and DDR conditionals."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,270f19409322d6ce84cf503a5141e1325dcda837,Chapman Flack,2020-01-17T05:16:28Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:17:04Z,chap@anastigmatix.net,2,1,1,"Correct OpenJ9 workaround for pre-Java-9

The preceding commit prematurely pushed a Java >= 9,
VarHandle-based version of the workaround. Replace it with
the AtomicInteger version and backpatch to 1.5.x."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,813eac3bd657f3c0d6112935a04bf7126283bac3,Chapman Flack,2020-01-17T05:16:28Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T05:16:28Z,chap@anastigmatix.net,2,1,1,"Correct OpenJ9 workaround for pre-Java-9

The preceding commit prematurely pushed a Java >= 9,
VarHandle-based version of the workaround. Replace it with
the AtomicInteger version and backpatch to 1.5.x."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,57134a0587544c935821aadf31bcd1a9fd5d1cd3,Chapman Flack,2020-01-17T00:04:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T00:08:31Z,chap@anastigmatix.net,17,14,3,"OpenJ9 calls Reference.clear() from enqueue()?!

Therefore on OpenJ9 one doesn't get very far if DualState
overrides clear() to assert that no one calls it.

So, weaken the assertion to allow the call if the instance
really has been JAVA_RELEASED. This should happen nowhere
but on OpenJ9.

The behavior was added for Java 9 (but in the hg.openjdk.java.net
sources, the reference is cleared ""by magic"" similarly to when the
GC does it, while the variant used for OpenJ9 calls the 'clear'
virtual method).

This will have to be backpatched to 1.5, which is advertised
as usable on newer JVMs and on OpenJ9.

See https://github.com/AdoptOpenJDK/openjdk-support/issues/42

Backpatch of a6a5708."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,6322fb6a71ed1940279d84384acee4baaa80fefc,Chapman Flack,2020-01-16T23:58:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T00:07:34Z,chap@anastigmatix.net,8,3,5,"Unreported bugs in DDRProcessor

No reports from the field; discovered during during development.

Backpatch of 69f5c30."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,a6a57081706791ff7ce148a4b86ea2772c365ab8,Chapman Flack,2020-01-17T00:04:09Z,chap@anastigmatix.net,Chapman Flack,2020-01-17T00:04:09Z,chap@anastigmatix.net,17,14,3,"OpenJ9 calls Reference.clear() from enqueue()?!

Therefore on OpenJ9 one doesn't get very far if DualState
overrides clear() to assert that no one calls it.

So, weaken the assertion to allow the call if the instance
really has been JAVA_RELEASED. This should happen nowhere
but on OpenJ9.

The behavior was added for Java 9 (but in the hg.openjdk.java.net
sources, the reference is cleared ""by magic"" similarly to when the
GC does it, while the variant used for OpenJ9 calls the 'clear'
virtual method).

This will have to be backpatched to 1.5, which is advertised
as usable on newer JVMs and on OpenJ9.

See https://github.com/AdoptOpenJDK/openjdk-support/issues/42"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,69f5c305821f7e8559337d4eb474bfcc943c8543,Chapman Flack,2020-01-16T23:58:20Z,chap@anastigmatix.net,Chapman Flack,2020-01-16T23:58:20Z,chap@anastigmatix.net,8,3,5,"Unreported bugs in DDRProcessor

No reports from the field; discovered during during development.
Should be backpatched to 1.5.x."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,485cb54fc9e09a76f8a82c7cca1b0df757692ed1,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,77,18,59,More java7ify: multi-catch and SourceVersion
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,485cb54fc9e09a76f8a82c7cca1b0df757692ed1,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,77,18,59,More java7ify: multi-catch and SourceVersion
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,485cb54fc9e09a76f8a82c7cca1b0df757692ed1,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,77,18,59,More java7ify: multi-catch and SourceVersion
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,485cb54fc9e09a76f8a82c7cca1b0df757692ed1,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,77,18,59,More java7ify: multi-catch and SourceVersion
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,485cb54fc9e09a76f8a82c7cca1b0df757692ed1,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,Chapman Flack,2020-01-11T19:47:34Z,chap@anastigmatix.net,77,18,59,More java7ify: multi-catch and SourceVersion
,pljava-so/src/main/c/ExecutionPlan.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/JNICalls.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/PgSavepoint.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/VarlenaWrapper.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/ErrorData.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Relation.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TriggerData.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Tuple.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleDesc.c,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,73cc77206484b5b056ec45b21c77d5c501469b61,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,Chapman Flack,2019-11-05T03:46:51Z,chap@anastigmatix.net,114,77,37,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,e0c9cd998d9aa9cfa8686b817570d44363002c61,Chapman Flack,2019-11-04T12:51:27Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:51:27Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.5.

-packaging/build.xml already makes an update .sql from 1.5.4,
the last released version. No change needed there before this release."
,pljava-so/src/main/c/ExecutionPlan.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/JNICalls.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/PgSavepoint.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/VarlenaWrapper.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/type/ErrorData.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/type/Relation.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/type/TriggerData.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/type/Tuple.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/type/TupleDesc.c,e2390ad1ac8b1e6515b27ec6f5851da4cafce908,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T12:49:25Z,chap@anastigmatix.net,69,44,25,Merge pull request #247 from bug/REL1_5_STABLE/issue246
,pljava-so/src/main/c/ExecutionPlan.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/type/ErrorData.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/type/Relation.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/type/TriggerData.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/type/Tuple.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/type/TupleDesc.c,f331da5124e8e34010b486463cad99b7bf2cc66e,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,Chapman Flack,2019-11-04T02:23:41Z,chap@anastigmatix.net,32,20,12,"Beware long vararg params without jlong casts

On architectures where long is narrower than jlong, that
messes up the argument positions.

Likewise, catch a few pointers passed to jlong-typed params
without going through Ptr2Long."
,pljava-so/src/main/c/ExecutionPlan.c,3c51fe4b39e5fff00b55fb076af7233f7a78502b,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,37,24,13,"Swat JNI reference-management bugs

New tradition: add -Xcheck:JNI from time to time when testing.
It is definitely slow (almost three minutes to load PL/Java and
the examples jar), but catches JNI management bugs that can be
asymptomatic (on some architectures under some conditions?)
without the checking."
,pljava-so/src/main/c/JNICalls.c,3c51fe4b39e5fff00b55fb076af7233f7a78502b,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,37,24,13,"Swat JNI reference-management bugs

New tradition: add -Xcheck:JNI from time to time when testing.
It is definitely slow (almost three minutes to load PL/Java and
the examples jar), but catches JNI management bugs that can be
asymptomatic (on some architectures under some conditions?)
without the checking."
,pljava-so/src/main/c/PgSavepoint.c,3c51fe4b39e5fff00b55fb076af7233f7a78502b,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,37,24,13,"Swat JNI reference-management bugs

New tradition: add -Xcheck:JNI from time to time when testing.
It is definitely slow (almost three minutes to load PL/Java and
the examples jar), but catches JNI management bugs that can be
asymptomatic (on some architectures under some conditions?)
without the checking."
,pljava-so/src/main/c/VarlenaWrapper.c,3c51fe4b39e5fff00b55fb076af7233f7a78502b,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,37,24,13,"Swat JNI reference-management bugs

New tradition: add -Xcheck:JNI from time to time when testing.
It is definitely slow (almost three minutes to load PL/Java and
the examples jar), but catches JNI management bugs that can be
asymptomatic (on some architectures under some conditions?)
without the checking."
,pljava-so/src/main/c/type/TupleDesc.c,3c51fe4b39e5fff00b55fb076af7233f7a78502b,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,Chapman Flack,2019-11-01T04:30:48Z,chap@anastigmatix.net,37,24,13,"Swat JNI reference-management bugs

New tradition: add -Xcheck:JNI from time to time when testing.
It is definitely slow (almost three minutes to load PL/Java and
the examples jar), but catches JNI management bugs that can be
asymptomatic (on some architectures under some conditions?)
without the checking."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,d6cf14faedea6c18c6d11778703fbd90a037153e,Chapman Flack,2019-10-30T03:07:16Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T03:07:16Z,chap@anastigmatix.net,8,3,5,Re-java7ify after REL1_5_STABLE merge
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,d6cf14faedea6c18c6d11778703fbd90a037153e,Chapman Flack,2019-10-30T03:07:16Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T03:07:16Z,chap@anastigmatix.net,8,3,5,Re-java7ify after REL1_5_STABLE merge
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Invocation.c,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/TypeOid.c,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/SQLXMLImpl.c,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferXMLReader.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaXMLRenderer.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,a2103685f6e4f2573cd047964493f4369c5d149b,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,Chapman Flack,2019-10-30T02:45:31Z,chap@anastigmatix.net,3239,2789,450,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,415594cf6f6a609564f29ac012a8d7ad4278ae45,Chapman Flack,2019-10-29T22:11:05Z,chap@anastigmatix.net,Chapman Flack,2019-10-29T22:11:05Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.4.

-packaging/build.xml already makes an update .sql from 1.5.3,
the last released version. No change needed there before this release."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,8d8d090dcbf0a011f0e888d221d6b5d70c6c9d5a,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,227,182,45,"Release notes and other doc updates

... some of which belonged in 1.5.3"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,8d8d090dcbf0a011f0e888d221d6b5d70c6c9d5a,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,227,182,45,"Release notes and other doc updates

... some of which belonged in 1.5.3"
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,8d8d090dcbf0a011f0e888d221d6b5d70c6c9d5a,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T03:02:28Z,chap@anastigmatix.net,227,182,45,"Release notes and other doc updates

... some of which belonged in 1.5.3"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava-so/src/main/c/TypeOid.c,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava-so/src/main/c/type/SQLXMLImpl.c,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferXMLReader.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaXMLRenderer.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,09193c8682473eaa4cccc6034f3b25c1668a496d,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,Chapman Flack,2019-10-22T02:35:42Z,chap@anastigmatix.net,2628,2354,274,Merge pull request #245 from feature/REL1_5_STABLE/xmlview
,pljava-so/src/main/c/Invocation.c,49ad5c2c30a0eeb5d0188cea7ffc2ca64ee08203,Chapman Flack,2019-10-21T02:02:59Z,chap@anastigmatix.net,Chapman Flack,2019-10-21T02:02:59Z,chap@anastigmatix.net,3,2,1,Merge pull request #244 from bug/REL1_5_STABLE/issue228
,pljava-so/src/main/c/Invocation.c,b7c2e711697d0b636efdd1b47efcc2e00158984b,Chapman Flack,2019-10-20T03:14:10Z,chap@anastigmatix.net,Chapman Flack,2019-10-21T01:53:06Z,chap@anastigmatix.net,3,2,1,"Remain ""the PG thread"" to call Invocation_onExit

Code added to PgSavepoint.onInvocationExit() in 53aaa42
relies on executing in the PG thread. This should have
been included in PR #229."
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,7037f04cd79ea9cf16b212f76e42d4e0032ef114,Chapman Flack,2019-10-20T03:01:49Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:57:45Z,chap@anastigmatix.net,478,440,38,"An XML rendering of a pg_node_tree

A <list> whose elements are all the same type will have the
attribute ""all"" with a value of ""int"", ""oid"", or ""bit"", and its
children will all be <v> elements. Otherwise, a <list> will have
no ""all"" attribute, and its children will be elements whose names
are a node name (e.g. FUNCEXPR), or T_Integer, T_Float, T_String,
or T_BitString.

The (b list syntax, for a bit set, is used very commonly
(more so than i for integer or o for oid), but seems never to
have been added in PG's nodeRead() ... because the whole syntax
has drifted away from being a self-describing Lisp-like thing
and toward parsing knowledge being squirreled away inside every
node-reading function in readfuncs ... and everything there that
uses a (b list handles it directly, so no one would notice that
nodeRead() has, to this day, never been taught about it.

For this ""version"" of nodeRead(), (b will be recognized the same
way as (i and (o.

For a <CONST>, the <member> with name ""constvalue"" will also have
a ""length"" attribute, and the member's content will be the raw content
of the Datum as xs:hexBinary."
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,7037f04cd79ea9cf16b212f76e42d4e0032ef114,Chapman Flack,2019-10-20T03:01:49Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:57:45Z,chap@anastigmatix.net,478,440,38,"An XML rendering of a pg_node_tree

A <list> whose elements are all the same type will have the
attribute ""all"" with a value of ""int"", ""oid"", or ""bit"", and its
children will all be <v> elements. Otherwise, a <list> will have
no ""all"" attribute, and its children will be elements whose names
are a node name (e.g. FUNCEXPR), or T_Integer, T_Float, T_String,
or T_BitString.

The (b list syntax, for a bit set, is used very commonly
(more so than i for integer or o for oid), but seems never to
have been added in PG's nodeRead() ... because the whole syntax
has drifted away from being a self-describing Lisp-like thing
and toward parsing knowledge being squirreled away inside every
node-reading function in readfuncs ... and everything there that
uses a (b list handles it directly, so no one would notice that
nodeRead() has, to this day, never been taught about it.

For this ""version"" of nodeRead(), (b will be recognized the same
way as (i and (o.

For a <CONST>, the <member> with name ""constvalue"" will also have
a ""length"" attribute, and the member's content will be the raw content
of the Datum as xs:hexBinary."
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,a63cc2ca50cf4eb19c167817f55de92c9f0e7ff6,Chapman Flack,2019-09-24T01:33:11Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,73,72,1,Now with pg_node_tree's low-level tokenizer
,pljava-so/src/main/c/TypeOid.c,d8a1597319dd8254623ac5b38128ecdd0c9a20e2,Chapman Flack,2019-06-06T02:08:56Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,174,167,7,Now can produce SQLXMLImpl.Readable.Synthetic
,pljava-so/src/main/c/type/SQLXMLImpl.c,d8a1597319dd8254623ac5b38128ecdd0c9a20e2,Chapman Flack,2019-06-06T02:08:56Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,174,167,7,Now can produce SQLXMLImpl.Readable.Synthetic
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,d8a1597319dd8254623ac5b38128ecdd0c9a20e2,Chapman Flack,2019-06-06T02:08:56Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,174,167,7,Now can produce SQLXMLImpl.Readable.Synthetic
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,d8a1597319dd8254623ac5b38128ecdd0c9a20e2,Chapman Flack,2019-06-06T02:08:56Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,174,167,7,Now can produce SQLXMLImpl.Readable.Synthetic
,pljava/src/main/java/org/postgresql/pljava/jdbc/PgNodeTreeAsXML.java,c18ef4a43e706ba401a9d188c2616966c52d4d2b,Chapman Flack,2019-09-23T03:27:19Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,57,57,0,PgNodeTreeAsXML
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,2269d288815dda57731e366d19a5ad458f1710bb,Chapman Flack,2019-10-20T03:19:43Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,244,197,47,"Add VarlenaXMLRenderer

This is another consumer of VarlenaWrapper.Input ... one that
presents the input as a SyntheticXMLReader rather than as an
InputStream.

It seems convenient for VarlenaWrapper.Input to have some methods
of its own, rather than being the mostly empty intermediary it was
in earlier commits."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaXMLRenderer.java,2269d288815dda57731e366d19a5ad458f1710bb,Chapman Flack,2019-10-20T03:19:43Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:31Z,chap@anastigmatix.net,244,197,47,"Add VarlenaXMLRenderer

This is another consumer of VarlenaWrapper.Input ... one that
presents the input as a SyntheticXMLReader rather than as an
InputStream.

It seems convenient for VarlenaWrapper.Input to have some methods
of its own, rather than being the mostly empty intermediary it was
in earlier commits."
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferXMLReader.java,60d9a39199a6dd68115d1e84e75574d68e4b32bf,Chapman Flack,2019-10-20T05:44:26Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:26Z,chap@anastigmatix.net,830,830,0,"Introduce ByteBufferXMLReader

This is an abstract base for classes that will see a readable
ByteBuffer (windowing some PostgreSQL data type) and present
the contents in a synthesized XML form as a SyntheticXMLReader.

The chief method a subclass needs to implement is
next(ByteBuffer), which will be passed a readable buffer,
suitably pinned. This class handles the rest,
including reporting a StartDocument and an EndDocument event before
and after the synthesized ones, respectively.

The next() method returns a SyntheticXMLReader.EventCarrier, which is
a simple closure with a toSAX() method to be implemented, and several
provided methods that toSAX() can use to obtain SAX handlers and
disgorge one or more parse events onto them. In other words, next() is a
bit of an XML ""pull"" API (though it has wide discretion over how much to
pull at one time and hold in its closure).  This allows some control
over how much to pull at one time while holding the pin on the
PostgreSQL native state, as compared to simply grabbing the pin for all
of the SAX parse() method in one go.

At first glance, the application would seem ideal for StAX. However:

StAX is a nice API, but it turns out to be hopeless to use it as
source or result with TRAX (Transformer implementations in the JRE).
That's not really the fault of TRAX either (which originated in
Apache Xerces): its support for StAX was added later (the files
StAXEvent2SAX.java, StAXStream2SAX.java, SAX2StAXStreamWriter.java,
in the trax/ source directory, have different copyright banners and
authors, within Oracle rather than the Xerces crew) and they are rife,
rife with bugs. They are especially rife in the area of handling
'content' fragments, which the code shows some signs of having
contemplated, but no signs of ever having tested.

It seems likely that such a nest of bugs shipped in the JRE for so long
will be unlikely to get fixed and risk a behavior change that disrupts
whatever awful workarounds may have been developed in unknown client code.

The only safe verdict can be: feel free to use StAX from hand-laid code
that will use the API directly if its simplicity appeals; never, ever,
ever request a StAXSource or StAXResult with any intention of using it
with a TRAX transformation.

Therefore, SyntheticXMLReader implements the SAX API instead (despite
all of the fiddliness that involves), with EventCarrier serving as a
kind of SAX-flavored ""pull"" event holder. It just appears that SAX is
the older Java API and is better supported and tested with TRAX and
the rest of the Java XML APIs."
,pljava/src/main/java/org/postgresql/pljava/internal/SyntheticXMLReader.java,60d9a39199a6dd68115d1e84e75574d68e4b32bf,Chapman Flack,2019-10-20T05:44:26Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T05:44:26Z,chap@anastigmatix.net,830,830,0,"Introduce ByteBufferXMLReader

This is an abstract base for classes that will see a readable
ByteBuffer (windowing some PostgreSQL data type) and present
the contents in a synthesized XML form as a SyntheticXMLReader.

The chief method a subclass needs to implement is
next(ByteBuffer), which will be passed a readable buffer,
suitably pinned. This class handles the rest,
including reporting a StartDocument and an EndDocument event before
and after the synthesized ones, respectively.

The next() method returns a SyntheticXMLReader.EventCarrier, which is
a simple closure with a toSAX() method to be implemented, and several
provided methods that toSAX() can use to obtain SAX handlers and
disgorge one or more parse events onto them. In other words, next() is a
bit of an XML ""pull"" API (though it has wide discretion over how much to
pull at one time and hold in its closure).  This allows some control
over how much to pull at one time while holding the pin on the
PostgreSQL native state, as compared to simply grabbing the pin for all
of the SAX parse() method in one go.

At first glance, the application would seem ideal for StAX. However:

StAX is a nice API, but it turns out to be hopeless to use it as
source or result with TRAX (Transformer implementations in the JRE).
That's not really the fault of TRAX either (which originated in
Apache Xerces): its support for StAX was added later (the files
StAXEvent2SAX.java, StAXStream2SAX.java, SAX2StAXStreamWriter.java,
in the trax/ source directory, have different copyright banners and
authors, within Oracle rather than the Xerces crew) and they are rife,
rife with bugs. They are especially rife in the area of handling
'content' fragments, which the code shows some signs of having
contemplated, but no signs of ever having tested.

It seems likely that such a nest of bugs shipped in the JRE for so long
will be unlikely to get fixed and risk a behavior change that disrupts
whatever awful workarounds may have been developed in unknown client code.

The only safe verdict can be: feel free to use StAX from hand-laid code
that will use the API directly if its simplicity appeals; never, ever,
ever request a StAXSource or StAXResult with any intention of using it
with a TRAX transformation.

Therefore, SyntheticXMLReader implements the SAX API instead (despite
all of the fiddliness that involves), with EventCarrier serving as a
kind of SAX-flavored ""pull"" event holder. It just appears that SAX is
the older Java API and is better supported and tested with TRAX and
the rest of the Java XML APIs."
,pljava-so/src/main/c/type/SQLXMLImpl.c,487d21259b4836e7d6e2f84f9a22351299be7df5,Chapman Flack,2019-09-23T01:13:28Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,302,196,106,"Factor a PgXML subclass out of SQLXMLImpl.Readable

PgXML is the subclass handling the case where the varlena being
presented actually has the PostgreSQL 'xml' type.

That clears the way for others (SQLXMLImpl.Readable.Synthetic?)
to handle cases where the varlena holds some other type, but a view
of the content as XML would be useful."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,487d21259b4836e7d6e2f84f9a22351299be7df5,Chapman Flack,2019-09-23T01:13:28Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,302,196,106,"Factor a PgXML subclass out of SQLXMLImpl.Readable

PgXML is the subclass handling the case where the varlena being
presented actually has the PostgreSQL 'xml' type.

That clears the way for others (SQLXMLImpl.Readable.Synthetic?)
to handle cases where the varlena holds some other type, but a view
of the content as XML would be useful."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,734104695418df61e5336351b7fda2003647b00e,Chapman Flack,2019-09-22T23:24:54Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,281,141,140,Whitespace only: reindent for previous commit
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,c9f6a201f84bd6662bde55e07484884582af50fc,Chapman Flack,2019-10-19T23:38:26Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,130,77,53,"Factor out VarlenaWrapper.Input

Make VarlenaWrapper.Input no longer a one-trick pony that looks
like an InputStream. That's now VarlenaWrapper.Input.Stream (and
more than one can be created, to have independent cursors into one
VW.I)."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,c9f6a201f84bd6662bde55e07484884582af50fc,Chapman Flack,2019-10-19T23:38:26Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,130,77,53,"Factor out VarlenaWrapper.Input

Make VarlenaWrapper.Input no longer a one-trick pony that looks
like an InputStream. That's now VarlenaWrapper.Input.Stream (and
more than one can be created, to have independent cursors into one
VW.I)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c9f6a201f84bd6662bde55e07484884582af50fc,Chapman Flack,2019-10-19T23:38:26Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,130,77,53,"Factor out VarlenaWrapper.Input

Make VarlenaWrapper.Input no longer a one-trick pony that looks
like an InputStream. That's now VarlenaWrapper.Input.Stream (and
more than one can be created, to have independent cursors into one
VW.I)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/XMLRenderedTypes.java,b65c6e24c973ebfa16c047ded54d208011081dbe,Chapman Flack,2019-05-14T02:55:29Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:36:14Z,chap@anastigmatix.net,51,51,0,"Add XMLRenderedTypes example

This example will (one day, when the implementation is there) be able
to demonstrate synthetic presentation of selected non-XML PostgreSQL
types (pg_node_tree, for starters) as XML, so they can be explored with
the XPath API, etc."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,ded3fd509ef43a6d81e9dc50bb354444f8aead4a,Chapman Flack,2019-10-20T00:26:08Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:26:08Z,chap@anastigmatix.net,286,201,85,Merge pull request #243 from cleanup/REL1_5_STABLE/DualState
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,ded3fd509ef43a6d81e9dc50bb354444f8aead4a,Chapman Flack,2019-10-20T00:26:08Z,chap@anastigmatix.net,Chapman Flack,2019-10-20T00:26:08Z,chap@anastigmatix.net,286,201,85,Merge pull request #243 from cleanup/REL1_5_STABLE/DualState
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,d0a117f53ee6d7d4345e963938ea971e2bb143e2,Chapman Flack,2019-10-19T21:02:51Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T21:02:51Z,chap@anastigmatix.net,224,169,55,"Some better provision for release with pins

Work a bit harder to avoid having GC glom on to a JAVA_RELEASED
instance and put it on the reference queue earlier than the
releaseFromJava() logic would. Done by moving the clear() earlier,
so GC is less tempted.

There can still be cases where a gc / releaseFromJava race is
detectable but only after the fact, so also rework the queue
runner to handle the unlikely case if seen. The same approach
can cover instances that have not been JAVA_RELEASED, but simply
allowed to go unreachable with outstanding pins. For now, the
logic will only poll them and wait for the pin count to hit zero,
which is reasonable if one assumes there is still a thread somewhere
that is doing something under each pin and will shortly release it
(such a thread could have a reference to the DualState instance but
not to its referent). There's not yet any provision for questioning
that assumption, but if anything ends up taking more than one ride
on the deferredReleased queue, it will be reflected in a JMX-visible
repeatedlyDeferred counter."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,eda2a9891869a2f48cca31ccfd661023803df624,Chapman Flack,2019-10-06T19:45:22Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T02:08:24Z,chap@anastigmatix.net,31,25,6,"Verify nobody's using get() in a conflicting way

The current clear() done in scheduleJavaReleased() has a benefit:
it ensures the object won't hit the reference queue until it is
explicitly put there by our enqueue(). It can simplify the queue
drainer's job if it can know the only objects it will see are
non-RELEASED ones put there by gc, or RELEASED ones arriving only
after their last pin is gone.

But the clear(), at present, happens too late to accomplish that.
It ought to be done right away in releaseFromJava(), so it isn't
subject to queuing by gc while waiting for any pins to be gone.

That would give releaseFromJava() an immediate effect visible to
code currently holding a pin, if that code used get() expecting to
find a non-null reference there. So (brute force solution), declare
get() off limits to clients, and confirm current code doesn't break."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,2264228ae3fe201bf0d00aaa2046edfb8f64f6d6,Chapman Flack,2019-10-19T02:08:20Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T02:08:20Z,chap@anastigmatix.net,39,11,28,"DualState.pinUnlessReleased needs no throws

It was declared, needlessly, to throw SQLException.

This makes some catch blocks in VarlenaWrapper superfluous."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,2264228ae3fe201bf0d00aaa2046edfb8f64f6d6,Chapman Flack,2019-10-19T02:08:20Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T02:08:20Z,chap@anastigmatix.net,39,11,28,"DualState.pinUnlessReleased needs no throws

It was declared, needlessly, to throw SQLException.

This makes some catch blocks in VarlenaWrapper superfluous."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,44954b2f3a58279ebd3adec9f8a12af3820662a0,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,98,51,47,Merge pull request #242 from bug/REL1_5_STABLE/issue241
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,44954b2f3a58279ebd3adec9f8a12af3820662a0,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,98,51,47,Merge pull request #242 from bug/REL1_5_STABLE/issue241
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,44954b2f3a58279ebd3adec9f8a12af3820662a0,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,98,51,47,Merge pull request #242 from bug/REL1_5_STABLE/issue241
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,44954b2f3a58279ebd3adec9f8a12af3820662a0,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,Chapman Flack,2019-10-19T00:44:44Z,chap@anastigmatix.net,98,51,47,Merge pull request #242 from bug/REL1_5_STABLE/issue241
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,26b4c5681f473e85cd0cd1e69f86ce3b4a986533,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,98,51,47,"Allow Javadoc to build with Java 13

For Java 13, the version of the maven-javadoc-plugin must be
advanced to avoid pulling in a version of commons-lang whose
getJavaVersionAsFloat() method is broken by a change to the
version property values reported in 13.

There seems to be no choice of maven-javadoc-plugin version
that will work with 13 and also back to 6, so use profiles
based on the build-time JDK version to select the plugin version
to use.

A benefit of advancing the maven-javadoc-plugin version is that
the <source> element added in a28db9f can be removed again, as the
newer plugin does not need it.

Javadoc 13 is more strict in checking HTML5 structure, and disallows
<h1> in a doc comment (a level-1 header is generated by Javadoc itself),
requiring h elements to be used in proper sequence with h2 outermost.

There is nothing like a tedious bout of header renumbering to find
a few other assorted typos in doc comments."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,26b4c5681f473e85cd0cd1e69f86ce3b4a986533,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,98,51,47,"Allow Javadoc to build with Java 13

For Java 13, the version of the maven-javadoc-plugin must be
advanced to avoid pulling in a version of commons-lang whose
getJavaVersionAsFloat() method is broken by a change to the
version property values reported in 13.

There seems to be no choice of maven-javadoc-plugin version
that will work with 13 and also back to 6, so use profiles
based on the build-time JDK version to select the plugin version
to use.

A benefit of advancing the maven-javadoc-plugin version is that
the <source> element added in a28db9f can be removed again, as the
newer plugin does not need it.

Javadoc 13 is more strict in checking HTML5 structure, and disallows
<h1> in a doc comment (a level-1 header is generated by Javadoc itself),
requiring h elements to be used in proper sequence with h2 outermost.

There is nothing like a tedious bout of header renumbering to find
a few other assorted typos in doc comments."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,26b4c5681f473e85cd0cd1e69f86ce3b4a986533,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,98,51,47,"Allow Javadoc to build with Java 13

For Java 13, the version of the maven-javadoc-plugin must be
advanced to avoid pulling in a version of commons-lang whose
getJavaVersionAsFloat() method is broken by a change to the
version property values reported in 13.

There seems to be no choice of maven-javadoc-plugin version
that will work with 13 and also back to 6, so use profiles
based on the build-time JDK version to select the plugin version
to use.

A benefit of advancing the maven-javadoc-plugin version is that
the <source> element added in a28db9f can be removed again, as the
newer plugin does not need it.

Javadoc 13 is more strict in checking HTML5 structure, and disallows
<h1> in a doc comment (a level-1 header is generated by Javadoc itself),
requiring h elements to be used in proper sequence with h2 outermost.

There is nothing like a tedious bout of header renumbering to find
a few other assorted typos in doc comments."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,26b4c5681f473e85cd0cd1e69f86ce3b4a986533,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,Chapman Flack,2019-10-18T03:33:07Z,chap@anastigmatix.net,98,51,47,"Allow Javadoc to build with Java 13

For Java 13, the version of the maven-javadoc-plugin must be
advanced to avoid pulling in a version of commons-lang whose
getJavaVersionAsFloat() method is broken by a change to the
version property values reported in 13.

There seems to be no choice of maven-javadoc-plugin version
that will work with 13 and also back to 6, so use profiles
based on the build-time JDK version to select the plugin version
to use.

A benefit of advancing the maven-javadoc-plugin version is that
the <source> element added in a28db9f can be removed again, as the
newer plugin does not need it.

Javadoc 13 is more strict in checking HTML5 structure, and disallows
<h1> in a doc comment (a level-1 header is generated by Javadoc itself),
requiring h elements to be used in proper sequence with h2 outermost.

There is nothing like a tedious bout of header renumbering to find
a few other assorted typos in doc comments."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,8f38fce675023866c1f7d6eb90608ae8d452312f,Chapman Flack,2019-10-15T21:42:39Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T21:42:39Z,chap@anastigmatix.net,13,8,5,Merge pull request #240 from bug/REL1_5_STABLE/issue239
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,a28db9f37dfd62eac7214e0281d02e9664ad51e2,Chapman Flack,2019-10-15T21:36:43Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T21:36:43Z,chap@anastigmatix.net,13,8,5,"Fix a Javadoc build issue with Java 11+

As reported in #239, javadoc with an 11 or newer JDK can
fail with a message about code in modules being linked to
Java API code in the unnamed package. The Java bug report
indicates a fix was rolled out (adding code to detect when
the 'module' being detected is really an automatic module),
but it seems a <source> element in the configuration of the
maven-javadoc-plugin is still needed. That will just specify
a hardcoded 8 for now (even if the --release given to javac
will be 7 or 6); javadoc doesn't seem to mind if it is not
an exact match. (Even an actual javadoc 7 seems not to object
to source 8.)

In passing: with that hurdle cleared, javadoc 12 proceeds to
complain about non-HTML5 attributes in Deployer's javadoc, so
those are removed here (even though Deployer itself is on the
way out)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,6aef971f2eef4d1040dcd00f5da6cf38816a00d3,Chapman Flack,2019-10-15T03:28:33Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T03:28:33Z,chap@anastigmatix.net,14,7,7,Merge pull request #237 from bug/REL1_5_STABLE/issue235
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,6aef971f2eef4d1040dcd00f5da6cf38816a00d3,Chapman Flack,2019-10-15T03:28:33Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T03:28:33Z,chap@anastigmatix.net,14,7,7,Merge pull request #237 from bug/REL1_5_STABLE/issue235
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,c3abdb78d463aba903c1c3f7fae8765c5a5800a5,Chapman Flack,2019-10-15T02:24:54Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T02:24:54Z,chap@anastigmatix.net,14,7,7,"Sop for javac's --release 6 check

As reported in issue #235, the --release option in newer javac
versions will check against a ct.sym file included in the jdk
that is meant to record what API was available in which prior
releases, and that file (at least as shipped in Java 11) is
missing the newFactory() methods on XMLInputFactory and
XMLOutputFactory for release 6, so it reports them not found.

Happily, both no-arg newFactory() methods are equivalent to
the no-arg newInstance() methods. Deprecation tags were added
to the newInstance(String,ClassLoader) methods, but not to
the no-arg ones."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c3abdb78d463aba903c1c3f7fae8765c5a5800a5,Chapman Flack,2019-10-15T02:24:54Z,chap@anastigmatix.net,Chapman Flack,2019-10-15T02:24:54Z,chap@anastigmatix.net,14,7,7,"Sop for javac's --release 6 check

As reported in issue #235, the --release option in newer javac
versions will check against a ct.sym file included in the jdk
that is meant to record what API was available in which prior
releases, and that file (at least as shipped in Java 11) is
missing the newFactory() methods on XMLInputFactory and
XMLOutputFactory for release 6, so it reports them not found.

Happily, both no-arg newFactory() methods are equivalent to
the no-arg newInstance() methods. Deprecation tags were added
to the newInstance(String,ClassLoader) methods, but not to
the no-arg ones."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceReader.java,a2d112ad623daae90816f7bc60d3987918b7f809,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,8,3,5,"Re-java7ify after REL1_5_STABLE merge.

In passing, zap a couple imports of UnsupportedEncodingException
dead since a previous round of java7ification."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,a2d112ad623daae90816f7bc60d3987918b7f809,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,8,3,5,"Re-java7ify after REL1_5_STABLE merge.

In passing, zap a couple imports of UnsupportedEncodingException
dead since a previous round of java7ification."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,a2d112ad623daae90816f7bc60d3987918b7f809,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:51:19Z,chap@anastigmatix.net,8,3,5,"Re-java7ify after REL1_5_STABLE merge.

In passing, zap a couple imports of UnsupportedEncodingException
dead since a previous round of java7ification."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/DualState.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Invocation.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/PgSavepoint.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SubXactListener.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/TypeOid.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/SQLXMLImpl.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Type.c,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/fallback/jdbc/java_sql_Types.h,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/DualState.h,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceReader.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,2abb2362d390b4dd7660417eb9e8724b993cf0fb,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T23:22:45Z,chap@anastigmatix.net,7490,6920,570,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,07eee5a1fc9ad812ad60c94eea0fdfdd16f12c2f,Chapman Flack,2019-09-29T01:31:53Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T03:06:45Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.3.

-packaging/build.xml already makes an update .sql from 1.5.2,
the last released version. No change needed there before this release."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,e09a77ef63904f015dca1336166a49c2fadab049,Chapman Flack,2019-10-04T02:49:09Z,chap@anastigmatix.net,Chapman Flack,2019-10-04T02:52:00Z,chap@anastigmatix.net,2,1,1,"Preserve javadoc buildability with JDK 7

The Rubicon has been crossed with the S9 example, which
needs 8, but may as well still fix things javadoc 7 dislikes
elsewhere."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,4764a91ca48636db8113100d21ee8274bf9b117d,Chapman Flack,2019-09-29T00:59:53Z,chap@anastigmatix.net,Chapman Flack,2019-09-29T00:59:53Z,chap@anastigmatix.net,220,200,20,"All right, who left out XMLEXISTS?

Just can't get good help these days.

Also unbreak some cases where NULL should be the return value, broken
with the factoring out of returnContent.

Expand the docs and release notes.

This commit touches only an example and documentation."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,9d44af0c019ae487a9b5d20c1ecf9dec449534f6,Chapman Flack,2019-09-24T04:25:46Z,chap@anastigmatix.net,Chapman Flack,2019-09-24T04:25:46Z,chap@anastigmatix.net,78,38,40,"Whitespace / tidying in SQLXMLImpl

Found one misindented line in saxCopy, and moved the whole method
nearer the only two places that use it, for ease of reading. This
actually does change what class it's a member of (now XMLCopier
rather than SQLXMLImpl), but that's downright appropriate, and it has
never appeared the other way in a release, so it's a trivial change
at this point. Also some off line-wrapping in a comment. Prune three
lines that became dead in a47baed."
,pljava-so/src/main/c/Backend.c,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava-so/src/main/c/DualState.c,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava-so/src/main/c/Invocation.c,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava-so/src/main/c/type/Type.c,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava-so/src/main/include/pljava/DualState.h,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,e4ed141977f881689dc28e20dce38a2f0c1cb90b,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T15:27:26Z,chap@anastigmatix.net,176,145,31,Merge pull request #234 from bug/REL1_5_STABLE/153nits
,pljava-so/src/main/c/Invocation.c,3cb3b8bde5ba2174d3d96d6548b3486ab9567e18,Chapman Flack,2019-09-21T01:20:09Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,168,137,31,"Revise context, SPI, Invocation handling for SRFs

Some long-standing behavior in Type_invokeSRF needs a lot more
documentation and a bit of revision. Document that the C Invocation
structure is new for each call in the SFRM_ValuePerCall protocol,
but the Java Invocation instance is magically made to persist for
the protocol's duration.

Clarify that something like that is being done for the SPI connection
also. I am far from convinced that's even desirable, but it is thirteen
years old now, and changing it radically will demand more analysis.
However, it does need to handle more patterns of SPI use by the called
function without restoring a defunct memory context on popInvocation.

Simple fix is to do away with the ""PL/Java row context"", which seems to
serve no purpose: it is a context that gets reset for each row call, but
so is the one supplied as CurrentMemoryContext by the executor anyway,
and that one is still valid when our popInvocation happens."
,pljava-so/src/main/c/type/Type.c,3cb3b8bde5ba2174d3d96d6548b3486ab9567e18,Chapman Flack,2019-09-21T01:20:09Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,168,137,31,"Revise context, SPI, Invocation handling for SRFs

Some long-standing behavior in Type_invokeSRF needs a lot more
documentation and a bit of revision. Document that the C Invocation
structure is new for each call in the SFRM_ValuePerCall protocol,
but the Java Invocation instance is magically made to persist for
the protocol's duration.

Clarify that something like that is being done for the SPI connection
also. I am far from convinced that's even desirable, but it is thirteen
years old now, and changing it radically will demand more analysis.
However, it does need to handle more patterns of SPI use by the called
function without restoring a defunct memory context on popInvocation.

Simple fix is to do away with the ""PL/Java row context"", which seems to
serve no purpose: it is a context that gets reset for each row call, but
so is the one supplied as CurrentMemoryContext by the executor anyway,
and that one is still valid when our popInvocation happens."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,3cb3b8bde5ba2174d3d96d6548b3486ab9567e18,Chapman Flack,2019-09-21T01:20:09Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,168,137,31,"Revise context, SPI, Invocation handling for SRFs

Some long-standing behavior in Type_invokeSRF needs a lot more
documentation and a bit of revision. Document that the C Invocation
structure is new for each call in the SFRM_ValuePerCall protocol,
but the Java Invocation instance is magically made to persist for
the protocol's duration.

Clarify that something like that is being done for the SPI connection
also. I am far from convinced that's even desirable, but it is thirteen
years old now, and changing it radically will demand more analysis.
However, it does need to handle more patterns of SPI use by the called
function without restoring a defunct memory context on popInvocation.

Simple fix is to do away with the ""PL/Java row context"", which seems to
serve no purpose: it is a context that gets reset for each row call, but
so is the one supplied as CurrentMemoryContext by the executor anyway,
and that one is still valid when our popInvocation happens."
,pljava-so/src/main/c/Backend.c,9adbc9473208b7dcbd01d66461c53f76e962cfd9,Chapman Flack,2019-08-30T01:47:38Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,8,8,0,"Unregister DualState callback before destroyJavaVM

In the (exceptional) case where initializing Java has failed and the
VM is destroyed, don't leave a DualState resource-release callback
wanting to use it."
,pljava-so/src/main/c/DualState.c,9adbc9473208b7dcbd01d66461c53f76e962cfd9,Chapman Flack,2019-08-30T01:47:38Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,8,8,0,"Unregister DualState callback before destroyJavaVM

In the (exceptional) case where initializing Java has failed and the
VM is destroyed, don't leave a DualState resource-release callback
wanting to use it."
,pljava-so/src/main/include/pljava/DualState.h,9adbc9473208b7dcbd01d66461c53f76e962cfd9,Chapman Flack,2019-08-30T01:47:38Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:25:18Z,chap@anastigmatix.net,8,8,0,"Unregister DualState callback before destroyJavaVM

In the (exceptional) case where initializing Java has failed and the
VM is destroyed, don't leave a DualState resource-release callback
wanting to use it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,37af582385dcfda76ab9c10e11816b2bf73f1776,Chapman Flack,2019-09-21T01:21:28Z,chap@anastigmatix.net,Chapman Flack,2019-09-21T01:21:28Z,chap@anastigmatix.net,2156,2013,143,Merge pull request #233 from feature/REL1_5_STABLE/moreS9
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,5e8d19fee1f21549747df450e697a7f28084719f,Chapman Flack,2019-09-06T00:53:25Z,chap@anastigmatix.net,Chapman Flack,2019-09-06T00:53:25Z,chap@anastigmatix.net,54,36,18,"Fix unreported cast errors, XMLCAST nit

Saxon's rules.getConverter() will simply return null when no
conversion is defined between the types, so the proper XPTY0004
error report has to be thrown from here.

XMLCAST's vaguely opportunistic use of BindingsFromResultSet
(first written with XMLQUERY and XMLTABLE in mind) needs a bit
more work to avoid checks that were appropriate for those
original callers (checking that a parameter name is an NCName,
mapping a special name to the context item). XMLCAST only has
a single input value, whose name doesn't matter at all."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,2a154898a20ccf14bf9e922ca80621da08180d0e,Chapman Flack,2019-09-05T02:34:39Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,275,250,25,"Document the XQuery regex functions

... and mention XMLCAST and XMLTEXT, and retire the language
about the former limitations of XMLTABLE."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,820ba24dacad1a84723d1b8af090f2a177fdb020,Chapman Flack,2019-09-04T02:31:33Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,32,26,6,"Use Configuration.compileRegularExpression method

... rather than delving into Saxon's innards to construct a
specific class.

Beyond better API hygiene, this provides a little Easter egg
of sorts: Saxon's compileRegularExpression method allows a
non-standard "";j"" suffix on the flags argument, and then builds
a Java regular expression instead of an XQuery one. Flagrantly
nonconformant, but could be handy at times, when some feature
that's in Java regular expressions and not in XQuery ones might
be helpful.

One good Easter egg deserves another, so detect when the Java-regex
egg has been used, and then allow TRANSLATE_REGEX to replace
zero-length matches rather than raising 2201U ""attempt to replace
a zero-length string"" as the SQL spec demands. XQuery regexes
don't have lookahead/lookbehind operators, but Java ones do, and so
can be constructed to match empty strings in perfectly sensible
and deliberate ways.

However, it's still tricky. The way TRANSLATE_REGEX is specified to
work, the RE is first applied to the whole input string, and then
for every substring that was matched as a replacement candidate, the
same RE is applied again, in the replacement step, to that substring
in isolation (a completely empty string, if that's what the pattern
matched). So if a Java pattern like (?<=c)(?=b) matched the empty
spot between c and b in 'fooabcbar', that pattern will not match
again in the replacement step, when the left and right context are
missing. A pattern that uses negative lookaheads/behinds to identify
its replacement spot will work fine, as will a pattern modified to
match EITHER the desired spot in context OR a completely empty (\A\z)
string."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,d2940ef099f50581fec9e58ab988c2309f28eab5,Chapman Flack,2019-09-05T02:09:37Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,309,286,23,"Now with XQuery regular expression functions

Limitations:

USING OCTETS not supported, only USING CHARACTERS
(desugared as: usingOctets => false, the default)

The ISO SQL rules for newline handling for ^ . $ \s \S
(which come from Unicode UTS#18 RL1.6) are not supported,
only the original W3C XQuery rules. To preclude confusion,
w3cNewlines => true must be passed in every call. (That will
allow an ISO compliant implementation, if later developed,
without confusing the semantics.)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,76504e7ea231ccb115969babb98893b223d99912,Chapman Flack,2019-09-05T02:12:42Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,227,227,0,"Add javadocs for the XQuery regex functions

Merely documenting these Swiss-army-knife-like functions
is a job in itself."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,2b8939b25a4d4b455f4e808a32ef815805639b05,Chapman Flack,2019-08-26T00:13:30Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,133,113,20,"More on the XQuery regular expression functions

They should now return the correct results in all of the cases
that do not actually require compiling or evaluating an XQuery
regular expression. :)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,27211f3d2e64647410c1122efc5d66b59edb3649,Chapman Flack,2019-08-06T02:57:44Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,128,99,29,"Ok, about that hex/base64 business

There's an earlier-overlooked subtlety in the spec. The algorithms
""Mapping SQL data types to XML Schema data types"" and ""Determination
of an XQuery formal type notation"" have disjoint sets of callers, with
the latter being called to type parameters and context items passed in
to XMLQUERY and therefore XMLTABLE (and also, in the spec, the values
passed to XMLDOCUMENT and XMLPI, but not to other node constructors).
The former method is used in other places where the types need to be
mapped.

The callers of the determine-formal-type method correspond here to
callers of typeXS(), and the callers of the mapping-SQL-types method
to the callers of typeXT() (the T now seems mnemonic of ""target"" type).

Weirdly, the mapping-SQL-types method (and therefore now typeXT) is
specified to honor the xmlbinary setting (hex or base64) currently
in effect, but the determine-formal-type method is not: it's specified
instead to always declare xs:hexBinary as the Schema type for an SQL
binary string.

There could be an editorial mistake here needing to be clarified,
because in the rules for XMLQUERY, after declaring the formal type
statically with determine-formal-type (therefore as hex for a binary
string, irrespective of the xmlbinary setting), the value to be bound
comes from an application of XMLCAST (which uses mapping-SQL-types and
therefore honors the xmlbinary setting), and that could lead to
violating type safety by binding an xs:base64Binary where the declared
type is xs:hexBinary.

As a saving grace (which will have to do until some clarification can
be obtained on the spec), the mapJDBCofSQLvalueToXdmAtomicValue method
here was already ignoring its 'encoding' parameter and producing
whichever type (hex or base64) had been statically declared. For now,
it'll just keep right on doing that."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,f1b70fcfcff3dedc89a841437b9e697e01b6f3d7,Chapman Flack,2019-08-05T02:22:40Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,50,46,4,"Now with XMLCAST of XML to non-XML

Or most of it, anyway. Still need to account for enc in this
case. It's being assumed to be hex."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,0d54124670f104518e0b204d882fdf03627c8384,Chapman Flack,2019-09-05T02:18:57Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,38,36,2,Now with XMLCAST of non-XML to XML
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,d3a3ff56168c285e64b1fd669ff32824b507cb51,Chapman Flack,2019-08-04T03:09:29Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,91,89,2,The easy cases of XMLCAST
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,bb3d7ec7a7555e895490ac477fafb5f4e92daf5c,Chapman Flack,2019-08-03T19:45:49Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,52,52,0,"As PostgreSQL lacks XMLTEXT function, build it

This should be about as nearly as possible one quantum of
development effort. But it does illustrate a subtlety in
the SAX API docs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,cf997753d38ec825c13d2cd3c01cd82bc8a8901c,Chapman Flack,2019-08-24T03:15:02Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,576,502,74,"Support column values that aren't atomic types

Away with the ""fully general rules for returning XMLTABLE output
are not yet implemented"" message.

Also, therefore, away with the stopgap casts sprinkled all through
the examples in the docs.

There remains a data() around the @id bare-attribute example, because
so help me, the spec seems to require err:XPTY0004 if an actual bare
attribute is returned."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,3b5376dbbf4cd903dc9b196384ab3895d8c8552c,Chapman Flack,2019-07-16T04:19:19Z,chap@anastigmatix.net,Chapman Flack,2019-09-05T23:12:33Z,chap@anastigmatix.net,33,24,9,"Last two straggling XMLCAST/timezone rules

However ... the earlier, drop-the-timezone rules are broken
for xs:time, owing to a (now reported) Saxon bug.

  https://saxonica.plan.io/issues/4254

Waiting for an updated Saxon version number for the pom....

... got it, fixed in Saxon-HE 9.9.1-5:

SELECT
    *
  FROM
    (SELECT TIME WITH TIME ZONE '18:25:29.900005Z' AS ""FOO"") AS p,
    ""xmltable""('$FOO', passing => p, columns => array[ '.' ])
      AS (bar time);

with 9.9.1-4:

        FOO         |   bar
--------------------+----------
 18:25:29.900005+00 | 18:25:29

SELECT sqlj.replace_jar('file:Saxon-HE-9.9.1-5.jar', 'saxon', false);
Then:
        FOO         |       bar
--------------------+-----------------
 18:25:29.900005+00 | 18:25:29.900005"
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,226ef77f920df387f66d58ab8188435eab92a1c6,Chapman Flack,2019-08-25T15:20:16Z,chap@anastigmatix.net,Chapman Flack,2019-08-28T02:30:11Z,chap@anastigmatix.net,209,194,15,"Implement the missing casting of atomic outputs

Remove the ""Casting AV to BV is not yet implemented"" message
in XMLTABLE, and the accompanying need to write explicit casts
everywhere in the column expressions for atomic column types.

Still to do: XMLCAST General Rules 4(i)(vii) and (viii).
Also, the handling of column values that aren't atomic types.
For now, the ""fully general rules for returning XMLTABLE output are
not yet implemented"" message is still there.

The S9 code now uses Java 8 lambdas, which means that from now, when
built with the saxon-examples profile enabled, the examples
  -- all the examples, not just S9 :( --
will be built with Java 8 specified for source and target, and will
not run on earlier VMs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,83504b26dc7dc50ab8d653090e3fa823ad5e490b,Chapman Flack,2019-07-13T01:55:45Z,chap@anastigmatix.net,Chapman Flack,2019-08-25T17:46:24Z,chap@anastigmatix.net,4,2,2,"JDBC SQLType FLOAT aliases DOUBLE, not REAL

Should have no practical significance anyway, as PL/Java's
JDBC implementation should only report the types REAL or DOUBLE.
But the order in the switch should not mislead a reader of the code."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,2951e8adca1792fc7af18f24246aadd30c257b37,Chapman Flack,2019-07-13T20:08:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-25T17:46:24Z,chap@anastigmatix.net,68,68,0,Stub in the 9075-2:2006 XQuery *_regex functions
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,96d49b41e1c0f022f42c157f2b48bd8ca436db2e,Chapman Flack,2019-07-22T03:47:26Z,chap@anastigmatix.net,Chapman Flack,2019-08-25T17:46:24Z,chap@anastigmatix.net,10,5,5,"Accomodate Saxon 9.8 to 9.9 API changes

A few small changes to allow depending on the latest, 9.9 series
Saxon releases.

XQueryEvaluator.setContextItem() can now throw a checked exception
(in the case of a query that declares a context item, and does not
declare it to be external).

The change of the return type of XdmValue.iterator() from
XdmSequenceIterator to Iterator<XdmItem> seems to have not been
meant for release. The method still returns an XdmSequenceIterator
(confirmed in the source), so the best solution appears to be a
narrowing cast, rather than any change to the expected return type:

https://sourceforge.net/p/saxon/mailman/message/36716685/"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,c7d31ea7883fecaea401e43c1ea6f9e5d8402820,Chapman Flack,2019-08-25T17:26:41Z,chap@anastigmatix.net,Chapman Flack,2019-08-25T17:33:34Z,chap@anastigmatix.net,19,12,7,"Preserve example loadability pre-PG-8.4.

PostgreSQL 8.4 or later is needed not just by CTEs but by
function declarations with parameter defaults. And of course
functions mentioning the XML type should not be declared if
the server lacks it."
,pljava-so/src/main/c/TypeOid.c,de7558efa30a8e639ec20bf75e9993379a1bd1bf,Chapman Flack,2019-08-25T17:24:35Z,chap@anastigmatix.net,Chapman Flack,2019-08-25T17:33:34Z,chap@anastigmatix.net,1,1,0,"Preserve buildability pre-PG-9.3.

A new C source file was added that didn't include pljava.h,
needed for a compaitibility macro before PostgreSQL 9.3."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava-so/src/main/c/type/SQLXMLImpl.c,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceReader.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,4882c818c596196cbc7bd4034950e3241cc38fc0,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:06:04Z,chap@anastigmatix.net,2784,2596,188,"Merge pull request #227 from bug/REL1_5_STABLE/issue225

Allow returning or passing to PostgreSQL instances of the SQLXML
interface that are not PL/Java's own internal implementation (those
obtained from JDBC drivers to other databases, for example)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,39b374c12b67a5b1890662c9b68e09d41ea7fc8e,Chapman Flack,2019-08-24T01:02:26Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T01:02:26Z,chap@anastigmatix.net,76,68,8,"Merge pull request #231 from trackjdk/REL1_5_STABLE/java9

When building on Java 9 or later, use javac's --release option
rather than the obsolete -source/-target, to avoid building
classes that throw link errors on older runtimes."
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,64c0e3fd62867ebe1279a81add38b162f85716c0,Chapman Flack,2019-08-24T00:13:03Z,chap@anastigmatix.net,Chapman Flack,2019-08-24T00:13:03Z,chap@anastigmatix.net,91,86,5,"Let StAX copies preserve empty-element-ness

A pleasant side effect of having to reimplement XMLEventWriter
to XMLStreamWriter bridging is the chance to get the distinction
between empty elements and bare start/end element pairs right.
XMLStreamWriter has distinct methods for those, but there is no
obvious way to preserve the distinction at the XMLEventWriter
level.

There's a non-obvious way, though, if the StartElement and
EndElement events have parser-supplied Locations; if the
locations are the same (and not both all unknown), it's an
empty element."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,dc0f51d6280daec465a44f36b48643ae958a9fa1,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,230,226,4,"Work around Java 9+ XMLEventReader regression

An XMLEventWriter can be created over an XMLStreamWriter by
wrapping the latter in a StAXResult and using XMLOutputFactory's
createXMLEventWriter(Result) method. In Java 8 and earlier, that
will work for any underlying XMLStreamWriter object, but a
regression in Java 9 means you will only get a ClassCastException
for your troubles, if the XMLStreamWriter is anything but the
non-exported internal one from the Java runtime itself, which
application code has no way to extend.

Reported, but still in the notorious Java-bug-system limbo where
no number is assigned and no reply is heard for nobody knows
how long. ""Internal review ID"" 9062000, for all the good that
does anyone."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,dc0f51d6280daec465a44f36b48643ae958a9fa1,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,230,226,4,"Work around Java 9+ XMLEventReader regression

An XMLEventWriter can be created over an XMLStreamWriter by
wrapping the latter in a StAXResult and using XMLOutputFactory's
createXMLEventWriter(Result) method. In Java 8 and earlier, that
will work for any underlying XMLStreamWriter object, but a
regression in Java 9 means you will only get a ClassCastException
for your troubles, if the XMLStreamWriter is anything but the
non-exported internal one from the Java runtime itself, which
application code has no way to extend.

Reported, but still in the notorious Java-bug-system limbo where
no number is assigned and no reply is heard for nobody knows
how long. ""Internal review ID"" 9062000, for all the good that
does anyone."
,pljava/src/main/java/org/postgresql/pljava/jdbc/XMLEventToStreamConsumer.java,dc0f51d6280daec465a44f36b48643ae958a9fa1,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,Chapman Flack,2019-08-23T04:50:27Z,chap@anastigmatix.net,230,226,4,"Work around Java 9+ XMLEventReader regression

An XMLEventWriter can be created over an XMLStreamWriter by
wrapping the latter in a StAXResult and using XMLOutputFactory's
createXMLEventWriter(Result) method. In Java 8 and earlier, that
will work for any underlying XMLStreamWriter object, but a
regression in Java 9 means you will only get a ClassCastException
for your troubles, if the XMLStreamWriter is anything but the
non-exported internal one from the Java runtime itself, which
application code has no way to extend.

Reported, but still in the notorious Java-bug-system limbo where
no number is assigned and no reply is heard for nobody knows
how long. ""Internal review ID"" 9062000, for all the good that
does anyone."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,af743b4d6d1dd7546b9e01d8976d6199281fed85,Chapman Flack,2019-03-19T03:59:55Z,chap@anastigmatix.net,Chapman Flack,2019-08-23T01:07:49Z,chap@anastigmatix.net,16,13,3,Disheartening to watch javac 8 get this wrong.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,e4cccd246bcabccbc31ac4e55403665bd406dcd2,Chapman Flack,2019-08-20T05:11:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-20T05:11:01Z,chap@anastigmatix.net,3,2,1,"StAX does have an expandEntityReferences knob

It's right there in the API docs, but not in the OWASP
cheat sheet. It works."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,570a459da0b7b2d1fa2ef19822f5e86542241f0d,Chapman Flack,2019-08-20T00:46:44Z,chap@anastigmatix.net,Chapman Flack,2019-08-20T00:46:44Z,chap@anastigmatix.net,260,248,12,"Testing ...

Already a couple unwelcome discoveries:

The SAX and DOM serializers will replace a character with a reference
if it is unrepresentable in the output encoding, but only in places
where a reference is acceptable. Elsewhere, they simply try to write
the character, through an encoder that will silently replace it with
a ?. Hardly acceptable for database infrastructure. It feels wasteful
to instantiate a CharsetEncoder explicitly and make them use that, but
it does succeed in getting exceptions rather than silent information
loss for the unrepresented characters.

The StAX serializer is less fastidious and will replace the character
with a reference even in a text node that is outside of any element.
Technically, that violates the letter of the XML spec (and in fact the
StAX parser will not accept the result!), but at least it is not
information-losing, and it is closer to the spirit of SQL/XML with its
XML(CONTENT) type.

Another headache: the use of a StAX parser in useWrappingElement
turns out to be treacherous; it will throw an exception if it
encounters a character reference before the first element. So much
for using it to decide whether a wrapping element is needed. Will
useWrappingElement need to be hand-rolled? Ugh.

This commit adds an explicit CharsetEncoder for SAXResult and
DOMResult to protect against silent data corruption. StAXResult
is left to do the more-XML(CONTENT)-friendly thing it does."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,570a459da0b7b2d1fa2ef19822f5e86542241f0d,Chapman Flack,2019-08-20T00:46:44Z,chap@anastigmatix.net,Chapman Flack,2019-08-20T00:46:44Z,chap@anastigmatix.net,260,248,12,"Testing ...

Already a couple unwelcome discoveries:

The SAX and DOM serializers will replace a character with a reference
if it is unrepresentable in the output encoding, but only in places
where a reference is acceptable. Elsewhere, they simply try to write
the character, through an encoder that will silently replace it with
a ?. Hardly acceptable for database infrastructure. It feels wasteful
to instantiate a CharsetEncoder explicitly and make them use that, but
it does succeed in getting exceptions rather than silent information
loss for the unrepresented characters.

The StAX serializer is less fastidious and will replace the character
with a reference even in a text node that is outside of any element.
Technically, that violates the letter of the XML spec (and in fact the
StAX parser will not accept the result!), but at least it is not
information-losing, and it is closer to the spirit of SQL/XML with its
XML(CONTENT) type.

Another headache: the use of a StAX parser in useWrappingElement
turns out to be treacherous; it will throw an exception if it
encounters a character reference before the first element. So much
for using it to decide whether a wrapping element is needed. Will
useWrappingElement need to be hand-rolled? Ugh.

This commit adds an explicit CharsetEncoder for SAXResult and
DOMResult to protect against silent data corruption. StAXResult
is left to do the more-XML(CONTENT)-friendly thing it does."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,a03cbbf1486b088c53ef0a77935b65099eef5203,Chapman Flack,2019-08-18T21:13:23Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,135,128,7,"Accept adjustments in PassXML

Demonstrate how the Adjusting.XML.Parsing API can be used from
application code."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,8862669c6052f7f96ee984563a6491b357bdae07,Chapman Flack,2019-08-18T17:17:02Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,934,694,240,"Expose the magic via Adjusting.XML.SourceResult

There is enough magic involved in carefully copying a 'foreign'
SQLXML instance to a native one that it should be exposed through
a new variety of Adjusting.XML.Result, so a caller can adjust any
parser restrictions if needed.

There might only be a 'parser' with restrictions to adjust if
the foreign SQLXML instance chooses to expose its content as
a StreamResult. For content presented in any already-parsed
form, the adjustment methods will be no-ops.

In passing, factor out the parsing adjustment methods to a new
interface Adjusting.XML.Parsing inherited by both Source and Result."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,8862669c6052f7f96ee984563a6491b357bdae07,Chapman Flack,2019-08-18T17:17:02Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,934,694,240,"Expose the magic via Adjusting.XML.SourceResult

There is enough magic involved in carefully copying a 'foreign'
SQLXML instance to a native one that it should be exposed through
a new variety of Adjusting.XML.Result, so a caller can adjust any
parser restrictions if needed.

There might only be a 'parser' with restrictions to adjust if
the foreign SQLXML instance chooses to expose its content as
a StreamResult. For content presented in any already-parsed
form, the adjustment methods will be no-ops.

In passing, factor out the parsing adjustment methods to a new
interface Adjusting.XML.Parsing inherited by both Source and Result."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,8862669c6052f7f96ee984563a6491b357bdae07,Chapman Flack,2019-08-18T17:17:02Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,934,694,240,"Expose the magic via Adjusting.XML.SourceResult

There is enough magic involved in carefully copying a 'foreign'
SQLXML instance to a native one that it should be exposed through
a new variety of Adjusting.XML.Result, so a caller can adjust any
parser restrictions if needed.

There might only be a 'parser' with restrictions to adjust if
the foreign SQLXML instance chooses to expose its content as
a StreamResult. For content presented in any already-parsed
form, the adjustment methods will be no-ops.

In passing, factor out the parsing adjustment methods to a new
interface Adjusting.XML.Parsing inherited by both Source and Result."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,a47baed4baf45deb6d366184a3c67a02ebb6f553,Chapman Flack,2019-08-16T03:07:26Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,406,333,73,"Handle foreign StreamSource with 'wrong' encoding

If a 'foreign' SQLXML object elects to present its content as
a StreamSource, there is no law that says its encoding will match
the PostgreSQL server encoding, so the copying must account for that."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,28ee34e15a1bfc048bb5fe545d30940e693ec053,Chapman Flack,2019-08-16T23:30:16Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,398,398,0,Going to need a MarkableSequenceReader also
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceReader.java,28ee34e15a1bfc048bb5fe545d30940e693ec053,Chapman Flack,2019-08-16T23:30:16Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:17Z,chap@anastigmatix.net,398,398,0,Going to need a MarkableSequenceReader also
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,9fb0147f1ad6f518b367ec3b59bd19e5ec2a5f18,Chapman Flack,2019-08-16T00:59:07Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T22:51:04Z,chap@anastigmatix.net,135,130,5,Prepare DeclProbe to also work with char input
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,ff83b190507af18a2506387bfb6b4522481d58ab,Chapman Flack,2019-08-18T05:06:35Z,chap@anastigmatix.net,Chapman Flack,2019-08-18T13:40:10Z,chap@anastigmatix.net,17,10,7,"More on PassXML example

Fix a thinko in SQLXMLProxy; also exploit Adjusting.XML.StreamResult
to rule out the embarrassing ""Unimplemented combination of
StreamSource/StreamResult"" exception that ought to be avoidable, and
now is."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,ff11aca33d82a146a9e44051a2bad802a2a6a92b,Chapman Flack,2019-08-11T06:32:14Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:40Z,chap@anastigmatix.net,24,22,2,"Spread awareness in comments in PassXML example

The boilerplate code in lowLevelXMLEcho() might invite copying
for other purposes and contexts; add comments indicating where
it might be appropriate to make restrictive configuration tweaks."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-so/src/main/c/Invocation.c,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-so/src/main/c/SubXactListener.c,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,a9a79b75dc7b31ede55cf49f3d47a98bf90219ea,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:37:01Z,chap@anastigmatix.net,1775,1552,223,"Merge branch 'REL1_5_STABLE' into bug/REL1_5_STABLE/issue225

Pick up recent merges to be able to make use of
the Adjusting.XML API."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,c9e48ed341f538378e29bde76c54b59a3140dc0b,Chapman Flack,2019-08-12T02:23:42Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:23:42Z,chap@anastigmatix.net,1319,1205,114,Merge pull request #230 from feature/REL1_5_STABLE/adjustingAPI
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c9e48ed341f538378e29bde76c54b59a3140dc0b,Chapman Flack,2019-08-12T02:23:42Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:23:42Z,chap@anastigmatix.net,1319,1205,114,Merge pull request #230 from feature/REL1_5_STABLE/adjustingAPI
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava-so/src/main/c/Invocation.c,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava-so/src/main/c/SubXactListener.c,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,10129bd0e1c834ccb58bb033c1a6928e2a788e68,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T02:21:43Z,chap@anastigmatix.net,348,255,93,Merge pull request #229 from bug/REL1_5_STABLE/issue228
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,26b53914776868ae58b7b1e6bee9e51452e63daf,Chapman Flack,2019-08-12T00:35:40Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:27:37Z,chap@anastigmatix.net,446,411,35,"Now with Stream and SAX Results also

The adjustments offered on Result are, so far, the ones offered
on Source, and chiefly so there will be a way to adjust any
implicitly-created parser used to verify the content written to
the Result. (A couple additional methods provide a way to influence
whether a StreamResult produces an OutputStream or a Writer).

The SAX version is essentially decorative (for now, anyway, a
verifying parser isn't created for a SAX result), and StAX and
DOM versions are not even provided."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,26b53914776868ae58b7b1e6bee9e51452e63daf,Chapman Flack,2019-08-12T00:35:40Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:27:37Z,chap@anastigmatix.net,446,411,35,"Now with Stream and SAX Results also

The adjustments offered on Result are, so far, the ones offered
on Source, and chiefly so there will be a way to adjust any
implicitly-created parser used to verify the content written to
the Result. (A couple additional methods provide a way to influence
whether a StreamResult produces an OutputStream or a Writer).

The SAX version is essentially decorative (for now, anyway, a
verifying parser isn't created for a SAX result), and StAX and
DOM versions are not even provided."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,572f91a2a87a585058c588093f14c6c9c4d96c81,Chapman Flack,2019-07-31T05:39:23Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:27:37Z,chap@anastigmatix.net,576,497,79,"Initial implementation for SAX, StAX, DOM Sources

SAX and DOM are similar in supporting (one way or another) pretty much
all of the settings mentioned in the OWASP cheat sheet, using largely
the same URIs (to do someday: deduplicate those URI strings in the
code). StAX seems to have much more limited configurability; of the six
tweaker methods currently provided on Adjusting.XML.Source, for only
three could I find StAX knobs able to tweak them; the others will do
nothing.

StAX only seems to have one property to control entity expansion; it
would be nice if that meant it turned general and parameter entities off
or on together, but it doesn't. It seems to only affect general entity
expansion, leaving no way to turn parameter entities off (other than
turning off the whole DTD, which is an available setting)."
,pljava-api/src/main/java/org/postgresql/pljava/Adjusting.java,546c3010628de40cb0de48c65ed9b737935865f1,Chapman Flack,2019-07-31T02:28:02Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:27:37Z,chap@anastigmatix.net,246,246,0,"Add API to adjust OWASP-suggested parser settings

XML parsers supplied in the Java runtime environment have many behavior
settings that may be appropriate when all input documents are of known
provenance, but are best changed to more restrictive settings if input
from unknown sources might be processed. The recommendations of the
Open Web Application Security Project naturally lean toward making the
settings restrictive by default, with a way for an application to relax
them when it has more trust in the input.

https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java

However, the recommended settings are so restrictive (such as rejecting
with an error any document with a DTD, even a purely internal one), that
it would be madness to impose them without a simple way for application
code to selectively relax them. And the Java APIs make tweaking those
settings insanely difficult. Most (but not all!) of the things that can
be set are identified by URIs, the exact spellings of which have to be
gleaned from multiple sources (or copied, cargo-cult-like, from the
OWASP cheat sheet), some have been spelled more than one way in
different supplied parsers or versions, and the details vary between the
major XML APIs (SAX, DOM, StAX, for starters) in the out-of-the-box Java
runtime.

Part of the appeal of JDBC's SQLXML interface is that it hides a lot of
the fiddly details needed to configure Java's different styles of XML
parser. You call getSource(SAXSource.class) and you get a SAXSource,
or getSource(StAXSource.class) and you get a StAXSource, and so for
DOMSource, all ready to use in each case. A side effect of that hiding
is that in two out of three of those cases, you don't have access to the
objects that let you adjust the settings. In the case of a SAXSource,
you can retrieve the object, but again, you change the settings by
throwing obscure mystery URIs at it until you find the ones it accepts.

So a simpler API is needed. In keeping with the extensible way SQLXML's
getSource() and getResult() are designed, you can call getSource and
pass, say, not SAXSource.class, but Adjusting.XML.SAXSource.class, and
you get back something with a little fluent API that lets you say
.allowDTD(true).externalGeneralEntities(true).xIncludeAware(true).get()
and the final get() returns an ordinary SAXSource with the desired
settings.

For now, this interface only allows settings on getSource(). Something
similar will be needed on setResult() also (if nothing else, to provide
a way to relax the settings of the verifier that eavesdrops on output
being written)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,eea1c5e49863594e23839aa3650039150ba6f52d,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,108,92,16,Merge pull request #226 from feature/REL1_5_STABLE/paramnames
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,eea1c5e49863594e23839aa3650039150ba6f52d,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,108,92,16,Merge pull request #226 from feature/REL1_5_STABLE/paramnames
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,eea1c5e49863594e23839aa3650039150ba6f52d,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,Chapman Flack,2019-08-12T01:22:36Z,chap@anastigmatix.net,108,92,16,Merge pull request #226 from feature/REL1_5_STABLE/paramnames
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,fbfec54405a1d4e039e6e197fd0b6b0619862e02,Chapman Flack,2019-08-11T16:17:31Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T16:17:31Z,chap@anastigmatix.net,79,76,3,Add a test for proper Savepoint reusability
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SPIActions.java,441f3ea6ccced7efe10096e8411ed546ce55dd85,Chapman Flack,2019-08-11T16:16:44Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T16:16:44Z,chap@anastigmatix.net,103,42,61,"Migrate SPIActions example to annotations

Adjust the example's state tracker to reflect that now a rolled-back
savepoint gets reborn.

In passing, remove some old-fashioned explicit boxing."
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava-so/src/main/c/Invocation.c,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava-so/src/main/c/SubXactListener.c,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,53aaa42f401e17f0533d2faca9bb5d16f64af9d8,Chapman Flack,2019-08-11T02:28:34Z,chap@anastigmatix.net,Chapman Flack,2019-08-11T05:29:08Z,chap@anastigmatix.net,172,140,32,"A Savepoint is not ""used up"" by rollback

Also fix a (never released) bug in how forId handled the nursery.

Invocation_popInvocation should not be quite so casual about
skipping the onExit() call during exceptional returns; it seems
an internal subtransaction left unreaped can get in PostgreSQL's
way even when error recovery is what's happening anyway."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,793d426656a401b87de59f8b4954de3ca6f337ca,Chapman Flack,2019-08-01T03:05:03Z,chap@anastigmatix.net,Chapman Flack,2019-08-09T02:36:02Z,chap@anastigmatix.net,218,215,3,"SQLXMLProxy class for testing

In passing, the boilerplate for SAX and StAX copying just added
in SQLXML also serves as the missing examples in lowLevelXMLEcho."
,pljava-so/src/main/c/type/SQLXMLImpl.c,38856645e23b09673a7dfe5d7fb63d2980e08480,Chapman Flack,2019-07-29T05:22:03Z,chap@anastigmatix.net,Chapman Flack,2019-08-09T02:36:02Z,chap@anastigmatix.net,188,179,9,"Allow return/set/update w/ a non-pljava SQLXML

Add to SQLXMLImpl the ability to accept a readable SQLXML object
that isn't an instance of SQLXMLImpl, and copy its content to
a new SQLXMLImpl for PostgreSQL's use.

Calls getSource(null) on the foreign object, giving it the choice
of what sort of Source to return; will accept a StreamSource,
SAXSource, StAXSource, or DOMSource. Does not yet do anything to
work around the possible case of a StreamSource that isn't in the
server encoding; encoding errors will be thrown.

In passing, arrange for StAXResultAdapter not to mess up element names."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,38856645e23b09673a7dfe5d7fb63d2980e08480,Chapman Flack,2019-07-29T05:22:03Z,chap@anastigmatix.net,Chapman Flack,2019-08-09T02:36:02Z,chap@anastigmatix.net,188,179,9,"Allow return/set/update w/ a non-pljava SQLXML

Add to SQLXMLImpl the ability to accept a readable SQLXML object
that isn't an instance of SQLXMLImpl, and copy its content to
a new SQLXMLImpl for PostgreSQL's use.

Calls getSource(null) on the foreign object, giving it the choice
of what sort of Source to return; will accept a StreamSource,
SAXSource, StAXSource, or DOMSource. Does not yet do anything to
work around the possible case of a StreamSource that isn't in the
server encoding; encoding errors will be thrown.

In passing, arrange for StAXResultAdapter not to mess up element names."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,65bef285fe7450f802f9bb78df1837a3ae8f04d3,Chapman Flack,2019-08-07T00:33:21Z,chap@anastigmatix.net,Chapman Flack,2019-08-09T02:36:02Z,chap@anastigmatix.net,139,102,37,"Add DualState.pinUnlessReleased()

There are certainly occasions for idempotent close or free methods
that do not need an exception thrown if the thing to be released
already has been. In VarlenaWrapper, for example."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,65bef285fe7450f802f9bb78df1837a3ae8f04d3,Chapman Flack,2019-08-07T00:33:21Z,chap@anastigmatix.net,Chapman Flack,2019-08-09T02:36:02Z,chap@anastigmatix.net,139,102,37,"Add DualState.pinUnlessReleased()

There are certainly occasions for idempotent close or free methods
that do not need an exception thrown if the thing to be released
already has been. In VarlenaWrapper, for example."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,d76750ddf17d928b755a0c6541c03e5d343397d4,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,108,92,16,"Allow a parameter's SQL name to be explicit.

The SQL generator has been emitting CREATE FUNCTION with parameter
names that match the Java names of the function parameters, so that
the SQL functions can be called with named-parameter notation.

But there can be cases when a different SQL name is wanted for the
parameter, whether because the Java name happens to be a reserved
SQL word, or because a particular SQL parameter name is wanted (comes
from a standard, maybe?) and happens to be a reserved Java word,
or just because.

Further overload the per-parameter @SQLType annotation (which is
already a little overloaded and misnamed, being able to supply
default values as well as type information) with a name property,
which can be a regular identifier or a delimited one (in case a
parameter name is really wanted with the same spelling as an SQL
reserved word).

Copy in the ISO_DELIMITED_IDENTIFIER regex from the master branch,
to allow checking that ... nothing else is really checked that
carefully yet, but everything has to start somewhere."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,d76750ddf17d928b755a0c6541c03e5d343397d4,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,108,92,16,"Allow a parameter's SQL name to be explicit.

The SQL generator has been emitting CREATE FUNCTION with parameter
names that match the Java names of the function parameters, so that
the SQL functions can be called with named-parameter notation.

But there can be cases when a different SQL name is wanted for the
parameter, whether because the Java name happens to be a reserved
SQL word, or because a particular SQL parameter name is wanted (comes
from a standard, maybe?) and happens to be a reserved Java word,
or just because.

Further overload the per-parameter @SQLType annotation (which is
already a little overloaded and misnamed, being able to supply
default values as well as type information) with a name property,
which can be a regular identifier or a delimited one (in case a
parameter name is really wanted with the same spelling as an SQL
reserved word).

Copy in the ISO_DELIMITED_IDENTIFIER regex from the master branch,
to allow checking that ... nothing else is really checked that
carefully yet, but everything has to start somewhere."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,d76750ddf17d928b755a0c6541c03e5d343397d4,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,Chapman Flack,2019-07-13T19:55:26Z,chap@anastigmatix.net,108,92,16,"Allow a parameter's SQL name to be explicit.

The SQL generator has been emitting CREATE FUNCTION with parameter
names that match the Java names of the function parameters, so that
the SQL functions can be called with named-parameter notation.

But there can be cases when a different SQL name is wanted for the
parameter, whether because the Java name happens to be a reserved
SQL word, or because a particular SQL parameter name is wanted (comes
from a standard, maybe?) and happens to be a reserved Java word,
or just because.

Further overload the per-parameter @SQLType annotation (which is
already a little overloaded and misnamed, being able to supply
default values as well as type information) with a name property,
which can be a regular identifier or a delimited one (in case a
parameter name is really wanted with the same spelling as an SQL
reserved word).

Copy in the ISO_DELIMITED_IDENTIFIER regex from the master branch,
to allow checking that ... nothing else is really checked that
carefully yet, but everything has to start somewhere."
,pljava-so/src/main/c/PgSavepoint.c,9ed8e335e2c233a75668a7ecd7c65a74e42d52c7,Chapman Flack,2019-06-29T01:49:42Z,chap@anastigmatix.net,Chapman Flack,2019-06-29T01:49:42Z,chap@anastigmatix.net,1,1,0,Merge pull request #223 from bug/REL1_5_STABLE/issue221
,pljava-so/src/main/include/fallback/jdbc/java_sql_Types.h,3d7abe79c689cb4d6f2f48f31fc8b9aaa1296cd3,Chapman Flack,2019-06-28T00:07:36Z,chap@anastigmatix.net,Chapman Flack,2019-06-28T00:07:36Z,chap@anastigmatix.net,288,254,34,"Merge pull request #222 from trackjdk/REL1_5_STABLE/java9

Permits building the 1.5 series with Java 9 or newer JDKs, otherwise
without radical change or loss of back compatibility.

The Java 12 compiler can no longer generate code for targets older than
Java 7, so if a PL/Java must be built to run in Java 6, the build must
be done with a JDK no newer than 11.

Addresses issue #212."
,pljava-so/src/main/c/PgSavepoint.c,536fc7b8583612fd702273747dac65046ef77e2f,Chapman Flack,2019-06-27T04:44:47Z,chap@anastigmatix.net,Chapman Flack,2019-06-27T05:37:39Z,chap@anastigmatix.net,1,1,0,"One line missed in finalizers refactoring

Only caught when tested in PG 9.6 or earlier, because the function
was already a no-op upstream since PG 10 (postgres/postgres@1833f1a)."
,pljava-so/src/main/include/fallback/jdbc/java_sql_Types.h,af0557a162fd57cf4aed8896037ba29a0383c369,Chapman Flack,2019-06-14T00:29:55Z,chap@anastigmatix.net,Chapman Flack,2019-06-14T02:27:09Z,chap@anastigmatix.net,193,181,12,"Build on Java versions with and without javah

Java 8 added a -h option to javac to allow generation of .h files
from Java sources in one step, subsuming (most of) the function of
the older javah command. Java 10 duly axed javah, leaving only the
javac -h option, a stroke of brilliance that left no way to h a class
file, such as java.sql.Types, for which no source file is present.

The smart-alecky workaround would be to add a new <scriptdef> in the
build process that would iterate java.sql.Types.class.getDeclaredFields()
and write them to an .h file. It would hardly be difficult (at least
for this special case, a class defining only some int constants and
loadable at build time with no dependency issues).

But that hardly seems necessary, considering that (as of Java 12) there
have been no changes to java.sql.Types constants since Java 8, there is
only one PL/Java source file (type/Oid.c) that uses them, and that file
will probably go away anyway in a foreseeable PL/Java release. So here,
a version of java_sql_Types.h generated on Java 8 is simply provided in
include/fallback/jdbc. If it is not gone by the time new Types constants
are added in a future Java version, they can be added to it then.

There is some conditional compilation in Oid.c based on this file, so
continue to generate it when possible (using javah unless the build JDK
is 10 or newer), switching to javac -h and the fallback copy only for 10
or newer."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,c0c14d9948a2e561a541d19d2d0065897589b94d,Chapman Flack,2019-03-20T02:44:35Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:25Z,chap@anastigmatix.net,42,10,32,java7ify more lookups of standard charsets.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,c0c14d9948a2e561a541d19d2d0065897589b94d,Chapman Flack,2019-03-20T02:44:35Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:25Z,chap@anastigmatix.net,42,10,32,java7ify more lookups of standard charsets.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,c0c14d9948a2e561a541d19d2d0065897589b94d,Chapman Flack,2019-03-20T02:44:35Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:25Z,chap@anastigmatix.net,42,10,32,java7ify more lookups of standard charsets.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,003f75de47e62d8faf789d0b7c4d08dab29ad275,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T03:01:18Z,chap@anastigmatix.net,34,17,17,Re-java7ify after REL1_5_STABLE merge.
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/DualState.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Exception.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/ExecutionPlan.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Function.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/InstallHelper.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Invocation.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/JNICalls.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/PgSavepoint.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SPI.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SQLInputFromTuple.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SQLOutputToTuple.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SubXactListener.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/TypeOid.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/XactListener.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/AclId.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Composite.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/ErrorData.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/HeapTupleHeader.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/JavaWrapper.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Portal.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Relation.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/SingleRowReader.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Time.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Timestamp.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TriggerData.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Tuple.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleDesc.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleTable.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Type.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/UDT.c,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/DualState.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/Invocation.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/JNICalls.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/PgSavepoint.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/SPI.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/SQLInputFromTuple.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/pljava.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/ErrorData.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/JavaWrapper.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Portal.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Relation.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/SingleRowReader.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/TriggerData.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Tuple.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/TupleDesc.h,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/HeapTupleHeader.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/JavaWrapper.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,614f417f459c4dcf06d25f9fa34d7f6d928107fa,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-11T02:35:28Z,chap@anastigmatix.net,7486,4960,2526,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,edb6aaa8ae617314e7bdb0b3d138617c46a23d9a,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:32:16Z,chap@anastigmatix.net,569,303,266,Merge chore/REL1_5_STABLE/genericize
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,a79958a226d9bd523d9cd8a2f905d5d9200b3264,Chapman Flack,2019-04-13T18:54:07Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:30:21Z,chap@anastigmatix.net,569,303,266,"Adopt generics in more places where applicable.

A solid, if non-exhaustive, effort to bring the code up to date with
Java generics and transparent boxing/unboxing, based on a simplistic
mechanical search for places where unnecessary explicit casting/boxing/
unboxing was being done.

In the files touched, also elide a bunch of 'this.' qualifications on
instance method calls. And fix the spelling of 'Coercion' in three methods.

Bonus: fix three very old thinkos in SPIPreparedStatement that no one
ever seems to have run into or reported."
,pljava-so/src/main/c/ExecutionPlan.c,222664605dafee144f9dc5d7512357dbe313c32b,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,332,218,114,Merge refactor/REL1_5_STABLE/nativeconstants
,pljava-so/src/main/c/SPI.c,222664605dafee144f9dc5d7512357dbe313c32b,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,332,218,114,Merge refactor/REL1_5_STABLE/nativeconstants
,pljava-so/src/main/c/TypeOid.c,222664605dafee144f9dc5d7512357dbe313c32b,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,332,218,114,Merge refactor/REL1_5_STABLE/nativeconstants
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,222664605dafee144f9dc5d7512357dbe313c32b,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,332,218,114,Merge refactor/REL1_5_STABLE/nativeconstants
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,222664605dafee144f9dc5d7512357dbe313c32b,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:28:38Z,chap@anastigmatix.net,332,218,114,Merge refactor/REL1_5_STABLE/nativeconstants
,pljava-so/src/main/c/ExecutionPlan.c,77ea9d377a98de9632eefeb58c20b851f84e6c68,Chapman Flack,2019-03-16T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:27:07Z,chap@anastigmatix.net,332,218,114,"Use JNI header constant field values.

Neither the javah manual page, nor the Java 8+ javac manual page,
actually comes out and says that static final primitive constants in a
class get #defines created for them in the JNI header, but they do.

The new-in-Java-8 @Native annotation for fields might suggest that
it is needed to get a field copied into the .h file, but really seems
only to ensure that a header is generated even if the class has
no native methods. As long as a header is generated, it seems to get
all the static final primitive fields (that have constant-expression
initializers) whether so annotated or not.

Therefore, take advantage of those to avoid divergent values between
Java and C, either by directly using the #defines from Java in the C
code, or by using StaticAssertStmt to confirm the values match the
existing C constants they are intended to match.

In passing, update the SPI return codes to include the newer ones."
,pljava-so/src/main/c/SPI.c,77ea9d377a98de9632eefeb58c20b851f84e6c68,Chapman Flack,2019-03-16T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:27:07Z,chap@anastigmatix.net,332,218,114,"Use JNI header constant field values.

Neither the javah manual page, nor the Java 8+ javac manual page,
actually comes out and says that static final primitive constants in a
class get #defines created for them in the JNI header, but they do.

The new-in-Java-8 @Native annotation for fields might suggest that
it is needed to get a field copied into the .h file, but really seems
only to ensure that a header is generated even if the class has
no native methods. As long as a header is generated, it seems to get
all the static final primitive fields (that have constant-expression
initializers) whether so annotated or not.

Therefore, take advantage of those to avoid divergent values between
Java and C, either by directly using the #defines from Java in the C
code, or by using StaticAssertStmt to confirm the values match the
existing C constants they are intended to match.

In passing, update the SPI return codes to include the newer ones."
,pljava-so/src/main/c/TypeOid.c,77ea9d377a98de9632eefeb58c20b851f84e6c68,Chapman Flack,2019-03-16T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:27:07Z,chap@anastigmatix.net,332,218,114,"Use JNI header constant field values.

Neither the javah manual page, nor the Java 8+ javac manual page,
actually comes out and says that static final primitive constants in a
class get #defines created for them in the JNI header, but they do.

The new-in-Java-8 @Native annotation for fields might suggest that
it is needed to get a field copied into the .h file, but really seems
only to ensure that a header is generated even if the class has
no native methods. As long as a header is generated, it seems to get
all the static final primitive fields (that have constant-expression
initializers) whether so annotated or not.

Therefore, take advantage of those to avoid divergent values between
Java and C, either by directly using the #defines from Java in the C
code, or by using StaticAssertStmt to confirm the values match the
existing C constants they are intended to match.

In passing, update the SPI return codes to include the newer ones."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,77ea9d377a98de9632eefeb58c20b851f84e6c68,Chapman Flack,2019-03-16T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:27:07Z,chap@anastigmatix.net,332,218,114,"Use JNI header constant field values.

Neither the javah manual page, nor the Java 8+ javac manual page,
actually comes out and says that static final primitive constants in a
class get #defines created for them in the JNI header, but they do.

The new-in-Java-8 @Native annotation for fields might suggest that
it is needed to get a field copied into the .h file, but really seems
only to ensure that a header is generated even if the class has
no native methods. As long as a header is generated, it seems to get
all the static final primitive fields (that have constant-expression
initializers) whether so annotated or not.

Therefore, take advantage of those to avoid divergent values between
Java and C, either by directly using the #defines from Java in the C
code, or by using StaticAssertStmt to confirm the values match the
existing C constants they are intended to match.

In passing, update the SPI return codes to include the newer ones."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,77ea9d377a98de9632eefeb58c20b851f84e6c68,Chapman Flack,2019-03-16T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:27:07Z,chap@anastigmatix.net,332,218,114,"Use JNI header constant field values.

Neither the javah manual page, nor the Java 8+ javac manual page,
actually comes out and says that static final primitive constants in a
class get #defines created for them in the JNI header, but they do.

The new-in-Java-8 @Native annotation for fields might suggest that
it is needed to get a field copied into the .h file, but really seems
only to ensure that a header is generated even if the class has
no native methods. As long as a header is generated, it seems to get
all the static final primitive fields (that have constant-expression
initializers) whether so annotated or not.

Therefore, take advantage of those to avoid divergent values between
Java and C, either by directly using the #defines from Java in the C
code, or by using StaticAssertStmt to confirm the values match the
existing C constants they are intended to match.

In passing, update the SPI return codes to include the newer ones."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,912d00abf49f35a13a3c180f315cc5d560add9df,Chapman Flack,2019-06-05T02:25:24Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:25:24Z,chap@anastigmatix.net,79,49,30,Merge refactor/REL1_5_STABLE/specialization
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,fb9d5820719b017e250c7780ddb7a47f7c7434a1,Chapman Flack,2019-03-13T02:47:42Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:23:57Z,chap@anastigmatix.net,79,49,30,"Factor out 'specialization' check in SQL generator.

This will make it easier to support idioms where a Java
parameter or return is typed A<B> (or some C that directly or
indirectly extends A<B>) and the generator needs to find B.

Fixes a latent (in this branch) bug where parameterized return
types could be written into the AS string in all their glory,
instead of properly as their erasures. It's latent in this branch
because the only use made of parameterized return types is for
SETOF with Iterator<T>, and the return type isn't written for that
case, but would become a real bug with any future addition of other
idioms involving parameterized return types.

First done in an explorative branch against master, with this
generally-useful refactoring rebased here. A couple other minor
differences from master are also included here, to keep future
merges simpler."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/Backend.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/DualState.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/Exception.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/ExecutionPlan.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/Function.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/Invocation.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/JNICalls.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/PgSavepoint.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/SPI.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/SQLInputFromTuple.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/SQLOutputToTuple.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/SubXactListener.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/XactListener.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/Composite.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/ErrorData.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/HeapTupleHeader.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/JavaWrapper.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/Portal.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/Relation.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/SingleRowReader.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/TriggerData.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/Tuple.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/TupleDesc.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/TupleTable.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/Type.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/c/type/UDT.c,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/DualState.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/Invocation.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/JNICalls.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/PgSavepoint.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/SPI.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/SQLInputFromTuple.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/pljava.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/ErrorData.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/JavaWrapper.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/Portal.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/Relation.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/SingleRowReader.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/TriggerData.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/Tuple.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-so/src/main/include/pljava/type/TupleDesc.h,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/HeapTupleHeader.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/JavaWrapper.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,f2ceec61335f3a78bbe7cfc9c3eb2591ee01e1f4,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:15:03Z,chap@anastigmatix.net,6319,4251,2068,Merge pull request #206 from refactor/REL1_5_STABLE/finalizers
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/Backend.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/InstallHelper.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/type/AclId.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/type/Time.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/type/Timestamp.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/type/TupleTable.c,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,3e688489f8b7a6d05fc90ec7b14869a92f924108,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:07:28Z,chap@anastigmatix.net,96,69,27,Merge pull request #215 from trackpg/REL1_5_STABLE/pg12
,pljava-so/src/main/c/SubXactListener.c,88d24ae5d59589848bf711afa7492729d80ef96e,Chapman Flack,2019-06-05T02:00:19Z,chap@anastigmatix.net,Chapman Flack,2019-06-05T02:00:19Z,chap@anastigmatix.net,2,1,1,"Missed detail in 'simplify SubXactListener'

Somehow overlooked the implicit-declaration warning."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,9bb3f0ce1746aacc0756c609f841af69a48bbcc2,Chapman Flack,2019-04-13T18:25:27Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,20,14,6,"Iterate on a copy of Xact/SubXact handler list

... as was done back in 7d9eed3, just in case some listener's
handler includes an unregister action."
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,9bb3f0ce1746aacc0756c609f841af69a48bbcc2,Chapman Flack,2019-04-13T18:25:27Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,20,14,6,"Iterate on a copy of Xact/SubXact handler list

... as was done back in 7d9eed3, just in case some listener's
handler includes an unregister action."
,pljava-so/src/main/c/PgSavepoint.c,ea9c7dc0f8652eb5b88e1594dc770c4941a830cc,Chapman Flack,2019-04-13T03:32:05Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,158,109,49,"Simplify SubXactListener the same way.

It is a tiny bit more involved, because the ids of savepoints
are passed. To resolve the ids to PgSavepoint objects, the C code
will upcall to the Java forId() method with the Backend.THREADLOCK
monitor held (as in java_thread_pg_entry = block mode), so that
method can get away with an assert Backend.threadMayEnterPG().

The upcall that actually calls the listeners will be made with the
monitor released, as that's The Way It's Been Done. This still is
the PG thread, but without the monitor held, Backend.threadMayEnterPG()
won't know it, so the Java code shouldn't blindly assert it."
,pljava-so/src/main/c/SubXactListener.c,ea9c7dc0f8652eb5b88e1594dc770c4941a830cc,Chapman Flack,2019-04-13T03:32:05Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,158,109,49,"Simplify SubXactListener the same way.

It is a tiny bit more involved, because the ids of savepoints
are passed. To resolve the ids to PgSavepoint objects, the C code
will upcall to the Java forId() method with the Backend.THREADLOCK
monitor held (as in java_thread_pg_entry = block mode), so that
method can get away with an assert Backend.threadMayEnterPG().

The upcall that actually calls the listeners will be made with the
monitor released, as that's The Way It's Been Done. This still is
the PG thread, but without the monitor held, Backend.threadMayEnterPG()
won't know it, so the Java code shouldn't blindly assert it."
,pljava-so/src/main/include/pljava/PgSavepoint.h,ea9c7dc0f8652eb5b88e1594dc770c4941a830cc,Chapman Flack,2019-04-13T03:32:05Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,158,109,49,"Simplify SubXactListener the same way.

It is a tiny bit more involved, because the ids of savepoints
are passed. To resolve the ids to PgSavepoint objects, the C code
will upcall to the Java forId() method with the Backend.THREADLOCK
monitor held (as in java_thread_pg_entry = block mode), so that
method can get away with an assert Backend.threadMayEnterPG().

The upcall that actually calls the listeners will be made with the
monitor released, as that's The Way It's Been Done. This still is
the PG thread, but without the monitor held, Backend.threadMayEnterPG()
won't know it, so the Java code shouldn't blindly assert it."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,ea9c7dc0f8652eb5b88e1594dc770c4941a830cc,Chapman Flack,2019-04-13T03:32:05Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,158,109,49,"Simplify SubXactListener the same way.

It is a tiny bit more involved, because the ids of savepoints
are passed. To resolve the ids to PgSavepoint objects, the C code
will upcall to the Java forId() method with the Backend.THREADLOCK
monitor held (as in java_thread_pg_entry = block mode), so that
method can get away with an assert Backend.threadMayEnterPG().

The upcall that actually calls the listeners will be made with the
monitor released, as that's The Way It's Been Done. This still is
the PG thread, but without the monitor held, Backend.threadMayEnterPG()
won't know it, so the Java code shouldn't blindly assert it."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava-so/src/main/c/XactListener.c,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,81deb0f507602793e76d4022adebdad007160e35,Chapman Flack,2019-04-13T02:30:26Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T18:26:16Z,chap@anastigmatix.net,257,192,65,"Simplify XactListener.

The former implementation using identity hash codes to identify
listeners was not very convincing. While the PostgreSQL
RegisterXactCallback does allow a passthrough arg to the callback
function, it isn't necessary to use that method to keep track of
what listener to call. PostgreSQL simply calls all the callbacks
on the list anyway, and those calls all came through PL/Java's one
xactCB to be dispatched to the right listener. May as well just
register xactCB exactly once, and let it call a list of Java
listeners.

In simplifying this, found it to be unused within PL/Java itself;
SavepointListeners have some coverage in the examples, but
TransactionListeners, none. The documentation for Session describing
transactional attribute semantics isn't accurate; the attributes are
still there, but stopped having transactional semantics in 3ab90e5
(November 2005, released in PL/Java 1.2.0). There is probably no
solution at this point better than deprecating the Session attribute
methods, and advising anyone needing some transactional data store to
implement it from scratch and register a TransactionListener."
,pljava-so/src/main/c/SubXactListener.c,221f83dc1c21f7c14b59b10e2bfd60bbd24add8c,Chapman Flack,2019-04-12T04:13:14Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:45:27Z,chap@anastigmatix.net,6,3,3,"Guarantee threadMayEnterPG for subxact callbacks.

The behavior of PgSavepoint.forId() presupposes that the callbacks
are made on the PG thread, which is perfectly reasonable to suppose,
but could be exposed to surprises in java_thread_pg_entry=allow mode.
This change will make the callbacks behave as if in =block mode.

Perhaps that is too drastic a change for 1.5.x, and the C code
should just make two upcalls, one to forId() and then to the actual
listener, with only the first one locked?"
,pljava-so/src/main/c/JNICalls.c,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava-so/src/main/c/PgSavepoint.c,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava-so/src/main/c/SPI.c,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava-so/src/main/c/SubXactListener.c,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava-so/src/main/include/pljava/JNICalls.h,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava-so/src/main/include/pljava/SPI.h,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,0c21b4bcccb615139de2d16677acc5941a97e37c,Chapman Flack,2019-04-12T03:41:40Z,chap@anastigmatix.net,Chapman Flack,2019-04-13T03:39:12Z,chap@anastigmatix.net,511,255,256,"Simplify PgSavepoint.

This does refer to a bit of what could be called native state,
but not really enough to bother adapting it to DualState. Just
simplify it instead. The PostgreSQL functions it relies on only
need two integers (transaction ID and nest level), so those can
be kept right in the Java object.

It's very tempting to eliminate the special-case code in
Invocation.java for remembering PgSavepoints, and the special code
in SPIConnection to call the special code in Invocation to remember
and forget PgSavepoints, and simply migrate PgSavepoint to using
DualState like most other stuff, and have the Invocation as its
resource owner. But because of the way savepoints nest, it is
sufficient to do what the special-case code now does, and remember
only the outermost savepoint that is set, so the effort of migrating
to a different mechanism doesn't offer much benefit.

It appears that at one time Thomas factored out the savepoint
set/release/rollback logic into functions and a struct that could
be offered upstream to core as new SPI_ functions, but that was a
long time ago and it looks as if core didn't take up the offer. So,
just merge the logic back into PgSavepoint so it isn't scattered all
over creation. There are still the mildly incestuous arrangements
involving SubXactListener, Invocation, and SPIConnection mentioned
above.

Both JDBC and PostgreSQL's BeginInternalSubTransaction allow for a
savepoint to be unnamed, so no longer treat the no-arg setSavepoint
as if it were setSavepoint(""anonymous_savepoint"")."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,e4332ccdb33e5cfc64869ddef871e53641aebf73,Chapman Flack,2019-04-07T23:59:17Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T23:59:17Z,chap@anastigmatix.net,17,14,3,"Allow pin waits to be interruptible.

Interruptible /lock/ waits will have to be added another day,
if at all; they would need both more implementation effort and
a pretty good story for how to make sure the world is safe after
interruption of a lock wait. (Consider: a waiting locker probably
meant to deliver a notice that some native state was being reclaimed;
if that wait is interrupted, the state probably is reclaimed anyway,
while the notice isn't delivered.) Pin waits are comparatively easy."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,561c276186fa15b5783b621e6721a49bd3eafa89,Chapman Flack,2019-03-19T01:21:28Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,62,13,49,"Test holdability of ResultSet from PreparedStatement.

Commit be5e9db got transaction-duration holdability working for
ResultSets produced by Statements, but a problem remains for those
produced by PreparedStatements (issue #209): since cebbd72, those
have been forcibly closed at invocation exit whether you want it or
not, and closing a statement closes any dependent ResultSet."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,561c276186fa15b5783b621e6721a49bd3eafa89,Chapman Flack,2019-03-19T01:21:28Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,62,13,49,"Test holdability of ResultSet from PreparedStatement.

Commit be5e9db got transaction-duration holdability working for
ResultSets produced by Statements, but a problem remains for those
produced by PreparedStatements (issue #209): since cebbd72, those
have been forcibly closed at invocation exit whether you want it or
not, and closing a statement closes any dependent ResultSet."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,561c276186fa15b5783b621e6721a49bd3eafa89,Chapman Flack,2019-03-19T01:21:28Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,62,13,49,"Test holdability of ResultSet from PreparedStatement.

Commit be5e9db got transaction-duration holdability working for
ResultSets produced by Statements, but a problem remains for those
produced by PreparedStatements (issue #209): since cebbd72, those
have been forcibly closed at invocation exit whether you want it or
not, and closing a statement closes any dependent ResultSet."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,561c276186fa15b5783b621e6721a49bd3eafa89,Chapman Flack,2019-03-19T01:21:28Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,62,13,49,"Test holdability of ResultSet from PreparedStatement.

Commit be5e9db got transaction-duration holdability working for
ResultSets produced by Statements, but a problem remains for those
produced by PreparedStatements (issue #209): since cebbd72, those
have been forcibly closed at invocation exit whether you want it or
not, and closing a statement closes any dependent ResultSet."
,pljava-so/src/main/c/DualState.c,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava-so/src/main/c/type/Portal.c,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava-so/src/main/c/type/Type.c,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava-so/src/main/include/pljava/type/Portal.h,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,f0082163890cd9299486c114d074c839159f1761,Chapman Flack,2019-04-07T18:11:04Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,326,193,133,"DualState-ify Portal

As far as I can discern, the complexity in Portal.c involving a
hash map from native to Java Portal objects was only there to support
hooking the Portal cleanup callback for detecting native release.
That callback is supplied the native Portal pointer, so the map was
needed for the callback to find the corresponding Java object. I could
find no indication that it served as a cache, or that a Portal_create
call ever returned a retrieved object rather than a new one.

As it happens, a Portal object has a ResourceOwner, so it should fit
rather directly into the DualState scheme, with no need for such
complexity of its own.

The resource owner callback happens a bit later (at drop of the Portal,
where the cleanup callback could happen as soon as it reached DONE or
FAILED state). A portal can't be executed again after DONE or FAILED
and will protest with an error message if that's attempted, so using
the resource owner may leave a gap in which Java still has the Portal
reference but the Portal will protest with appropriate errors logged
if Java tries to use it. But a non-dangling pointer whose use leads
to appropriate errors being logged seems tolerable, and we will know
about the Portal's release in time to invalidate a dangling pointer."
,pljava-so/src/main/c/DualState.c,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava-so/src/main/c/ExecutionPlan.c,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava-so/src/main/c/type/Portal.c,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava-so/src/main/c/type/Type.c,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava-so/src/main/include/pljava/type/Portal.h,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,9ea077a83ce0b64a874c8c5f453866a283953964,Chapman Flack,2019-04-07T17:53:51Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:50:38Z,chap@anastigmatix.net,347,256,91,DualState-ify ExecutionPlan.
,pljava-so/src/main/c/SQLInputFromTuple.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/ErrorData.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/Relation.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/SingleRowReader.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/TriggerData.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/Tuple.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-so/src/main/c/type/TupleDesc.c,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,82f8e7ba04a047c05388a84c2c2d72896fa87843,Chapman Flack,2019-04-07T16:06:21Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:47Z,chap@anastigmatix.net,642,441,201,Adapt already-DualStated classes to use pin/unpin.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,d5e3d45dfdb8b1414b3d51ef401ecdc37c727d32,Chapman Flack,2019-04-07T18:49:42Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:49:42Z,chap@anastigmatix.net,15,15,0,"Add unidirectional SQLXML test examples.

Sometimes it's handy to test just one direction of VarlenaWrapper
at a time."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,a15892109ea7ebe54e19ce49faf404a97888d9aa,Chapman Flack,2019-04-07T18:20:00Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:17Z,chap@anastigmatix.net,1877,1275,602,"New approach to concurrency for DualState.

To date, Java synchronized blocks have been made to serve the purpose
of concurrency management for DualState objects, but the fit has been
awkward at best. If the concurrency needs for DualState are viewed
on a clean slate:

- a DualState mates up some state in PostgreSQL (with lifetime/validity
  determined by PostgreSQL mechanisms like resource owners and memory
  contexts) with some Java state (with lifetime/validity determined by
  Java mechanisms).

- Java can have many threads, but PostgreSQL only supports one (or one
  at a time, depending on the pljava.java_thread_pg_entry setting).

- JNI calls that will enter PostgreSQL routines must be serialized onto
  one thread (or one at a time), but direct examination of a chunk of
  native memory, or even JNI calls to thread-safe, non-PostgreSQL
  routines, ought to be permitted from other threads, as long as the
  native state being examined is expected not to change during the
  access.

- That requires mechanisms for not just data visibility across threads,
  but for exclusion. A thread must be able to 'pin' some native state
  briefly while peeking at it, and any code that handles a PostgreSQL
  callback that is about to change or release native state must use a
  locking operation that will block for any existing pin.

That leads to a structure like a vanilla reader/writer lock, where the
read lock (hereafter called a 'pin') can be taken by any number of
threads, while the write lock (hereafter simply 'lock') can only be held
by one thread, is blocked by any existing pins, and blocks any later
requested pins. For this application, a further simplification is that
it makes sense to limit all operations that could need the lock to run
on one particular thread (the one for which Backend.threadMayEnterPG()
would return true), so there is no need to support multiple conflicting
requests for locks.

Every DualState instance needs to remember when its native state has
been invalidated, or its Java state has been explicitly freed or found
unreachable. These conditions can be checked atomically as part of any
pin request, so pin() will throw the appropriate exceptions if the state
should not be accessed, saving client code some extra checks and TOCTTOU
races. If the pin succeeds, access to the state is ok while it is held.

The Java synchronization mechanisms offered in java.util.concurrent do
not include anything with exactly these behaviors, but do include the
lower-level primitives on which it can be built, as is done here."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,a15892109ea7ebe54e19ce49faf404a97888d9aa,Chapman Flack,2019-04-07T18:20:00Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:17Z,chap@anastigmatix.net,1877,1275,602,"New approach to concurrency for DualState.

To date, Java synchronized blocks have been made to serve the purpose
of concurrency management for DualState objects, but the fit has been
awkward at best. If the concurrency needs for DualState are viewed
on a clean slate:

- a DualState mates up some state in PostgreSQL (with lifetime/validity
  determined by PostgreSQL mechanisms like resource owners and memory
  contexts) with some Java state (with lifetime/validity determined by
  Java mechanisms).

- Java can have many threads, but PostgreSQL only supports one (or one
  at a time, depending on the pljava.java_thread_pg_entry setting).

- JNI calls that will enter PostgreSQL routines must be serialized onto
  one thread (or one at a time), but direct examination of a chunk of
  native memory, or even JNI calls to thread-safe, non-PostgreSQL
  routines, ought to be permitted from other threads, as long as the
  native state being examined is expected not to change during the
  access.

- That requires mechanisms for not just data visibility across threads,
  but for exclusion. A thread must be able to 'pin' some native state
  briefly while peeking at it, and any code that handles a PostgreSQL
  callback that is about to change or release native state must use a
  locking operation that will block for any existing pin.

That leads to a structure like a vanilla reader/writer lock, where the
read lock (hereafter called a 'pin') can be taken by any number of
threads, while the write lock (hereafter simply 'lock') can only be held
by one thread, is blocked by any existing pins, and blocks any later
requested pins. For this application, a further simplification is that
it makes sense to limit all operations that could need the lock to run
on one particular thread (the one for which Backend.threadMayEnterPG()
would return true), so there is no need to support multiple conflicting
requests for locks.

Every DualState instance needs to remember when its native state has
been invalidated, or its Java state has been explicitly freed or found
unreachable. These conditions can be checked atomically as part of any
pin request, so pin() will throw the appropriate exceptions if the state
should not be accessed, saving client code some extra checks and TOCTTOU
races. If the pin succeeds, access to the state is ok while it is held.

The Java synchronization mechanisms offered in java.util.concurrent do
not include anything with exactly these behaviors, but do include the
lower-level primitives on which it can be built, as is done here."
,pljava-so/src/main/c/Exception.c,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/c/Invocation.c,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/c/JNICalls.c,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/c/type/Portal.c,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/include/pljava/Invocation.h,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/include/pljava/pljava.h,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,3310c1443da01f2fa08c79c09f628b871540ff09,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,Chapman Flack,2019-04-07T18:34:12Z,chap@anastigmatix.net,29,10,19,"I've had it with these typos.

Also, there was an orphaned comment in pljava.h describing the field
that was no longer there, but in Invocation.h. The comment for it in
Invocation.h is adequate, so the one in pljava.h is removed."
,pljava-so/src/main/c/Backend.c,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/c/ExecutionPlan.c,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/c/JNICalls.c,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/c/SPI.c,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/c/type/Portal.c,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/include/pljava/pljava.h,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,cfb9e7fd2de271a4210c45ab11b3a8d6123271a8,Chapman Flack,2019-03-08T17:07:10Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,125,60,65,"Simplify ""thread ID"" tracking.

The mechanism for fudging the stack base to mollify PostgreSQL's
stack depth check when the Java thread executing in PG changes
(only possible when pljava.java_thread_pg_entry is 'allow') has
long involved computing the System.identityHashCode() of the
current Thread object, and passing that to the native code to
be compared to that of the last known thread running in PG code.

That was unnecessarily roundabout, given that every native method
call passes a JNIEnv pointer to the native code, which the JNI spec
""design overview"" clarifies to be valid only per thread, while
guaranteeing to pass the same pointer in calls from the same thread,
so it has the properties needed of an ID."
,pljava-so/src/main/c/Backend.c,66c24104af4ac1a8938678f8067a2d56b7200adb,Chapman Flack,2019-03-08T17:11:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,5,2,3,"Minor cleanup.

Remove an #undef directive left over from a discarded implementation
approach, and give a method parameter a clearer name than it was left
with after former cut-n-paste."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,66c24104af4ac1a8938678f8067a2d56b7200adb,Chapman Flack,2019-03-08T17:11:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-08T17:11:34Z,chap@anastigmatix.net,5,2,3,"Minor cleanup.

Remove an #undef directive left over from a discarded implementation
approach, and give a method parameter a clearer name than it was left
with after former cut-n-paste."
,pljava-so/src/main/c/Backend.c,79803e0eb2ec39dcb0f27c13b98b5b9679a2446d,Chapman Flack,2019-03-02T02:43:14Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:58:46Z,chap@anastigmatix.net,163,158,5,"Add pljava.java_thread_pg_entry GUC.

With the elimination of PL/Java internal classes that use
Object.finalize(), PL/Java now has no inherent need to enter PG from
any Java thread other than the main one that originated in PG. That
may open space to simplify the thread-coordination conventions that
have been a source of much complexity in PL/Java's code (including
some fairly unconvincing bits, like the stack-base manipulations, not
to mention the whole premise of mixing bytecode monitorenter/exit
with JNI MonitorEnter/Exit, which the JNI spec has always called
unsupported. It has been mostly, usually working ok in Hotspot, but
is less reliable in OpenJ9).

However, it is possible that user code that is run in PL/Java could
create new threads that make calls on the database. How common that is
in the wild may be hard to know. So a GUC is introduced here to assist
in vetting existing code.

Its default value is 'allow', giving PL/Java's historical behavior:
any Java thread can enter PG while the main thread has entered Java.
If set to 'error', any thread other than the main one will incur an
exception if it tries to enter PG. If 'block', the main thread will
skip all of its usual monitor releases/acquires around calls into Java,
meaning it will hold the monitor at all times, and any other thread
that tries to enter PG will indefinitely block. (Should that happen,
a JMX tool like JConsole can be used to identify the blocked thread.)

The 'error' setting can be used to find out if the code being run with
PL/Java has any other-threads-entering-PG issues. If the workload is
known to have no such issues, the 'block' setting is recommended for
simplicity and sanity."
,pljava-so/src/main/c/JNICalls.c,79803e0eb2ec39dcb0f27c13b98b5b9679a2446d,Chapman Flack,2019-03-02T02:43:14Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:58:46Z,chap@anastigmatix.net,163,158,5,"Add pljava.java_thread_pg_entry GUC.

With the elimination of PL/Java internal classes that use
Object.finalize(), PL/Java now has no inherent need to enter PG from
any Java thread other than the main one that originated in PG. That
may open space to simplify the thread-coordination conventions that
have been a source of much complexity in PL/Java's code (including
some fairly unconvincing bits, like the stack-base manipulations, not
to mention the whole premise of mixing bytecode monitorenter/exit
with JNI MonitorEnter/Exit, which the JNI spec has always called
unsupported. It has been mostly, usually working ok in Hotspot, but
is less reliable in OpenJ9).

However, it is possible that user code that is run in PL/Java could
create new threads that make calls on the database. How common that is
in the wild may be hard to know. So a GUC is introduced here to assist
in vetting existing code.

Its default value is 'allow', giving PL/Java's historical behavior:
any Java thread can enter PG while the main thread has entered Java.
If set to 'error', any thread other than the main one will incur an
exception if it tries to enter PG. If 'block', the main thread will
skip all of its usual monitor releases/acquires around calls into Java,
meaning it will hold the monitor at all times, and any other thread
that tries to enter PG will indefinitely block. (Should that happen,
a JMX tool like JConsole can be used to identify the blocked thread.)

The 'error' setting can be used to find out if the code being run with
PL/Java has any other-threads-entering-PG issues. If the workload is
known to have no such issues, the 'block' setting is recommended for
simplicity and sanity."
,pljava-so/src/main/include/pljava/JNICalls.h,79803e0eb2ec39dcb0f27c13b98b5b9679a2446d,Chapman Flack,2019-03-02T02:43:14Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:58:46Z,chap@anastigmatix.net,163,158,5,"Add pljava.java_thread_pg_entry GUC.

With the elimination of PL/Java internal classes that use
Object.finalize(), PL/Java now has no inherent need to enter PG from
any Java thread other than the main one that originated in PG. That
may open space to simplify the thread-coordination conventions that
have been a source of much complexity in PL/Java's code (including
some fairly unconvincing bits, like the stack-base manipulations, not
to mention the whole premise of mixing bytecode monitorenter/exit
with JNI MonitorEnter/Exit, which the JNI spec has always called
unsupported. It has been mostly, usually working ok in Hotspot, but
is less reliable in OpenJ9).

However, it is possible that user code that is run in PL/Java could
create new threads that make calls on the database. How common that is
in the wild may be hard to know. So a GUC is introduced here to assist
in vetting existing code.

Its default value is 'allow', giving PL/Java's historical behavior:
any Java thread can enter PG while the main thread has entered Java.
If set to 'error', any thread other than the main one will incur an
exception if it tries to enter PG. If 'block', the main thread will
skip all of its usual monitor releases/acquires around calls into Java,
meaning it will hold the monitor at all times, and any other thread
that tries to enter PG will indefinitely block. (Should that happen,
a JMX tool like JConsole can be used to identify the blocked thread.)

The 'error' setting can be used to find out if the code being run with
PL/Java has any other-threads-entering-PG issues. If the workload is
known to have no such issues, the 'block' setting is recommended for
simplicity and sanity."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,cce44685ff5591f0869ff12aacac4177b8bf09ea,Chapman Flack,2019-03-02T02:19:43Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:58:46Z,chap@anastigmatix.net,365,293,72,"An optimization for non-transient native scopes.

DualState works when NULL is passed as a resource owner, in which
case the native state had better be in some long-lived area like
JavaMemoryContext, because no call to nativeRelease with a real pointer
will ever match it, so javaStateUnreachable or javaStateReleased will
be the only ways it can be freed. (It follows that any DualState flavor
that will be used that way had better have a freeing action as part
of its javaStateUnreachable / javaStateReleased.)

It seems preferable to keep things in more tightly scoped contexts and
give them real owners, but this pattern was used in enough of the
former-JavaWrapper cases just migrated that it's worth supporting
(at least until further analysis can migrate some of those to use
appropriate scopes).

So, a worthwhile optimization is to track objects that lack resource
owners in a simpler data structure, that does not need to support any
retrieval by resource owner. They still have to be kept live somehow
(otherwise Java forgets about them and will not enqueue them when their
referents are unreachable), but a simple IdentityHashMap suffices, and
they can be removed in O(1) when found unreachable or released by Java.

For objects with resource owners, the tracking structure is now a hash
map from owner to doubly-linked list of the associated instances. The
list is directly implemented with prev and next references in the
instances themselves, rather than using a Collections class, so that
when an instance is found unreachable or released from Java, it also can
be removed from the list in O(1) with no searching. Exit of the native
resource owner scope is, of course, handled by looking up the owner in
the map and processing every instance remaining on the list.

The structures used now are plain vanilla java.util implementations with
no claimed thread safety properties (and the same is true of the
directly-implemented doubly-linked list code). The Javadoc now explains
at length the usage requirements that must be observed for the design to
be safe."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,77680ba69299340e1238f377e911af8fd83eb6c3,Chapman Flack,2019-02-26T03:23:52Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,110,109,1,Expose some DualState statistics as an MBean.
,pljava-so/src/main/c/Backend.c,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/c/Invocation.c,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/c/SQLOutputToTuple.c,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/c/type/JavaWrapper.c,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/c/type/Type.c,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/include/pljava/Invocation.h,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/include/pljava/type/JavaWrapper.h,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava/src/main/java/org/postgresql/pljava/internal/JavaWrapper.java,d5da82fe3964228331798da23f62cc4990be8205,Chapman Flack,2019-02-25T04:48:18Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,310,17,293,"Axe JavaWrapper, Invocation CallLocals, finalizers

DualState is now the way anything in Java that's paired with
native state, and formerly extended JavaWrapper and/or used
Java Object.finalize() or Invocation_createLocalWrapper, is
now managed.

Those other mechanisms are removed. JavaMemoryContext is now
defined in Backend.c. Nothing uses Object.finalize() now."
,pljava-so/src/main/c/DualState.c,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/c/Exception.c,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/c/JNICalls.c,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/c/type/ErrorData.c,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/c/type/Type.c,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/include/pljava/type/ErrorData.h,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,0e48fa23810923425be9281f33dbbe5ef35478a9,Chapman Flack,2019-02-25T03:28:47Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,289,251,38,DualState-ify ErrorData.
,pljava-so/src/main/c/DualState.c,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava-so/src/main/c/Function.c,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava-so/src/main/c/type/TriggerData.c,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava-so/src/main/c/type/Type.c,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava-so/src/main/include/pljava/type/TriggerData.h,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,7dfb064ec9111a25044d340faa547e7e93c94b1a,Chapman Flack,2019-02-25T02:41:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,201,136,65,DualState-ify TriggerData.
,pljava-so/src/main/c/DualState.c,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava-so/src/main/c/type/Relation.c,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava-so/src/main/c/type/TriggerData.c,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava-so/src/main/c/type/Type.c,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava-so/src/main/include/pljava/type/Relation.h,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,d60d2bc1aa30e4b1522ca00be61fa003655b40a0,Chapman Flack,2019-02-25T01:50:30Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,138,89,49,"DualState-ify Relation.

Relation was handled with Invocation_createLocalWrapper, that is,
as something with a lifetime scoped to the current PL/Java function
invocation. That's been duplicated, using DualState with
currentInvocation passed as the resource owner. But it could be worth
investigating how and where Relation objects are actually getting
constructed, to see if that's the right scope for all cases."
,pljava-so/src/main/c/DualState.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/Relation.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/TriggerData.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/Tuple.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/TupleDesc.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/TupleTable.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/Type.c,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/include/pljava/type/Tuple.h,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,7f8ebd6eb28203f0ee4e7cb30f00d0cdd57345bf,Chapman Flack,2019-02-25T00:55:50Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,270,213,57,"DualState-ify Tuple.

Still has a public getNativePointer() because Relation, TriggerData,
SQLOutputToTuple, and SingleRowWriter refer to it.

In passing, it appears that TupleTable is implemented by constructing
a Java array populated with individual Java Tuple instances,
one for every tuple in the table.

There's got to be a lazier way...."
,pljava-so/src/main/c/type/TupleDesc.c,d69dbeb7c0090e5f9dd7e2681aa841a7ebc1d49c,Chapman Flack,2019-02-24T23:43:13Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,2,1,1,"JavaWrapper concealed additional magic.

Any TypeClass created with JavaWrapperClass_alloc automagically
has a _coerceObject method that returns its wrapped pointer.

Switching TupleDesc to use plain TypeClass_alloc, which leaves that
method unimplemented; will ereport ""Pure virtual method called"" if
a TupleDesc object is ever a PL/Java function return, or passed to
a writable ResultSet or PreparedStatement. That doesn't seem to happen."
,pljava-so/src/main/c/Backend.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/DualState.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/SQLOutputToTuple.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/Composite.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/Portal.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/Relation.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/SingleRowReader.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/Tuple.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/TupleDesc.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/TupleTable.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/type/Type.c,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/include/pljava/type/TupleDesc.h,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,53f86100e56e7fe1fb782f17ff6984528c30db4e,Chapman Flack,2019-02-24T23:37:09Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,328,251,77,"DualState-ify TupleDesc.

Still has a public getNativePointer() because both SingleRowReader
and Tuple refer to it."
,pljava-so/src/main/c/Backend.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/DualState.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/Invocation.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/SQLInputFromTuple.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/type/Composite.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/type/HeapTupleHeader.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/type/SingleRowReader.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/type/UDT.c,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/include/pljava/SQLInputFromTuple.h,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/include/pljava/type/SingleRowReader.h,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,fdc0cd7d1de44ed26090d5541a3d8204f64e2889,Chapman Flack,2019-02-24T21:25:08Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,653,304,349,"HeapTupleHeader -> SingleRowReader

The architecture has been confusing for a while around HeapTupleHeader
(with a long-abandoned Java class and still-used .h/.c files simply
providing functions used for SingleRowReader and SQLInputFromTuple,
but with some of the associated native functions found in Composite.c).

Collect all that stuff into SingleRowReader.[hc], to back the
SingleRowReader Java class in the typical way. SQLInputFromTuple
can simply be a subclass of that, implementing SQLInput."
,pljava-so/src/main/c/DualState.c,7e22c0b34c2f988aaa61512abdb9edac25806a41,Chapman Flack,2019-02-24T15:44:46Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,215,138,77,"Prepare to migrate to DualState from other idioms.

Older code where a Java object is associated with some native state has
been using some combination of Object.finalize() (deprecated for removal
in newer Java environments), JavaWrapper, Invocation_createLocalWrapper,
with a lot of details scattered in a lot of places, and not a lot of
explanation.

The DualState mechanism introduced with VarlenaWrapper should be able
to subsume all of those cases, eliminate the use of Object.finalize,
and reduce (maybe eliminate?) the use of JNI from threads other than
the main PG thread.

Prepare the way by declaring that the ""resource owner"" associated with
a DualState does not have to be only a PG ResourceOwner. It can also be
the address of some other sort of allocated struct that has a scope-like
behavior. In PG 9.5 and later, a MemoryContext with a
MemoryContextCallback could serve, and PL/Java's currentInvocation can
be used to scope a state to the currently-executing PL/Java function.
Unless the memory allocator's broken, such alternative allocated
addresses won't be mistakable for actual ResourceOwners, so no special
magic should be needed for DualState objects scoped in any of those ways
to coexist.

In passing, change the queue implementation for s_liveInstances in
DualState. LinkedBlockingDeque was more heavyweight than needed; it
was chosen in haste after starting with ConcurrentLinkedDeque and then
finding it wasn't in Java 6, but ConcurrentLinkedQueue is, and has all
the capabilities needed. Its iterator().remove() method really runs in
constant amortized time, as it just leaves the unlinking to be done on
a subsequent traversal, which happens regularly in our case.

If it can be proven that no manipulation of s_liveInstances will happen
except on one thread interacting with PG, it could be overkill to be
using a concurrent queue at all.

Get rid of HeapTupleHeader.java, which has been dead since a4f6c9e."
,pljava-so/src/main/include/pljava/DualState.h,7e22c0b34c2f988aaa61512abdb9edac25806a41,Chapman Flack,2019-02-24T15:44:46Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,215,138,77,"Prepare to migrate to DualState from other idioms.

Older code where a Java object is associated with some native state has
been using some combination of Object.finalize() (deprecated for removal
in newer Java environments), JavaWrapper, Invocation_createLocalWrapper,
with a lot of details scattered in a lot of places, and not a lot of
explanation.

The DualState mechanism introduced with VarlenaWrapper should be able
to subsume all of those cases, eliminate the use of Object.finalize,
and reduce (maybe eliminate?) the use of JNI from threads other than
the main PG thread.

Prepare the way by declaring that the ""resource owner"" associated with
a DualState does not have to be only a PG ResourceOwner. It can also be
the address of some other sort of allocated struct that has a scope-like
behavior. In PG 9.5 and later, a MemoryContext with a
MemoryContextCallback could serve, and PL/Java's currentInvocation can
be used to scope a state to the currently-executing PL/Java function.
Unless the memory allocator's broken, such alternative allocated
addresses won't be mistakable for actual ResourceOwners, so no special
magic should be needed for DualState objects scoped in any of those ways
to coexist.

In passing, change the queue implementation for s_liveInstances in
DualState. LinkedBlockingDeque was more heavyweight than needed; it
was chosen in haste after starting with ConcurrentLinkedDeque and then
finding it wasn't in Java 6, but ConcurrentLinkedQueue is, and has all
the capabilities needed. Its iterator().remove() method really runs in
constant amortized time, as it just leaves the unlinking to be done on
a subsequent traversal, which happens regularly in our case.

If it can be proven that no manipulation of s_liveInstances will happen
except on one thread interacting with PG, it could be overkill to be
using a concurrent queue at all.

Get rid of HeapTupleHeader.java, which has been dead since a4f6c9e."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,7e22c0b34c2f988aaa61512abdb9edac25806a41,Chapman Flack,2019-02-24T15:44:46Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,215,138,77,"Prepare to migrate to DualState from other idioms.

Older code where a Java object is associated with some native state has
been using some combination of Object.finalize() (deprecated for removal
in newer Java environments), JavaWrapper, Invocation_createLocalWrapper,
with a lot of details scattered in a lot of places, and not a lot of
explanation.

The DualState mechanism introduced with VarlenaWrapper should be able
to subsume all of those cases, eliminate the use of Object.finalize,
and reduce (maybe eliminate?) the use of JNI from threads other than
the main PG thread.

Prepare the way by declaring that the ""resource owner"" associated with
a DualState does not have to be only a PG ResourceOwner. It can also be
the address of some other sort of allocated struct that has a scope-like
behavior. In PG 9.5 and later, a MemoryContext with a
MemoryContextCallback could serve, and PL/Java's currentInvocation can
be used to scope a state to the currently-executing PL/Java function.
Unless the memory allocator's broken, such alternative allocated
addresses won't be mistakable for actual ResourceOwners, so no special
magic should be needed for DualState objects scoped in any of those ways
to coexist.

In passing, change the queue implementation for s_liveInstances in
DualState. LinkedBlockingDeque was more heavyweight than needed; it
was chosen in haste after starting with ConcurrentLinkedDeque and then
finding it wasn't in Java 6, but ConcurrentLinkedQueue is, and has all
the capabilities needed. Its iterator().remove() method really runs in
constant amortized time, as it just leaves the unlinking to be done on
a subsequent traversal, which happens regularly in our case.

If it can be proven that no manipulation of s_liveInstances will happen
except on one thread interacting with PG, it could be overkill to be
using a concurrent queue at all.

Get rid of HeapTupleHeader.java, which has been dead since a4f6c9e."
,pljava/src/main/java/org/postgresql/pljava/internal/HeapTupleHeader.java,7e22c0b34c2f988aaa61512abdb9edac25806a41,Chapman Flack,2019-02-24T15:44:46Z,chap@anastigmatix.net,Chapman Flack,2019-03-02T02:54:49Z,chap@anastigmatix.net,215,138,77,"Prepare to migrate to DualState from other idioms.

Older code where a Java object is associated with some native state has
been using some combination of Object.finalize() (deprecated for removal
in newer Java environments), JavaWrapper, Invocation_createLocalWrapper,
with a lot of details scattered in a lot of places, and not a lot of
explanation.

The DualState mechanism introduced with VarlenaWrapper should be able
to subsume all of those cases, eliminate the use of Object.finalize,
and reduce (maybe eliminate?) the use of JNI from threads other than
the main PG thread.

Prepare the way by declaring that the ""resource owner"" associated with
a DualState does not have to be only a PG ResourceOwner. It can also be
the address of some other sort of allocated struct that has a scope-like
behavior. In PG 9.5 and later, a MemoryContext with a
MemoryContextCallback could serve, and PL/Java's currentInvocation can
be used to scope a state to the currently-executing PL/Java function.
Unless the memory allocator's broken, such alternative allocated
addresses won't be mistakable for actual ResourceOwners, so no special
magic should be needed for DualState objects scoped in any of those ways
to coexist.

In passing, change the queue implementation for s_liveInstances in
DualState. LinkedBlockingDeque was more heavyweight than needed; it
was chosen in haste after starting with ConcurrentLinkedDeque and then
finding it wasn't in Java 6, but ConcurrentLinkedQueue is, and has all
the capabilities needed. Its iterator().remove() method really runs in
constant amortized time, as it just leaves the unlinking to be done on
a subsequent traversal, which happens regularly in our case.

If it can be proven that no manipulation of s_liveInstances will happen
except on one thread interacting with PG, it could be overkill to be
using a concurrent queue at all.

Get rid of HeapTupleHeader.java, which has been dead since a4f6c9e."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,7d57ffb02e0e6a3201379af1fe386cd79b9de44c,Chapman Flack,2019-02-20T03:46:25Z,chap@anastigmatix.net,GitHub,2019-02-20T03:46:25Z,noreply@github.com,80,63,17,"Merge pull request #205 from tada/bug/REL1_5_STABLE/SQLXMLnonUTF8

SQLXML nits when server encoding != UTF-8"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,7d57ffb02e0e6a3201379af1fe386cd79b9de44c,Chapman Flack,2019-02-20T03:46:25Z,chap@anastigmatix.net,GitHub,2019-02-20T03:46:25Z,noreply@github.com,80,63,17,"Merge pull request #205 from tada/bug/REL1_5_STABLE/SQLXMLnonUTF8

SQLXML nits when server encoding != UTF-8"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,b9e18b8edf1669b595275f345f521d17526756a5,Chapman Flack,2019-02-17T06:29:37Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T04:24:31Z,chap@anastigmatix.net,9,1,8,"The allow-java-encodings feature doesn't work.

The property is recognized, and is set in the property manager.
But com.sun.org.apache.xerces.internal.impl.XMLEntityManager has
overloaded reset methods, one taking a PropertyManager, and one
taking a ComponentManager. Only the second one honors the feature.
XMLStreamReaderImpl.reset() calls the first one, natch.

But all is not lost, as createXMLStreamReader with an encoding
parameter seems to accept it without caring about its IANA-or-Java-ness.
It seems a bit redundant to both arrange to have the proper encoding
declared in the stream and to pass it to createXMLStreamReader, but
it gets the job done."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,d2700dc1a51d6ea1765e9af99d32ebd085431564,Chapman Flack,2019-02-17T23:25:25Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T04:24:31Z,chap@anastigmatix.net,85,69,16,"SQLXML nits when server encoding != UTF-8

StAX will object to reading a stream that declares a non-IANA-registered
encoding--even if Java has a corresponding Charset--unless an obscure
feature allow-java-encodings has been set. Also, the StAXResultAdapter
needs to flush the XMLStreamWriter before closing the underlying stream;
writing in UTF-8 encoding did not expose that, but writing in another
encoding can.

When writing the PostgreSQL XML data type, throw conformance to the wind
and omit any declaration of the encoding in use, even when not UTF-8.
Some of the PostgreSQL core functions (IS DOCUMENT for sure) can
misbehave if the named encoding isn't something libxml approves of, even
when it is the correct name of the server encoding in use.

Improve the PassXML example to show that, when writing a SQLXML object
and not through the SAX, StAX, or DOM API, it is the application's
responsibility to arrange for the stream to be in the server encoding."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,d2700dc1a51d6ea1765e9af99d32ebd085431564,Chapman Flack,2019-02-17T23:25:25Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T04:24:31Z,chap@anastigmatix.net,85,69,16,"SQLXML nits when server encoding != UTF-8

StAX will object to reading a stream that declares a non-IANA-registered
encoding--even if Java has a corresponding Charset--unless an obscure
feature allow-java-encodings has been set. Also, the StAXResultAdapter
needs to flush the XMLStreamWriter before closing the underlying stream;
writing in UTF-8 encoding did not expose that, but writing in another
encoding can.

When writing the PostgreSQL XML data type, throw conformance to the wind
and omit any declaration of the encoding in use, even when not UTF-8.
Some of the PostgreSQL core functions (IS DOCUMENT for sure) can
misbehave if the named encoding isn't something libxml approves of, even
when it is the correct name of the server encoding in use.

Improve the PassXML example to show that, when writing a SQLXML object
and not through the SAX, StAX, or DOM API, it is the application's
responsibility to arrange for the stream to be in the server encoding."
,pljava-so/src/main/c/InstallHelper.c,ba7a7b75cec0bb44714bc800adcefacc594415b8,Chapman Flack,2019-02-18T04:05:00Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T04:05:00Z,chap@anastigmatix.net,7,6,1,"Handle variable-length function-call info.

Upstream a9c35cf made some changes to the FunctionCallInfoData
struct that don't affect PL/Java's code, and also changed its
name, which does."
,pljava-so/src/main/c/type/Time.c,ca2ec4406b50f3a39ea8aafc8486fbf08b6ffc92,Chapman Flack,2019-02-18T03:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T03:22:45Z,chap@anastigmatix.net,4,2,2,"Fix wrong #include

a29e002 should have included <time.h>, not <sys/time.h>."
,pljava-so/src/main/c/type/Timestamp.c,ca2ec4406b50f3a39ea8aafc8486fbf08b6ffc92,Chapman Flack,2019-02-18T03:22:45Z,chap@anastigmatix.net,Chapman Flack,2019-02-18T03:22:45Z,chap@anastigmatix.net,4,2,2,"Fix wrong #include

a29e002 should have included <time.h>, not <sys/time.h>."
,pljava-so/src/main/c/Function.c,587e97ff951fc7900d5f63b9bffd54b2d41359e8,Chapman Flack,2019-02-04T04:07:22Z,chap@anastigmatix.net,Chapman Flack,2019-02-04T04:07:22Z,chap@anastigmatix.net,6,3,3,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Function.c,6f8f7151ec801105499eca64e7b7e9646015d4fc,Chapman Flack,2019-02-04T04:06:28Z,chap@anastigmatix.net,Chapman Flack,2019-02-04T04:06:28Z,chap@anastigmatix.net,6,3,3,"Reunite a comment with the code it refers to.

This comment got separated from the code it describes back in a4f6c9e,
and has been mystifying readers ever since."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,0a6bd68ed7b01866ce21f2f36d065d0edb81f084,Chapman Flack,2019-01-26T22:45:10Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,5,3,2,"Handle retirement of pg_attrdef.adsrc.

Upstream fe50382 makes the adsrc column go away. It had been
deprecated for so long, no version check is even necessary
to use the 'new' alternative."
,pljava-so/src/main/c/type/TupleTable.c,900eca681ed5c6c928ff52dca5b27ed46700b2e4,Chapman Flack,2019-01-26T20:51:05Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,8,6,2,"Handle extensibility of TupleTableSlots.

Upstream 4da597e seems rather big, but perhaps only affects
the spelling of one function used here (ExecCopySlotTuple ->
ExecCopySlotHeapTuple)."
,pljava-so/src/main/c/type/Time.c,a29e0024e4d50ac073039b0430785593f45f87f7,Chapman Flack,2019-01-26T20:31:54Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,14,8,6,"Handle the retirement of nabstime.

Upstream cda6a8d makes nabstime.h go away. GetCurrentAbsoluteTime()
was being used here, but didn't do anything time(NULL) doesn't do."
,pljava-so/src/main/c/type/Timestamp.c,a29e0024e4d50ac073039b0430785593f45f87f7,Chapman Flack,2019-01-26T20:31:54Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,14,8,6,"Handle the retirement of nabstime.

Upstream cda6a8d makes nabstime.h go away. GetCurrentAbsoluteTime()
was being used here, but didn't do anything time(NULL) doesn't do."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,42dbcea30ea10f1dbb7d0554b889c342e555e37a,Chapman Flack,2019-01-26T19:43:57Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,46,32,14,"Handle the retirement of magical oids.

Upstream 578b229 turns the oid columns of system catalogs into
ordinary columns, to be retrieved in the ordinary way by name or
column number. Non-system-catalogs don't get to have system-managed
oids at all any more. (You could give a table an oid-typed column
named oid and make a key of it, but no function is provided to
automatically assign a value to such a column.)"
,pljava-so/src/main/c/InstallHelper.c,42dbcea30ea10f1dbb7d0554b889c342e555e37a,Chapman Flack,2019-01-26T19:43:57Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,46,32,14,"Handle the retirement of magical oids.

Upstream 578b229 turns the oid columns of system catalogs into
ordinary columns, to be retrieved in the ordinary way by name or
column number. Non-system-catalogs don't get to have system-managed
oids at all any more. (You could give a table an oid-typed column
named oid and make a key of it, but no function is provided to
automatically assign a value to such a column.)"
,pljava-so/src/main/c/type/AclId.c,42dbcea30ea10f1dbb7d0554b889c342e555e37a,Chapman Flack,2019-01-26T19:43:57Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T22:48:38Z,chap@anastigmatix.net,46,32,14,"Handle the retirement of magical oids.

Upstream 578b229 turns the oid columns of system catalogs into
ordinary columns, to be retrieved in the ordinary way by name or
column number. Non-system-catalogs don't get to have system-managed
oids at all any more. (You could give a table an oid-typed column
named oid and make a key of it, but no function is provided to
automatically assign a value to such a column.)"
,pljava-so/src/main/c/Backend.c,f424406496f7b5388ca9d4420e71cc1a729bb88e,Chapman Flack,2019-01-26T19:45:17Z,chap@anastigmatix.net,Chapman Flack,2019-01-26T19:45:17Z,chap@anastigmatix.net,16,14,2,"Handle the retirement of dynloader.h.

Upstream 842cb9f moves to simply expecting dlfcn.h to be present
on most platforms, and covers the rest in port.h (already included
in c.h, which we already include)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,f44c1a40a8049022cc1cd16daaa3f73ef756e126,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,148,143,5,"Merge branch 'REL1_5_STABLE'

Pick up 1.5.2's fix for the java.sql.Date regression in 1.5.1."
,pljava-so/src/main/c/type/Date.c,f44c1a40a8049022cc1cd16daaa3f73ef756e126,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,148,143,5,"Merge branch 'REL1_5_STABLE'

Pick up 1.5.2's fix for the java.sql.Date regression in 1.5.1."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,f44c1a40a8049022cc1cd16daaa3f73ef756e126,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,Chapman Flack,2018-11-06T02:35:22Z,chap@anastigmatix.net,148,143,5,"Merge branch 'REL1_5_STABLE'

Pick up 1.5.2's fix for the java.sql.Date regression in 1.5.1."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,d106e3996a48bcdd99cd54322c6e67435ca70a60,Chapman Flack,2018-11-05T05:28:24Z,chap@anastigmatix.net,Chapman Flack,2018-11-05T05:28:24Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.2.

-packaging/build.xml already makes an update .sql from 1.5.1,
the last released version. No change needed there before this release."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,d05378a50c2b0273436d85e26d440c34b4924866,Chapman Flack,2018-11-05T05:22:00Z,chap@anastigmatix.net,Chapman Flack,2018-11-05T05:22:00Z,chap@anastigmatix.net,143,138,5,"Merge pull request #201 from bug/REL1_5_STABLE/issue199

Fix a regression in 1.5.1 that was not caught in pre-release testing,
and could leave conversions between PostgreSQL date and java.sql.Date
off by one day in certain timezones and times of the year (#199).

Other issues in date/time conversion have also been uncovered that are
of longer standing, not recent regressions. They are detailed in #200
and are not fixed in this PR, but can be addressed in another, later
release."
,pljava-so/src/main/c/type/Date.c,d05378a50c2b0273436d85e26d440c34b4924866,Chapman Flack,2018-11-05T05:22:00Z,chap@anastigmatix.net,Chapman Flack,2018-11-05T05:22:00Z,chap@anastigmatix.net,143,138,5,"Merge pull request #201 from bug/REL1_5_STABLE/issue199

Fix a regression in 1.5.1 that was not caught in pre-release testing,
and could leave conversions between PostgreSQL date and java.sql.Date
off by one day in certain timezones and times of the year (#199).

Other issues in date/time conversion have also been uncovered that are
of longer standing, not recent regressions. They are detailed in #200
and are not fixed in this PR, but can be addressed in another, later
release."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PreJSR310.java,64e62ef0cb6e68548ee5755258e3507c4857d4a6,Chapman Flack,2018-10-31T16:41:03Z,chap@anastigmatix.net,Chapman Flack,2018-11-05T05:03:29Z,chap@anastigmatix.net,131,130,1,Regression test and documentation for issue #199.
,pljava-so/src/main/c/type/Date.c,b0dd2211a3f63062e559cf3cd156e9a3e3a04024,Chapman Flack,2018-10-31T03:36:13Z,chap@anastigmatix.net,Chapman Flack,2018-10-31T03:36:13Z,chap@anastigmatix.net,12,8,4,"Repair java.sql.Date breakage from 72cbb15.

That commit was part of the work of adding the java.time types for 1.5.1
(issue #137). A potential for overflow in timezone handling for timestamps
was corrected by changing the API of Timestamp_getTimeZone_id(). There
was known to be one other use of that function, in Date.c. A comment was
even added in Timestamp.h advising that there was a known use in Date.c.
But somehow updating that known use in Date.c slipped through the cracks.

The end result was that the new, preferable java.time API got added
(preferable in part because it eliminates the unexpected timezone
dependencies when manipulating local dates and times), but in the process
a spooky timezone-dependent off-by-a-day error got introduced to the
old date <-> java.sql.Date conversions."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,b05ad097c069235167fc6d30c544896a89abcead,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,17,7,10,Java7ify: full citizenship for JDBC 4.1 methods.
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,b05ad097c069235167fc6d30c544896a89abcead,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,17,7,10,Java7ify: full citizenship for JDBC 4.1 methods.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,b05ad097c069235167fc6d30c544896a89abcead,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,Chapman Flack,2018-10-30T03:15:17Z,chap@anastigmatix.net,17,7,10,Java7ify: full citizenship for JDBC 4.1 methods.
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,7873122e684996083ef6b4864f7f2f10d4e62fa8,Chapman Flack,2018-10-30T03:06:57Z,chap@anastigmatix.net,Chapman Flack,2018-10-30T03:06:57Z,chap@anastigmatix.net,208,106,102,"Merge branch 'REL1_5_STABLE'

Just to get the reordering for clarity of methods in AbstractResultSet,
now when there aren't other active branches to be jumbled up by it."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,ec18090d29744b8388f09283baf5d47435ea313f,Chapman Flack,2018-10-30T03:01:01Z,chap@anastigmatix.net,Chapman Flack,2018-10-30T03:01:01Z,chap@anastigmatix.net,208,106,102,"Reorder methods in AbstractResultSet for clarity.

Saved this wholesale reordering to apply now (and merge up to master
too) when, for once, there aren't outstanding branches to get jumbled
up by doing it."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,500fc9f38f11d290f2864cd87ddf214513dd1022,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T06:20:15Z,chap@anastigmatix.net,50,23,27,Java7ify: diamond operator in merged classes.
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/JDBC42_21.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/package-info.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/package-info.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/package-info.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-packaging/src/main/java/JarX.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/DualState.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/ExecutionPlan.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Function.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/InstallHelper.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Invocation.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/JNICalls.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SPI.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SQLInputFromTuple.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/VarlenaWrapper.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Composite.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Date.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/HeapTupleHeader.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/JavaWrapper.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/LargeObject.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Oid.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Portal.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Relation.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/SQLXMLImpl.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Time.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Timestamp.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Tuple.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleDesc.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleTable.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Type.c,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/Backend.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/DualState.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/Function.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/InstallHelper.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/Invocation.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/JNICalls.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/VarlenaWrapper.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/pljava.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/LargeObject.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Timestamp.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/TriggerData.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Tuple.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Type.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Type_priv.h,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ELogHandler.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIReadOnlyControl.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,src/java/test/org/postgresql/pljava/test/Tester.java,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,src/site/resources/css/site.css,af6c201601d596d42643312adb9b72ad795a73f4,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,Chapman Flack,2018-10-29T04:35:58Z,chap@anastigmatix.net,19430,16871,2559,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,69c8a5ee9918b8499e4acf16fdcb45e27aacfbc1,Chapman Flack,2018-10-17T04:28:39Z,chap@anastigmatix.net,Chapman Flack,2018-10-17T04:28:39Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.1.

-packaging/build.xml already makes an update .sql from 1.5.1-BETA3,
the last released version. No change needed there before this release."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,cd183f2dd92bdc2cbec0d8c8cbadd68def924091,Chapman Flack,2018-10-07T20:44:20Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T20:44:20Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.1-BETA3.

-packaging/build.xml already makes an update .sql from 1.5.1-BETA2,
the last released version. No change needed before this release."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,37e23a8aec4db13810c410507d6d3b9db38b20ab,Chapman Flack,2018-10-07T15:15:38Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:15:38Z,chap@anastigmatix.net,6,3,3,Merge pull request #196 from bug/REL1_5_STABLE/issue195
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,c808b192c39faa28392ed25e5b3db6d6f653263d,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,100,90,10,Merge pull request #193 from bug/REL1_5_STABLE/issue192
,pljava-so/src/main/c/Function.c,c808b192c39faa28392ed25e5b3db6d6f653263d,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,100,90,10,Merge pull request #193 from bug/REL1_5_STABLE/issue192
,pljava-so/src/main/c/type/Oid.c,c808b192c39faa28392ed25e5b3db6d6f653263d,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,100,90,10,Merge pull request #193 from bug/REL1_5_STABLE/issue192
,pljava-so/src/main/include/pljava/Function.h,c808b192c39faa28392ed25e5b3db6d6f653263d,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,100,90,10,Merge pull request #193 from bug/REL1_5_STABLE/issue192
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,c808b192c39faa28392ed25e5b3db6d6f653263d,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:10:56Z,chap@anastigmatix.net,100,90,10,Merge pull request #193 from bug/REL1_5_STABLE/issue192
,pljava-packaging/src/main/java/JarX.java,0bd9f61c737971536f1aa9162a0e06d55e073f63,Chapman Flack,2018-10-07T15:08:27Z,chap@anastigmatix.net,Chapman Flack,2018-10-07T15:08:27Z,chap@anastigmatix.net,5,4,1,Merge pull request #194 from bug/REL1_5_STABLE/issue189
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,3a9dbbbf1d0b371fb92f9eca2dbf3a4a5a01a01b,Chapman Flack,2018-10-06T04:25:44Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T19:13:07Z,chap@anastigmatix.net,6,3,3,"Avoid timestamp in SetOfRecordTest.

The SetOfRecordTest is only there to demonstrate that sets of RECORD
can be returned, and that casts are done from a ResultSetHandle as
needed. Using a timestamp as one of the test values can make it also
(in some circumstances) a demonstration of java.sql.Timestamp's
unintuitive dependence on local time zone settings ... which is why
the JDBC 4.2 mapping to java.time.LocalDateTime is preferable, which
the documentation and release notes already explain. The purpose of
SetOfRecordTest can be achieved just as well using types that don't
have that sort of environment dependency."
,pljava-so/src/main/c/Function.c,bc81bf5d778edc1a01064d9f9b65b3c8c5592321,Chapman Flack,2018-10-06T17:20:19Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T17:32:51Z,chap@anastigmatix.net,83,77,6,"Use schema class loader in Oid.getJavaClass

Add a Function_getCurrentLoader() to retrieve a saved reference
to the initiating loader used to find the function's containing
class. That should be the ""schema loader"" for the schema in which
the function is declared. Tempting to cheat and just use
getClassLoader on the function's class, but that would return the
defining loader, in cases where it and the initiating loader are
different.

The choice to use the schema loader for the innermost executing
PL/Java function is for consistency with the documented convention
(in the developer notes) of using the innermost executing function's
schema to determine the type map to use.

Taking a step back, the whole Oid class seems like something between
a misnomer and a solution-in-search-of-a-problem. It is something of
a stash for information on the correspondences between PG and Java
types, but hardly a complete one, and a lot of that information is in
other places; meanwhile, plenty of things in PG, besides types, have
Oids. In some future version, I envision this Oid class gone, with its
type mapping information merged into something more like a much-evolved
TypeBridge that would centralize a lot of type-correspondence knowledge
that is held now in many places. There might be an entirely different
class to represent oids, if that is useful, with subclasses
corresponding to the different reg* oid types in PG.

But for now, the existing Oid class gets nursed along."
,pljava-so/src/main/c/type/Oid.c,bc81bf5d778edc1a01064d9f9b65b3c8c5592321,Chapman Flack,2018-10-06T17:20:19Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T17:32:51Z,chap@anastigmatix.net,83,77,6,"Use schema class loader in Oid.getJavaClass

Add a Function_getCurrentLoader() to retrieve a saved reference
to the initiating loader used to find the function's containing
class. That should be the ""schema loader"" for the schema in which
the function is declared. Tempting to cheat and just use
getClassLoader on the function's class, but that would return the
defining loader, in cases where it and the initiating loader are
different.

The choice to use the schema loader for the innermost executing
PL/Java function is for consistency with the documented convention
(in the developer notes) of using the innermost executing function's
schema to determine the type map to use.

Taking a step back, the whole Oid class seems like something between
a misnomer and a solution-in-search-of-a-problem. It is something of
a stash for information on the correspondences between PG and Java
types, but hardly a complete one, and a lot of that information is in
other places; meanwhile, plenty of things in PG, besides types, have
Oids. In some future version, I envision this Oid class gone, with its
type mapping information merged into something more like a much-evolved
TypeBridge that would centralize a lot of type-correspondence knowledge
that is held now in many places. There might be an entirely different
class to represent oids, if that is useful, with subclasses
corresponding to the different reg* oid types in PG.

But for now, the existing Oid class gets nursed along."
,pljava-so/src/main/include/pljava/Function.h,bc81bf5d778edc1a01064d9f9b65b3c8c5592321,Chapman Flack,2018-10-06T17:20:19Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T17:32:51Z,chap@anastigmatix.net,83,77,6,"Use schema class loader in Oid.getJavaClass

Add a Function_getCurrentLoader() to retrieve a saved reference
to the initiating loader used to find the function's containing
class. That should be the ""schema loader"" for the schema in which
the function is declared. Tempting to cheat and just use
getClassLoader on the function's class, but that would return the
defining loader, in cases where it and the initiating loader are
different.

The choice to use the schema loader for the innermost executing
PL/Java function is for consistency with the documented convention
(in the developer notes) of using the innermost executing function's
schema to determine the type map to use.

Taking a step back, the whole Oid class seems like something between
a misnomer and a solution-in-search-of-a-problem. It is something of
a stash for information on the correspondences between PG and Java
types, but hardly a complete one, and a lot of that information is in
other places; meanwhile, plenty of things in PG, besides types, have
Oids. In some future version, I envision this Oid class gone, with its
type mapping information merged into something more like a much-evolved
TypeBridge that would centralize a lot of type-correspondence knowledge
that is held now in many places. There might be an entirely different
class to represent oids, if that is useful, with subclasses
corresponding to the different reg* oid types in PG.

But for now, the existing Oid class gets nursed along."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,bc81bf5d778edc1a01064d9f9b65b3c8c5592321,Chapman Flack,2018-10-06T17:20:19Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T17:32:51Z,chap@anastigmatix.net,83,77,6,"Use schema class loader in Oid.getJavaClass

Add a Function_getCurrentLoader() to retrieve a saved reference
to the initiating loader used to find the function's containing
class. That should be the ""schema loader"" for the schema in which
the function is declared. Tempting to cheat and just use
getClassLoader on the function's class, but that would return the
defining loader, in cases where it and the initiating loader are
different.

The choice to use the schema loader for the innermost executing
PL/Java function is for consistency with the documented convention
(in the developer notes) of using the innermost executing function's
schema to determine the type map to use.

Taking a step back, the whole Oid class seems like something between
a misnomer and a solution-in-search-of-a-problem. It is something of
a stash for information on the correspondences between PG and Java
types, but hardly a complete one, and a lot of that information is in
other places; meanwhile, plenty of things in PG, besides types, have
Oids. In some future version, I envision this Oid class gone, with its
type mapping information merged into something more like a much-evolved
TypeBridge that would centralize a lot of type-correspondence knowledge
that is held now in many places. There might be an entirely different
class to represent oids, if that is useful, with subclasses
corresponding to the different reg* oid types in PG.

But for now, the existing Oid class gets nursed along."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,4247447f86f239dc4db8bc8ce9845895377bbfa0,Chapman Flack,2018-10-06T17:32:46Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T17:32:46Z,chap@anastigmatix.net,17,13,4,"Add a test for issue #192.

It's sufficient to use the TypeRoundTripper to ask for the JDBC class
name for a column of type point (after the Point example has installed
itself as a mirror of that type). The call to ResultSetMetaData's
getColumnClassName() fails, because it uses Oid.getJavaClass, which
tries to use the class loader that loaded Oid itself, not a schema
loader that could see the installed jar providing Point.

In passing, remove some unnecessary alias names from column definition
lists in the documentation and tests. At some point, I must have been
convinced they were needed, but this code is intended as an example, so
shouldn't be needlessly cluttered."
,pljava-so/src/main/c/VarlenaWrapper.c,7c82063bcb88131d18e82ff505071b3dd27f94ef,Chapman Flack,2018-10-06T15:39:49Z,chap@anastigmatix.net,Chapman Flack,2018-10-06T15:39:49Z,chap@anastigmatix.net,2,1,1,"Merge pull request #191 from bug/REL1_5_STABLE/issue177

Addresses issue #177."
,pljava-packaging/src/main/java/JarX.java,a173f37f5c69d561e0cae2dfd4c1e18327a4a228,Chapman Flack,2018-10-05T23:45:39Z,chap@anastigmatix.net,Chapman Flack,2018-10-05T23:45:39Z,chap@anastigmatix.net,5,4,1,Merge branch 'JarXinPLJava' into bug/REL1_5_STABLE/issue189
,pljava-packaging/src/main/java/JarX.java,fdb7ee33ddb491ed6620ac88ee4fd07fcbb60c16,Chapman Flack,2018-10-05T23:42:39Z,chap@anastigmatix.net,Chapman Flack,2018-10-05T23:42:39Z,chap@anastigmatix.net,5,4,1,Merge branch 'JarXscripted' into JarXinPLJava
,org/gjt/cuspy/JarX.java,c771c664650d439d00968e4ef3c241c1bbe6cba6,Chapman Flack,2018-10-05T23:39:49Z,chap@anastigmatix.net,Chapman Flack,2018-10-05T23:39:49Z,chap@anastigmatix.net,5,4,1,Merge branch 'JarXmodernize' into JarXscripted
,org/gjt/cuspy/JarX.java,be8b43c938a51c4f22bf9db28e7e17654b249824,Chapman Flack,2018-10-05T23:36:17Z,chap@anastigmatix.net,Chapman Flack,2018-10-05T23:36:17Z,chap@anastigmatix.net,5,4,1,"Detect failure to rename over existing file.

Handle some platforms (*cough* Windows *cough*) where the
write-as-temp-file-then-rename technique is complicated by
the inability to rename over an existing file."
,pljava-so/src/main/c/VarlenaWrapper.c,e019799690bdfab3be22784cf5c5bdcf5eda4031,Chapman Flack,2018-10-02T03:05:20Z,chap@anastigmatix.net,Chapman Flack,2018-10-02T03:05:20Z,chap@anastigmatix.net,2,1,1,"Explicitly pass parked and actual as jlong.

The size of Size can be architecture-specific and differ from
that of jlong."
,pljava-so/src/main/c/Backend.c,4960f81e90341cca292fe60554b31b1a0467b33d,Chapman Flack,2018-10-02T01:58:47Z,chap@anastigmatix.net,Chapman Flack,2018-10-02T01:58:47Z,chap@anastigmatix.net,43,26,17,"Merge pull request #187 from bug/REL1_5_STABLE/issue182

Remember to avoid #if among macro arguments.

Thanks to Ken Olson for the reminder that the Windows MSVC compiler
won't accept conditional-compilation syntax within an invocation
of a preprocessor macro. 5e01f8f was already about that, but a few
uses have crept back in through my inattention.

Honestly, MSVC is doing a service here, as a quick check of the
standard shows that preprocessing directives within macro invocations
really do have undefined behavior. Addresses issue #182."
,pljava-so/src/main/c/InstallHelper.c,4960f81e90341cca292fe60554b31b1a0467b33d,Chapman Flack,2018-10-02T01:58:47Z,chap@anastigmatix.net,Chapman Flack,2018-10-02T01:58:47Z,chap@anastigmatix.net,43,26,17,"Merge pull request #187 from bug/REL1_5_STABLE/issue182

Remember to avoid #if among macro arguments.

Thanks to Ken Olson for the reminder that the Windows MSVC compiler
won't accept conditional-compilation syntax within an invocation
of a preprocessor macro. 5e01f8f was already about that, but a few
uses have crept back in through my inattention.

Honestly, MSVC is doing a service here, as a quick check of the
standard shows that preprocessing directives within macro invocations
really do have undefined behavior. Addresses issue #182."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,dc45b700cdeb042cc165cbe8c4ab89ea081a6f54,Chapman Flack,2018-10-02T01:53:45Z,chap@anastigmatix.net,Chapman Flack,2018-10-02T01:53:45Z,chap@anastigmatix.net,143,128,15,"Merge pull request #186 from feature/REL1_5_STABLE/issue181

Add a ddr.reproducible option to SQL generator.

When true, it constrains the order of the generated DDR to be
consistent over successive compilations of the same sources,
useful in distribution builds where reproducibility is valued.
When false, it selects the previous behavior, where descriptors
can have different order from one compilation to the next of the
same sources; during testing, this can help to detect whether
there are necessary provides/requires relationships that haven't
been declared.

Addresses issue #181."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,dc45b700cdeb042cc165cbe8c4ab89ea081a6f54,Chapman Flack,2018-10-02T01:53:45Z,chap@anastigmatix.net,Chapman Flack,2018-10-02T01:53:45Z,chap@anastigmatix.net,143,128,15,"Merge pull request #186 from feature/REL1_5_STABLE/issue181

Add a ddr.reproducible option to SQL generator.

When true, it constrains the order of the generated DDR to be
consistent over successive compilations of the same sources,
useful in distribution builds where reproducibility is valued.
When false, it selects the previous behavior, where descriptors
can have different order from one compilation to the next of the
same sources; during testing, this can help to detect whether
there are necessary provides/requires relationships that haven't
been declared.

Addresses issue #181."
,pljava-so/src/main/c/Backend.c,3b135090ffea4eab21894386d94cb29539ddb822,Chapman Flack,2018-09-29T01:31:38Z,chap@anastigmatix.net,Chapman Flack,2018-09-29T01:31:38Z,chap@anastigmatix.net,43,26,17,"No really, avoid #if among macro arguments.

Thanks to Ken Olson for the reminder that the Windows MSVC compiler
won't accept conditional-compilation syntax within an invocation
of a preprocessor macro. 5e01f8f was already about that, but a few
uses have crept back in through my inattention.

Honestly, MSVC is doing a service here, as a quick check of the
standard shows that preprocessing directives within macro invocations
really do have undefined behavior. Addresses issue #182."
,pljava-so/src/main/c/InstallHelper.c,3b135090ffea4eab21894386d94cb29539ddb822,Chapman Flack,2018-09-29T01:31:38Z,chap@anastigmatix.net,Chapman Flack,2018-09-29T01:31:38Z,chap@anastigmatix.net,43,26,17,"No really, avoid #if among macro arguments.

Thanks to Ken Olson for the reminder that the Windows MSVC compiler
won't accept conditional-compilation syntax within an invocation
of a preprocessor macro. 5e01f8f was already about that, but a few
uses have crept back in through my inattention.

Honestly, MSVC is doing a service here, as a quick check of the
standard shows that preprocessing directives within macro invocations
really do have undefined behavior. Addresses issue #182."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava-so/src/main/c/ExecutionPlan.c,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIReadOnlyControl.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,146e2f38c096e3f6e704a2c88f55d5ceebf146f2,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:09:29Z,chap@anastigmatix.net,274,197,77,"Merge pull request #184 from bug/REL1_5_STABLE/issue178

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava-so/src/main/c/Backend.c,08e0c93eaa7bb6b5f24d06496e81b217d4ac1edd,Chapman Flack,2018-09-28T04:04:19Z,chap@anastigmatix.net,Chapman Flack,2018-09-28T04:04:19Z,chap@anastigmatix.net,99,92,7,"Merge pull request #183 from bug/REL1_5_STABLE/issue176

Pass PLJAVA_LIBJVMDEFAULT to the C compiler as an
already-properly-quoted C literal string, rather than
trying to rely on CppAsString2(), which can alter the
string by expanding tokens within it that happen to match
any of the many preprocessor macros defined during the build.

Addresses issue #176."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,c0f71d021a3f326468d07f7b30085d7f291ffe92,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,55,10,45,"Remove workarounds that were formerly needed.

... in the process, silencing the PostgreSQL warnings that the
VarlenaUDTTest I/O functions should not be VOLATILE."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,c0f71d021a3f326468d07f7b30085d7f291ffe92,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,55,10,45,"Remove workarounds that were formerly needed.

... in the process, silencing the PostgreSQL warnings that the
VarlenaUDTTest I/O functions should not be VOLATILE."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,c0f71d021a3f326468d07f7b30085d7f291ffe92,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:29:40Z,chap@anastigmatix.net,55,10,45,"Remove workarounds that were formerly needed.

... in the process, silencing the PostgreSQL warnings that the
VarlenaUDTTest I/O functions should not be VOLATILE."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,163505c0393280fc7ed2fb03b4d6869a41362238,Chapman Flack,2018-09-24T05:13:15Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,45,41,4,"Have Loader force SPI read_only false as needed.

This is meant to eliminate the hacks needed for classloading initiated
from deployment descriptors in the course of install_jar or replace_jar,
as detailed in issue #178.

It is not the only possible approach, but was favored in
https://www.postgresql.org/message-id/14247.1537418670%40sss.pgh.pa.us

An approach that could be less invasive and tidier was proposed in
https://www.postgresql.org/message-id/5BA6BA96.5030309%40anastigmatix.net
but would presuppose later PostgreSQL API such as PushCopiedSnapshot,
which does not appear until 9.1. On this branch, PL/Java still supports
earlier versions, so this approach will have to do."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIReadOnlyControl.java,9ff8655fd5608327cdc2df7685e935a26b042b06,Chapman Flack,2018-09-24T00:40:38Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,74,71,3,Give Statement an SPIReadOnlyControl interface.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,9ff8655fd5608327cdc2df7685e935a26b042b06,Chapman Flack,2018-09-24T00:40:38Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,74,71,3,Give Statement an SPIReadOnlyControl interface.
,pljava-so/src/main/c/ExecutionPlan.c,4af7781b4bec3a07889cc0ec55d8962464a40584,Chapman Flack,2018-09-24T00:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,100,75,25,"Let ExecutionPlan methods override read_only.

They are used only in SPIStatement and SPIPreparedStatement, which will
be given extended API to specify SPI_READONLY_DEFAULT (the current
behavior) or SPI_READONLY_FORCED or SPI_READONLY_CLEARED.

In passing, deprecate an exec() method in SPI.java that seems unused
not only in the current codebase, but in the entire git history of
the project (and does not allow control of read_only)."
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,4af7781b4bec3a07889cc0ec55d8962464a40584,Chapman Flack,2018-09-24T00:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,100,75,25,"Let ExecutionPlan methods override read_only.

They are used only in SPIStatement and SPIPreparedStatement, which will
be given extended API to specify SPI_READONLY_DEFAULT (the current
behavior) or SPI_READONLY_FORCED or SPI_READONLY_CLEARED.

In passing, deprecate an exec() method in SPI.java that seems unused
not only in the current codebase, but in the entire git history of
the project (and does not allow control of read_only)."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,4af7781b4bec3a07889cc0ec55d8962464a40584,Chapman Flack,2018-09-24T00:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-09-24T05:16:10Z,chap@anastigmatix.net,100,75,25,"Let ExecutionPlan methods override read_only.

They are used only in SPIStatement and SPIPreparedStatement, which will
be given extended API to specify SPI_READONLY_DEFAULT (the current
behavior) or SPI_READONLY_FORCED or SPI_READONLY_CLEARED.

In passing, deprecate an exec() method in SPI.java that seems unused
not only in the current codebase, but in the entire git history of
the project (and does not allow control of read_only)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,b72bd199f6e0a3fbfef15fbb67a3f3baecdb22ec,Chapman Flack,2018-09-23T21:21:34Z,chap@anastigmatix.net,Chapman Flack,2018-09-23T21:21:34Z,chap@anastigmatix.net,143,128,15,"Add a ddr.reproducible option to SQL generator.

When true, it constrains the order of the generated DDR to be
consistent over successive compilations of the same sources,
useful in distribution builds where reproducibility is valued.
When false, it selects the previous behavior, where descriptors
can have different order from one compilation to the next of the
same sources; during testing, this can help to detect whether
there are necessary provides/requires relationships that haven't
been declared.

Addresses issue #181.

The 'reproducible' option also fixes the order of Java-to-SQL
type mappings known to the generator, though this is an internal
detail; the ordered mappings are not emitted explicitly into the
DDR, and if a change in their order would affect what is written
there, that would probably indicate a more serious issue."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,b72bd199f6e0a3fbfef15fbb67a3f3baecdb22ec,Chapman Flack,2018-09-23T21:21:34Z,chap@anastigmatix.net,Chapman Flack,2018-09-23T21:21:34Z,chap@anastigmatix.net,143,128,15,"Add a ddr.reproducible option to SQL generator.

When true, it constrains the order of the generated DDR to be
consistent over successive compilations of the same sources,
useful in distribution builds where reproducibility is valued.
When false, it selects the previous behavior, where descriptors
can have different order from one compilation to the next of the
same sources; during testing, this can help to detect whether
there are necessary provides/requires relationships that haven't
been declared.

Addresses issue #181.

The 'reproducible' option also fixes the order of Java-to-SQL
type mappings known to the generator, though this is an internal
detail; the ordered mappings are not emitted explicitly into the
DDR, and if a change in their order would affect what is written
there, that would probably indicate a more serious issue."
,pljava-so/src/main/c/Backend.c,92b15e4a3642d98c61f71bc23919507f84727b7f,Chapman Flack,2018-09-21T05:33:28Z,chap@anastigmatix.net,Chapman Flack,2018-09-21T05:33:28Z,chap@anastigmatix.net,85,78,7,"Use script task to quote libjvmdefault as C string

This is needed because the current practice of passing the default JVM
path as a command-line macro definition to the C compiler and relying
on C preprocessor stringification to make a string literal of it only
works when the path includes no word-like components that collide with
macros in existence during the build. (Issue #176)

It seemed tidier to use scriptdef, but that plain doesn't work
from a maven-antrun-plugin configuration; the plugin writes out a
script file containing every part of the scriptdef except the script.

The bug report hasn't been assigned yet...
https://issues.apache.org/jira/browse/MANTRUN-207

too bad, as the only problem looks to be right here:
http://svn.apache.org/viewvc/maven/plugins/tags/maven-antrun-plugin-1.8/src/main/java/org/apache/maven/plugin/antrun/AntrunXmlPlexusConfigurationWriter.java?revision=1646987&view=markup#l69

So, for now, this is done with a script tag, no scriptdef."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,445ae939cc4769a732e02ef8008d38acb6389247,Chapman Flack,2018-09-10T08:01:53Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T08:01:53Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.1-BETA2.

-packaging/build.xml already makes an update .sql from 1.5.1-BETA1,
the last released version. No change needed before this release."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/JDBC42_21.java,8ab1149d308618aa408a1d462935183cc7a8aef6,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,23,23,0,"Fix javadoc nits in examples.

Two examples moved to jdk7 needed imports added to resolve doc links
to a class in their former package. Speaking of packages, also add
package-info.java where it was missing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,8ab1149d308618aa408a1d462935183cc7a8aef6,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,23,23,0,"Fix javadoc nits in examples.

Two examples moved to jdk7 needed imports added to resolve doc links
to a class in their former package. Speaking of packages, also add
package-info.java where it was missing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/package-info.java,8ab1149d308618aa408a1d462935183cc7a8aef6,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,23,23,0,"Fix javadoc nits in examples.

Two examples moved to jdk7 needed imports added to resolve doc links
to a class in their former package. Speaking of packages, also add
package-info.java where it was missing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/package-info.java,8ab1149d308618aa408a1d462935183cc7a8aef6,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,23,23,0,"Fix javadoc nits in examples.

Two examples moved to jdk7 needed imports added to resolve doc links
to a class in their former package. Speaking of packages, also add
package-info.java where it was missing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/package-info.java,8ab1149d308618aa408a1d462935183cc7a8aef6,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T07:55:35Z,chap@anastigmatix.net,23,23,0,"Fix javadoc nits in examples.

Two examples moved to jdk7 needed imports added to resolve doc links
to a class in their former package. Speaking of packages, also add
package-info.java where it was missing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,8bc481eaf48f6359d4957e10fb154cc925eced86,Chapman Flack,2018-09-09T12:24:04Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:28:40Z,chap@anastigmatix.net,46,40,6,"Preserve Java 6 buildability.

The AbstractResultSet needs to declare abstract the getObject-
with-class method that won't really appear in the interface
until Java 7. The PassXML example should use getSQLXML(), which
existed in Java 6, rather than getObject(..., SQLXML.class),
which did not.

The TypeRoundTripper example has inherent reason to use the
getObject(..., Class<?>) method, so just move it into an
example/jdk7 directory that is only built when a JDK [1.7,)
profile is active, much like what was done with the Saxon
example. But in this case, do not exclude it from the javadoc
build; I would rather say ""Java 6 is too old to build the docs""
than leave more stuff out of the docs so Java 6 can build them.

Why two different older versions of maven-resources-plugin
were specified in two different places may just have been an
artifact of history. 3.0.1 is its latest version with a class
file version not greater than 50.

The JDBC42_21 example is a strange case; it tests some JDBC4.2
functionality, so it definitely won't work before Java 8, but is written
so it can still be compiled in Java 6. However, the SQL generator will
object to its 'requires' dependency on TypeRoundTripper, which got moved
to the jdk7 package, so this must go there too."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/JDBC42_21.java,8bc481eaf48f6359d4957e10fb154cc925eced86,Chapman Flack,2018-09-09T12:24:04Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:28:40Z,chap@anastigmatix.net,46,40,6,"Preserve Java 6 buildability.

The AbstractResultSet needs to declare abstract the getObject-
with-class method that won't really appear in the interface
until Java 7. The PassXML example should use getSQLXML(), which
existed in Java 6, rather than getObject(..., SQLXML.class),
which did not.

The TypeRoundTripper example has inherent reason to use the
getObject(..., Class<?>) method, so just move it into an
example/jdk7 directory that is only built when a JDK [1.7,)
profile is active, much like what was done with the Saxon
example. But in this case, do not exclude it from the javadoc
build; I would rather say ""Java 6 is too old to build the docs""
than leave more stuff out of the docs so Java 6 can build them.

Why two different older versions of maven-resources-plugin
were specified in two different places may just have been an
artifact of history. 3.0.1 is its latest version with a class
file version not greater than 50.

The JDBC42_21 example is a strange case; it tests some JDBC4.2
functionality, so it definitely won't work before Java 8, but is written
so it can still be compiled in Java 6. However, the SQL generator will
object to its 'requires' dependency on TypeRoundTripper, which got moved
to the jdk7 package, so this must go there too."
,pljava-examples/src/main/java/org/postgresql/pljava/example/jdk7/TypeRoundTripper.java,8bc481eaf48f6359d4957e10fb154cc925eced86,Chapman Flack,2018-09-09T12:24:04Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:28:40Z,chap@anastigmatix.net,46,40,6,"Preserve Java 6 buildability.

The AbstractResultSet needs to declare abstract the getObject-
with-class method that won't really appear in the interface
until Java 7. The PassXML example should use getSQLXML(), which
existed in Java 6, rather than getObject(..., SQLXML.class),
which did not.

The TypeRoundTripper example has inherent reason to use the
getObject(..., Class<?>) method, so just move it into an
example/jdk7 directory that is only built when a JDK [1.7,)
profile is active, much like what was done with the Saxon
example. But in this case, do not exclude it from the javadoc
build; I would rather say ""Java 6 is too old to build the docs""
than leave more stuff out of the docs so Java 6 can build them.

Why two different older versions of maven-resources-plugin
were specified in two different places may just have been an
artifact of history. 3.0.1 is its latest version with a class
file version not greater than 50.

The JDBC42_21 example is a strange case; it tests some JDBC4.2
functionality, so it definitely won't work before Java 8, but is written
so it can still be compiled in Java 6. However, the SQL generator will
object to its 'requires' dependency on TypeRoundTripper, which got moved
to the jdk7 package, so this must go there too."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,8bc481eaf48f6359d4957e10fb154cc925eced86,Chapman Flack,2018-09-09T12:24:04Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:28:40Z,chap@anastigmatix.net,46,40,6,"Preserve Java 6 buildability.

The AbstractResultSet needs to declare abstract the getObject-
with-class method that won't really appear in the interface
until Java 7. The PassXML example should use getSQLXML(), which
existed in Java 6, rather than getObject(..., SQLXML.class),
which did not.

The TypeRoundTripper example has inherent reason to use the
getObject(..., Class<?>) method, so just move it into an
example/jdk7 directory that is only built when a JDK [1.7,)
profile is active, much like what was done with the Saxon
example. But in this case, do not exclude it from the javadoc
build; I would rather say ""Java 6 is too old to build the docs""
than leave more stuff out of the docs so Java 6 can build them.

Why two different older versions of maven-resources-plugin
were specified in two different places may just have been an
artifact of history. 3.0.1 is its latest version with a class
file version not greater than 50.

The JDBC42_21 example is a strange case; it tests some JDBC4.2
functionality, so it definitely won't work before Java 8, but is written
so it can still be compiled in Java 6. However, the SQL generator will
object to its 'requires' dependency on TypeRoundTripper, which got moved
to the jdk7 package, so this must go there too."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,3a77b0fbc0dbaac7f05d761fa68d0d12b3afa77e,Chapman Flack,2018-09-09T12:31:03Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:25:47Z,chap@anastigmatix.net,12,6,6,"Future-proof the TypeRoundTripper.

The result column names already match case-insensitively, as
the javadoc says, but only because of the unconditional
toUpperCase() being done in SPIResultSetMetaData. One day that
should get the axe, and these comparisons should still be case
insensitive, as they are documented to be."
,pljava-so/src/main/c/type/Type.c,294fce997f265a682ae2a745c891bab4ce5d0d90,Chapman Flack,2018-09-08T23:47:11Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:25:06Z,chap@anastigmatix.net,27,10,17,"Avoid trying to use type names in Type.c messages.

The simplest (or simplest-looking) way was to call format_type_be,
but that function throws an error if the passed Oid is InvalidOid
or an unknown type, so instead of the intended useful message in
the log, a less helpful one gets thrown (and possibly turns a
debug message or warning into an error).

There is no equally-easy-to-call backend function to format a
regtype with a benign fallback if it isn't known. The fmgr-callable
format_type() works, but then you're going cstring::text::cstring
just to make a message that might be at debug level and go nowhere.

Just put the numeric oids in the message."
,src/site/resources/css/site.css,a7452ef5ae1736d5140d95158df5a49fe98537b5,Chapman Flack,2018-09-08T03:42:21Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:24:14Z,chap@anastigmatix.net,14,14,0,"Tired of ugly double-outline .source divs.

The default Maven site template for some reason creates two
immediately nested div elements with class ""source"", which are
both subject to the goofy rule putting a box around. Result:
two boxes and doubled padding and margins.

Web styling isn't my chief joy in life and I don't feel like
fixing the template, but I am very tired of the ugly double
boxes, so at least this is something."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,dc7fd37f742107028015a8a8db974a7e94530db7,Chapman Flack,2018-09-10T06:16:53Z,chap@anastigmatix.net,Chapman Flack,2018-09-10T06:16:53Z,chap@anastigmatix.net,1928,1928,0,"Merge pull request #174 from explorative/REL1_5_STABLE/s9api

While the ISO SQL/XML standard calls for XMLQUERY and XMLTABLE functions
based on the XQuery language, the similar functions in PostgreSQL core
are limited to what the C libxml2 supports, which is XPath only, and
XPath 1.0, at that (and the libxml2 developers seem to have little
interest in changing that).

Adds an example, not built by default (with the needed changes to
pljava-examples/pom.xml to permit examples that are included but not
built by default), that uses the Saxon-HE library to provide partial
implementations of both functions, built on actual modern XQuery (only
without schema-awareness, which is not in the open-source -HE Saxon
product).

These examples are work-in-progress, incomplete, and cut some corners,
but a useful subset of the requirements is already usable. In the case
of XMLQUERY, the SQL/XML standard's special syntax in the function call
for RETURNING CONTENT or RETURNING SEQUENCE has to be split into two
ordinary functions of different return types, and only the one returning
CONTENT is implemented so far. RETURNING SEQUENCE will have to wait
until there is a PostgreSQL data type like XML(SEQUENCE).

XMLTABLE so far implements only column expressions of atomic types;
returning bits of XML are not supported yet. And some of the automatic
casts between atomic types according to the standard are not yet
implemented, but that is no blocker, as the XQuery expressions can do
explicit casts anywhere the implicit ones aren't happening. For the
typical purpose of shredding some XML into a table of atomic values,
type-safely, a lot can already be done with what is implemented so far.

Some timings on the PL/Java performance-tuning wiki page show true
XQuery, via Saxon and PL/Java, performing quite respectably relative to
the PostgreSQL native function using XPath and the native libxml2."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,7b757d8d05292445de3a911da9da30603e7431d6,Chapman Flack,2018-09-08T02:44:32Z,chap@anastigmatix.net,Chapman Flack,2018-09-08T02:44:32Z,chap@anastigmatix.net,59,47,12,"Add advice about uppercasing parameter names.

The toUppercase() in SPIResultSetMetaData.getColumnLabel() seems to be
required by nothing in JDBC that I can find. I see nothing like it in
pgjdbc. But it has been in PL/Java since 2005. It can't be just yanked
out abruptly, but it's got to be deprecated and removed in some future
release.

Therefore, advise not to rely on the behavior for parameter names
passed into XQuery here, but to really, for the time being, spell them
in all upper case, both in the XQuery text and in the SQL. In PostgreSQL,
of course, that also means they have to be quoted in the SQL."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,6d3b222629a88395159b972bdd9c6efaa586a6cd,Chapman Flack,2018-09-07T04:03:34Z,chap@anastigmatix.net,Chapman Flack,2018-09-07T04:03:34Z,chap@anastigmatix.net,216,215,1,"Document the optionally-built Saxon example code.

Copy in a bunch of the javadoc, as the javadoc (for now) is
unconditionally excluded from the build.

Remove the column-definition-list alias it seems I unnecessarily
included in the original javadoc."
,pljava-examples/src/main/java/org/postgresql/pljava/example/saxon/S9.java,bec61306b24a95826b1cf0f2e476f579f9e412fa,Chapman Flack,2018-09-04T05:20:26Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:13:15Z,chap@anastigmatix.net,55,49,6,"Include Saxon example, but not built by default.

Add a Maven profile -Psaxon-examples that will pull in Saxon-HE
as a dependency and build the Saxon example, which (unlike the
rest of the PL/Java sources) depends on Java 8.

In passing, update the version of Saxon-HE in the dependency.

For now, to avoid javadoc conniptions when the Saxon dependency
isn't present, exclude the saxon example from javadoc unconditionally.
Maybe there is a way to tie that also to the profile activation, later."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,a5d4e5dd11c1e482f106477a38d932acf266d73b,Chapman Flack,2018-09-04T00:04:11Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:13:15Z,chap@anastigmatix.net,281,96,185,"Simplify by using JSR 310 date/time classes.

They output and parse the same character format as the XML Schema types,
and the local time/timestamp classes don't have the counterintuitive
dependency on the session time zone.

Also, the decision to introduce SQLXML as a non-compatibility-breaking
change means it also has to be requested explicitly from the driver,
just like the JSR 310 types."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Backend.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/DualState.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/ExecutionPlan.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/InstallHelper.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/Invocation.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/SQLInputFromTuple.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/VarlenaWrapper.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Composite.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Date.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/HeapTupleHeader.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/JavaWrapper.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Oid.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Portal.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Relation.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/SQLXMLImpl.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Time.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Timestamp.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Tuple.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/TupleDesc.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/type/Type.c,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/InstallHelper.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/pljava.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Timestamp.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Tuple.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/include/pljava/type/Type.h,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/MarkableSequenceInputStream.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,8ae24193869b6d408ae3629e5e5def69a6ae8e27,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:11:35Z,chap@anastigmatix.net,9389,7539,1850,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,c6474ebf8641912d80f1c9b1129c641e2450d655,Chapman Flack,2018-09-06T01:00:59Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:00:59Z,chap@anastigmatix.net,341,320,21,Merge pull request #173 from feature/REL1_5_STABLE/j9sharing
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,c6474ebf8641912d80f1c9b1129c641e2450d655,Chapman Flack,2018-09-06T01:00:59Z,chap@anastigmatix.net,Chapman Flack,2018-09-06T01:00:59Z,chap@anastigmatix.net,341,320,21,Merge pull request #173 from feature/REL1_5_STABLE/j9sharing
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,5433cd5582adf4e808a57f64392675bbfd61ffa3,Chapman Flack,2018-09-05T03:59:48Z,chap@anastigmatix.net,Chapman Flack,2018-09-05T03:59:48Z,chap@anastigmatix.net,39,20,19,"Avoid unnecessary jar_entry lookups.

The choice to use entryId for generating the J9 class caching
token enables a further optimization, as the entryId is known
in advance so the token depends on nothing from the jar_entry
row. The check in the class cache can be made before querying
jar_entry at all."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,bb3ecf19a78f8053160997bfda95b0f5c878fb10,Chapman Flack,2018-09-03T20:47:03Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:50:15Z,chap@anastigmatix.net,42,34,8,"Derive a cache token from the entryId.

This is dead simple, and workable because (in the current, 1.5.0
sqlj schema), the entryId is a SERIAL column, and all entries are
deleted/reinserted by replace_jar. Of course this means that every
cached class from the jar is invalidated even if few have changed,
but optimizing that can be future work."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,bb3ecf19a78f8053160997bfda95b0f5c878fb10,Chapman Flack,2018-09-03T20:47:03Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:50:15Z,chap@anastigmatix.net,42,34,8,"Derive a cache token from the entryId.

This is dead simple, and workable because (in the current, 1.5.0
sqlj schema), the entryId is a SERIAL column, and all entries are
deleted/reinserted by replace_jar. Of course this means that every
cached class from the jar is invalidated even if few have changed,
but optimizing that can be future work."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,4758f8905441af76a2909c0bc5662df7db644217,Chapman Flack,2018-09-03T17:58:02Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:50:15Z,chap@anastigmatix.net,186,184,2,"Share PL/Java and application classes in OpenJ9.

The OpenJ9 JVM has a facility for dynamically saving AOT-compiled
classes in a shared cache, which is even available for classes of
PL/Java application code, provided PL/Java's class loader does a
bit of coordination with J9's class sharing API.

The token generated for the J9 SharedClassTokenHelper is, for now,
fixed, which will be bad news if a jar is updated. It should be
computed in a way that ensures it is different after an update."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,e68f59276c5a5427695f88f68424e8e017e1d59a,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:44:36Z,chap@anastigmatix.net,669,387,282,Merge pull request #172 from chore/REL1_5_STABLE/schemaqual
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,ce8c0d866a4cf174d79b5bc81ef3e91b9ee0d1d6,Chapman Flack,2018-09-04T01:18:54Z,chap@anastigmatix.net,Chapman Flack,2018-09-04T01:18:54Z,chap@anastigmatix.net,2,1,1,One last type you mightn't think to schema-qualify
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,2f592b1faa0c6a23981b7065a4853b02d9fb7785,Chapman Flack,2018-09-03T02:16:41Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T02:16:41Z,chap@anastigmatix.net,114,20,94,"Axe NOSCHEMAS clauses and a bubble sort.

All of those NOSCHEMAS clauses for DatabaseMetaData.getTable
were intended to support PostgreSQL versions before schemas.
They have never not been dead code in PL/Java's git history,
and schemas came to PostgreSQL in 7.3, well before the 8.2
currently the back-compatibility horizon. Out with 'em.

Also out with a little custom bubble sort for putting an
array of String into natural order, much as Arrays.sort would."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,a7ce56fa82afbde6f2ecbf3b063863919e58f2d6,Chapman Flack,2018-09-03T02:03:49Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T02:03:49Z,chap@anastigmatix.net,408,269,139,"Schema-qualifications in DatabaseMetaData

In passing, remove one PostgreSQL version test for a version
before 8, no longer supported.

Also in passing, unbreak a couple of queries used for getTables()
when SYSTEM TABLE or SYSTEM INDEX is the type of interest, and
useSchemas is NOSCHEMAS. The feeling of accomplishment (the case
got broken in 6a7eda5, or at least one did) lasts only long enough
to discover both cases have been wholly unused for longer than that:
useSchemas has been hardcoded to SCHEMAS since inception. Bit more
digging to see what the other case was intended for."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,64a28051e1bae6b79efea52310b3d410a55443d4,Chapman Flack,2018-09-02T17:22:13Z,chap@anastigmatix.net,Chapman Flack,2018-09-03T01:13:18Z,chap@anastigmatix.net,188,111,77,"Schema-qualify internally-generated names

... in various places except DatabaseMetaData. That thing'll be worth
a commit all its own.

In cases where a type name can't be qualified (because it's just an
alias known to the parser), that's ok, because those known aliases
have precedence over newly-created types, unless quoted."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,5e1a27c9172d5f5f8a19427ef546af55bc46a256,Chapman Flack,2018-08-29T03:18:00Z,chap@anastigmatix.net,Chapman Flack,2018-09-02T01:36:34Z,chap@anastigmatix.net,265,236,29,"General updates in existing docs.

In passing, fix a typo in some example javadoc, and
use proper Markdown for em dash.

Markdown seems to be TeXlike, using -- for en and --- for em.

Reportedly, GitHub Flavored Markdown may mess up ---, but the
processor used by Maven/Velocity seems to make it a proper em dash."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/Backend.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/DualState.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/Invocation.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/JNICalls.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/VarlenaWrapper.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/type/Oid.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/type/Portal.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/type/SQLXMLImpl.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/c/type/Type.c,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/include/pljava/DualState.h,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/include/pljava/JNICalls.h,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-so/src/main/include/pljava/VarlenaWrapper.h,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4f891a8320effa6d97060de765c8769b941136af,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T15:52:16Z,chap@anastigmatix.net,6567,6491,76,"Merge pull request #171 from trackjdbc/REL1_5_STABLE/SQLXML

This type has been unsupported in PL/Java until now, despite being
specified in JDBC since version 4 and Java 6 and despite PostgreSQL
having an XML type since PG 8.3.

It has not been impossible for PL/Java functions to work with XML data;
the default mappings have allowed accessing a value of XML type as a
String object. But that's an extra porting burden on code developed
with the standard API in mind, can risk either unexpected errors or
silent corruption for some combinations of character encoding settings,
and also has memory implications.

While a database design using XML may be such that each XML datum is
individually very small, it is also easy to store, or generate in
queries, large XML values. When mapped to a Java String, such an
XML value ends up with its full, uncompressed, character-serialized size
having to be allocated on the Java heap and copied there from native
memory, before the Java code even begins to make use of it. Even in
cases where the Java processing to be done can be organized as a scan
through parse events in constant-bounded memory, the String
representation forces the entire XML value to occupy Java memory at
once, and a worst-case estimate of that size may need to be used when
tuning heap size options for the Java VM, to avoid failures at run time.

An SQLXML instance can have the ""conceptual states"" readable and
not readable, writable and not writable. In PL/Java, an instance
passed in as a parameter to a function, or retrieved from a ResultSet,
is readable and not writable, and can be used as input to processing
using any of several Java XML APIs. It can be used that way exactly
once, which changes its state to not readable. As it is read, it
streams data as needed from PG native memory directly, without ever
(unless requested in String or DOM form) accumulating it all on the
Java heap. Java heap sizing can thus be based on just what the
application Java code will be doing with the data.

To obtain a readable instance, declare java.sql.SQLXML as the type
of a function parameter where PostgreSQL will pass an XML argument, or
use the getSQLXML or getObject(..., SQLXML.class) methods on a
ResultSet, or the readSQLXML or readObject(SQLXML.class) methods
on SQLInput. A fully JDBC-4.0 compliant driver would also return
SQLXML instances from the non-specific getObject and readObject
methods, but in PL/Java, those have historically returned String.
Because 1.5.1 is not a major release, their behavior has not changed,
and the more-specific methods must be used to obtain SQLXML instances.

PL/Java will supply an empty SQLXML instance that is writable and
not readable via the Connection method createSQLXML(). It can be
used as an output destination for any of several Java XML APIs, again
exactly once, which changes its state to not writable. Once fully
written and closed, it can be returned from a Java function, passed as a
PreparedStatement parameter to a nested query, or stored into writable
ResultSets used for composite function or trigger results. As it is
written, it streams data directly into PG native memory, not the Java
heap.

A written SQLXML instance can be used exactly once in any of those
ways, which transfer its ownership back to PostgreSQL, leaving it
inaccessible from Java.

The general rule that only a writable instance (that has been written
and closed) can be used as a function result, or passed into a nested
query, admits one exception, allowing a readable instance that Java
code has obtained but not read. That makes it simple for Java code to
obtain an SQLXML instance passed in as a parameter, or from a query,
and use it directly as a result or a nested-query parameter. Each
instance, again, can be used this way exactly once.

An XML value in SQL can have the type XML(DOCUMENT) or XML(CONTENT)
(as those are defined in the ISO SQL standard, 2006 and later), which
PostgreSQL does not currently treat as distinct types. The DOCUMENT
form must have exactly one root element, may have a DTD, and has strict
limits on where other productions (other than comments and processing
instructions) can occur. A value in CONTENT form may have no root
element, or more than one element at top level, and other productions
such as character data outside of a root element where DOCUMENT form
would not allow them.

Java code using a readable SQLXML instance as input should be
prepared to encounter either form (unless it has out-of-band knowledge
of which form will be supplied). If it requests a DOMSource, it will
retrieve a Document node, if the value met all the requirements for
DOCUMENT, or a DocumentFragment node, if it was parsable as
CONTENT. Java code requesting a SAXSource or StAXSource should be
prepared to handle a sequence of parse events that might not be
encountered when parsing a strictly conforming DOCUMENT. Java code
that requests an InputStream, Reader, String, or StreamSource
will be on its own to parse the data in whichever form appears.

Java code using a writable SQLXML instance to produce a result may
write either DOCUMENT or CONTENT form. If using DOMResult, it must
supply a DocumentFragment node to produce a CONTENT result, as a
Document node will enforce the DOCUMENT requirements.

The JDBC spec provides that an SQLXML instance is ""valid for the
duration of the transaction in which it was created."" One PL/Java
function can hold an SQLXML instance (in a static or session variable
or data structure), and other PL/Java functions called later in the same
transaction can continue reading from or writing to it. If the
transaction has committed or rolled back, those operations will generate
an exception.

PostgreSQL can represent large XML values in ""TOASTed"" form, which may
be in memory but compressed (XML typically compresses to a small
fraction of its serialized size), or may be a small pointer to a
location in storage. A readable SQLXML instance over a TOASTed value
will not be detoasted until Java code actually begins to read it, so the
memory footprint of an instance being held but not yet read is kept low.

Some of the methods by which a writable instance can be written are
not XML-specific APIs, but allow arbitrary content to be written (as a
String, Writer, or OutputStream). When written by those methods,
it upholds type safety by verifying that the written content can be
successfully reparsed, accepting either DOCUMENT or CONTENT form.

It remains possible to declare the Java type String for function
parameters and returns of XML type, and to retrieve and supply String
for ResultSet columns and PreparedStatement parameters of XML type.
This historic mapping from String to XML uses PostgreSQL's xml_in
function to verify the form of a String from Java. That function may
reject some valid values if the server configuration variable
xmloption is not first set to DOCUMENT or CONTENT to match the
type of the value.

In symmetry to using Java String for SQL XML types, PL/Java allows the
Java SQLXML type to be used with PostgreSQL data of type text. This
allows full use of the Java XML APIs even in PostgreSQL instances built
without XML support. All of the SQLXML behaviors described above also
apply in this usage.

If a readable SQLXML instance obtained from a text value is
directly used to set or return a value of PostgreSQL's XML type, the
XML-ness of the content is verified."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,021f81bcd765e3c12ff6bd2f59d0b3782cbccd10,Chapman Flack,2018-08-27T01:55:25Z,chap@anastigmatix.net,Chapman Flack,2018-08-27T01:55:25Z,chap@anastigmatix.net,7,6,1,"Make installing the unsandboxed example opt-in.

The prepareXMLTransform example function relies on Java's
TransformerFactory.newTemplates() method, and that seems to
fail unless unsandboxed, at least in newer JREs where the
""XSLTC"" transformer compiler is used.

To avoid having the examples jar install an unsandboxed function
unasked, require an extra implementor tag to be set in
pljava.implementors if the function is wanted."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/ExecutionPlan.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/Invocation.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/SQLInputFromTuple.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Composite.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Date.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/HeapTupleHeader.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Oid.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Portal.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Relation.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/SQLXMLImpl.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Time.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Timestamp.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Tuple.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/TupleDesc.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/c/type/Type.c,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/include/pljava/type/Timestamp.h,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/include/pljava/type/Tuple.h,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-so/src/main/include/pljava/type/Type.h,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,50d817a9083bb154bf5f964dfe129ecf1dc6622e,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T17:20:57Z,chap@anastigmatix.net,2942,2596,346,"Merge branch 'REL1_5_STABLE' into trackjdbc/REL1_5_STABLE/SQLXML

That makes it possible for SQLXML to be implemented on top of the
recently merged JDBC 4.1/4.2 methods that allow a Class<?> parameter
to Object getter methods (and, in the other direction, can accept
objects of multiple classes and appropriately convert them to the
underlying PostgreSQL type).

This solves a problem with including SQLXML in a minor PL/Java
release: it should not change what existing application code
expects the getter methods to return for an XML type, which has
historically been String. It will still be String by default,
but an application can pass SQLXML.class to the explicit getter
methods and take advantage of this API. Function parameters and
returns can be given either type String or type SQLXML with the
expected results.

In technical terms, this means when pljava_SQLXMLImpl_initialize
calls Type_registerType2, it now passes InvalidOid instead of
XMLOID. It therefore does not become the primary mapping for XMLOID,
but does associate itself with the java.sql.SQLXML interface.
There is also a TypeBridge registered for it, which happens in
Type.c: registration of TypeBridges should happen all in that one
place, because (for now, anyway) the maintainer is responsible
for registering them in an order that does not allow a superclass/
superinterface to be found before a narrower contained type.

MANUAL ADAPTATIONS ARE CONTAINED IN THIS MERGE COMMIT as described
above."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/ExecutionPlan.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/SQLInputFromTuple.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Composite.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Date.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/HeapTupleHeader.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Oid.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Relation.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Time.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Timestamp.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Tuple.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/TupleDesc.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/c/type/Type.c,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/include/pljava/type/Timestamp.h,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/include/pljava/type/Tuple.h,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-so/src/main/include/pljava/type/Type.h,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,f3bbb79e599ae609943fd0a1240f8025257f53a2,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:29:17Z,chap@anastigmatix.net,2706,2417,289,"Merge pull request #170 from feature/REL1_5_STABLE/issue137

Adds support for JDBC 4.1 ResultSet.getObject(..., Class<?>) and
JDBC 4.2 SQLInput.readObject(..., Class<?>), and with those methods
to facilitate extension, adds the JDBC 4.2 support for Java 8
java.time.{LocalDate,LocalTime,OffsetTime,LocalTimeStamp,OffsetTimeStamp}
as alternate (and preferable!) mappings for date, time, timetz,
timestamp, and timestamptz, respectively.

Addresses issue #137."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,72cbb15cd878264bce4c1829ec33bace357b0800,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,157,117,40,"Let timestamp values roundtrip even when infinite.

The Java classes representing them do not have a notion of
'infinity' or '-infinity' as PostgreSQL does. For now, just
produce instances of the desired classes with the naturally
converted values, which will appear as particular, crazy late
or crazy early, finite timestamps, and just make sure those
specific values convert back in the other direction to PostgreSQL
'infinity' and '-infinity'. Java code could use a query to
generate one of each object and save them, to recognize or use
infinite values later in real data.

The above works as advertised with integer_datetimes (which has
been the default for many PG versions, and is now not even
selectable). With the older, floating-point representation, it
doesn't, and given the combination of obsolescence of the float
representation and rarity of infinite values in practice, is arguably
not worth much effort to improve.

Add some tests with infinite values to the JDBC42_21 example, included
only when integer_datetimes is on.

In passing, update copyright in some files that were touched earlier
without doing that."
,pljava-so/src/main/c/type/Date.c,72cbb15cd878264bce4c1829ec33bace357b0800,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,157,117,40,"Let timestamp values roundtrip even when infinite.

The Java classes representing them do not have a notion of
'infinity' or '-infinity' as PostgreSQL does. For now, just
produce instances of the desired classes with the naturally
converted values, which will appear as particular, crazy late
or crazy early, finite timestamps, and just make sure those
specific values convert back in the other direction to PostgreSQL
'infinity' and '-infinity'. Java code could use a query to
generate one of each object and save them, to recognize or use
infinite values later in real data.

The above works as advertised with integer_datetimes (which has
been the default for many PG versions, and is now not even
selectable). With the older, floating-point representation, it
doesn't, and given the combination of obsolescence of the float
representation and rarity of infinite values in practice, is arguably
not worth much effort to improve.

Add some tests with infinite values to the JDBC42_21 example, included
only when integer_datetimes is on.

In passing, update copyright in some files that were touched earlier
without doing that."
,pljava-so/src/main/c/type/Time.c,72cbb15cd878264bce4c1829ec33bace357b0800,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,157,117,40,"Let timestamp values roundtrip even when infinite.

The Java classes representing them do not have a notion of
'infinity' or '-infinity' as PostgreSQL does. For now, just
produce instances of the desired classes with the naturally
converted values, which will appear as particular, crazy late
or crazy early, finite timestamps, and just make sure those
specific values convert back in the other direction to PostgreSQL
'infinity' and '-infinity'. Java code could use a query to
generate one of each object and save them, to recognize or use
infinite values later in real data.

The above works as advertised with integer_datetimes (which has
been the default for many PG versions, and is now not even
selectable). With the older, floating-point representation, it
doesn't, and given the combination of obsolescence of the float
representation and rarity of infinite values in practice, is arguably
not worth much effort to improve.

Add some tests with infinite values to the JDBC42_21 example, included
only when integer_datetimes is on.

In passing, update copyright in some files that were touched earlier
without doing that."
,pljava-so/src/main/c/type/Timestamp.c,72cbb15cd878264bce4c1829ec33bace357b0800,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,157,117,40,"Let timestamp values roundtrip even when infinite.

The Java classes representing them do not have a notion of
'infinity' or '-infinity' as PostgreSQL does. For now, just
produce instances of the desired classes with the naturally
converted values, which will appear as particular, crazy late
or crazy early, finite timestamps, and just make sure those
specific values convert back in the other direction to PostgreSQL
'infinity' and '-infinity'. Java code could use a query to
generate one of each object and save them, to recognize or use
infinite values later in real data.

The above works as advertised with integer_datetimes (which has
been the default for many PG versions, and is now not even
selectable). With the older, floating-point representation, it
doesn't, and given the combination of obsolescence of the float
representation and rarity of infinite values in practice, is arguably
not worth much effort to improve.

Add some tests with infinite values to the JDBC42_21 example, included
only when integer_datetimes is on.

In passing, update copyright in some files that were touched earlier
without doing that."
,pljava-so/src/main/include/pljava/type/Timestamp.h,72cbb15cd878264bce4c1829ec33bace357b0800,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,Chapman Flack,2018-08-26T04:08:45Z,chap@anastigmatix.net,157,117,40,"Let timestamp values roundtrip even when infinite.

The Java classes representing them do not have a notion of
'infinity' or '-infinity' as PostgreSQL does. For now, just
produce instances of the desired classes with the naturally
converted values, which will appear as particular, crazy late
or crazy early, finite timestamps, and just make sure those
specific values convert back in the other direction to PostgreSQL
'infinity' and '-infinity'. Java code could use a query to
generate one of each object and save them, to recognize or use
infinite values later in real data.

The above works as advertised with integer_datetimes (which has
been the default for many PG versions, and is now not even
selectable). With the older, floating-point representation, it
doesn't, and given the combination of obsolescence of the float
representation and rarity of infinite values in practice, is arguably
not worth much effort to improve.

Add some tests with infinite values to the JDBC42_21 example, included
only when integer_datetimes is on.

In passing, update copyright in some files that were touched earlier
without doing that."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,ac64ef673f0f9edb81ba8d4c0dfcf65acd6e7ba6,Chapman Flack,2018-08-25T18:06:54Z,chap@anastigmatix.net,Chapman Flack,2018-08-25T18:06:54Z,chap@anastigmatix.net,229,185,44,"Have StAXResultAdapter implement XMLStreamWriter.

As the TODO comment said: it seems there is a practical difference
between the XMLEventWriter and XMLStreamWriter APIs, as the former
cannot distinguish between self-closed empty elements and the
start-and-end tag form, while the latter can. This should probably
be replaced by a class that implements XMLStreamWriter; that's just
more tedious and longwinded, with so many more methods to implement.

The interesting stuff is more or less done, so no more putting off
the tedious and longwinded."
,pljava-so/src/main/c/type/Timestamp.c,de248df6cfb1e9517bd59bc340c8cf79254baf9c,Chapman Flack,2018-08-25T16:37:44Z,chap@anastigmatix.net,Chapman Flack,2018-08-25T16:37:44Z,chap@anastigmatix.net,42,23,19,"Fix old timestamp coercion for !integer_datetimes.

Testing the new java.time conversions under !integer_datetimes
revealed that they work, but the old existing ones weren't quite
right ... the same issues as in issue #155, but that fix wasn't
tested with !integer_datetimes, so they were overlooked for that case.

In passing, simplify the new _LocalDateTime_coerceDatum. Breaking
the multiplication by 1e6 into a six-bit exponent adjust and
separate 14-bit multiplier was unnecessarily cautious. There are
~ 20 bits we care about to the right of the radix point. All the rest
are available after the whole seconds are subtracted out, and even
multiplying by 1e9 won't need more than 21 of them (9 go straight to
the exponent). To the best of my knowledge, nobody ever made a
double precision format with a significand too narrow for 41 bits."
,pljava-so/src/main/c/type/Oid.c,155f772e33db7e67f06c12e114192164def9e635,Chapman Flack,2018-08-23T23:15:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,36,21,15,"Selectively expose new Types.* for 1.5.1.

Because 1.5.1 is to be a minor release, there is an argument
for not (yet) changing what ResultSetMetaData and friends will return
from getColumnType() for a timetz or timestamptz column, so leave those
to return Types.TIME or Types.TIMESTAMP as they always have. Client code
that cares can use getColumnTypeName() to distinguish time or timestamp
from timetz/timestamptz.

At the same time, there is no need to feign ignorance of
Types.TIME_WITH_TIMEZONE or TIMESTAMP_WITH_TIMEZONE if a client
asks for them, so do add them in the list recognized in Oid.c."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,155f772e33db7e67f06c12e114192164def9e635,Chapman Flack,2018-08-23T23:15:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,36,21,15,"Selectively expose new Types.* for 1.5.1.

Because 1.5.1 is to be a minor release, there is an argument
for not (yet) changing what ResultSetMetaData and friends will return
from getColumnType() for a timetz or timestamptz column, so leave those
to return Types.TIME or Types.TIMESTAMP as they always have. Client code
that cares can use getColumnTypeName() to distinguish time or timestamp
from timetz/timestamptz.

At the same time, there is no need to feign ignorance of
Types.TIME_WITH_TIMEZONE or TIMESTAMP_WITH_TIMEZONE if a client
asks for them, so do add them in the list recognized in Oid.c."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,4494845dddee7d72f967bac3e3401ab0481138f4,Chapman Flack,2018-08-23T03:34:59Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,36,34,2,Add test of java.time class as PreparedStmt param.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,4494845dddee7d72f967bac3e3401ab0481138f4,Chapman Flack,2018-08-23T03:34:59Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,36,34,2,Add test of java.time class as PreparedStmt param.
,pljava-so/src/main/c/ExecutionPlan.c,645cf8e650a81d45fc3cd911f48067ebf1a834dc,Chapman Flack,2018-08-23T22:49:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,177,164,13,"Put TypeBridge in play for SPIPreparedStatement.

In passing, complete the implementation of the 3-argument form of
setNull (where the third argument is a PostgreSQL type name), which is
the only method on a PreparedStatement by which a parameter type can be
set to a specific PostgreSQL type (as opposed to a generic JDBC type
with some default mapping to a PostgreSQL type).

However, the implementation is still limited, in that any subsequent
non-null assignment will reset the PostgreSQL type to the default
mapping, if done through one of the pre-JDBC 4.2 setter methods, or
setObject with one of the pre-JDBC 4.2 accepted object classes. That is
to avoid a material behavior change in a minor release.

By contrast, if setObject is called with an object of one of the
newly-accepted classes (which had no prior behavior to try to match),
any already-assigned PostgreSQL type (as by setNull) will be respected,
and the setObject treated as a coercion to it (which can entail an
exception if no such coercion is available).

That new behavior ought to be the way everything behaves in some future
major release, which should use the PG 9.0 improved SPI to determine
the parameters' PostgreSQL types from what PG's type inference came up
with, and treat all the setter methods as coercions to the determined
types."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,645cf8e650a81d45fc3cd911f48067ebf1a834dc,Chapman Flack,2018-08-23T22:49:57Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,177,164,13,"Put TypeBridge in play for SPIPreparedStatement.

In passing, complete the implementation of the 3-argument form of
setNull (where the third argument is a PostgreSQL type name), which is
the only method on a PreparedStatement by which a parameter type can be
set to a specific PostgreSQL type (as opposed to a generic JDBC type
with some default mapping to a PostgreSQL type).

However, the implementation is still limited, in that any subsequent
non-null assignment will reset the PostgreSQL type to the default
mapping, if done through one of the pre-JDBC 4.2 setter methods, or
setObject with one of the pre-JDBC 4.2 accepted object classes. That is
to avoid a material behavior change in a minor release.

By contrast, if setObject is called with an object of one of the
newly-accepted classes (which had no prior behavior to try to match),
any already-assigned PostgreSQL type (as by setNull) will be respected,
and the setObject treated as a coercion to it (which can entail an
exception if no such coercion is available).

That new behavior ought to be the way everything behaves in some future
major release, which should use the PG 9.0 improved SPI to determine
the parameters' PostgreSQL types from what PG's type inference came up
with, and treat all the setter methods as coercions to the determined
types."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/JDBC42_21.java,e1614d468f23d8eb5f7a389024dd689afbf330b6,Chapman Flack,2018-08-22T23:44:21Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,121,121,0,Add example exercising the java.time types.
,pljava-so/src/main/c/type/Relation.c,65eb163c4a9a320e796181412209ff907c29cbf6,Chapman Flack,2018-08-22T16:29:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,16,10,6,"Put TypeBridge in play.

This adds it to {Relation,TupleDesc}.c, where it is used by
SingleRowWriter, TriggerResultSet, and SQLOutputToTuple.

PreparedStatement will have slightly different requirements,
and is left for later."
,pljava-so/src/main/c/type/TupleDesc.c,65eb163c4a9a320e796181412209ff907c29cbf6,Chapman Flack,2018-08-22T16:29:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,16,10,6,"Put TypeBridge in play.

This adds it to {Relation,TupleDesc}.c, where it is used by
SingleRowWriter, TriggerResultSet, and SQLOutputToTuple.

PreparedStatement will have slightly different requirements,
and is left for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,65eb163c4a9a320e796181412209ff907c29cbf6,Chapman Flack,2018-08-22T16:29:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,16,10,6,"Put TypeBridge in play.

This adds it to {Relation,TupleDesc}.c, where it is used by
SingleRowWriter, TriggerResultSet, and SQLOutputToTuple.

PreparedStatement will have slightly different requirements,
and is left for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,65eb163c4a9a320e796181412209ff907c29cbf6,Chapman Flack,2018-08-22T16:29:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,16,10,6,"Put TypeBridge in play.

This adds it to {Relation,TupleDesc}.c, where it is used by
SingleRowWriter, TriggerResultSet, and SQLOutputToTuple.

PreparedStatement will have slightly different requirements,
and is left for later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,65eb163c4a9a320e796181412209ff907c29cbf6,Chapman Flack,2018-08-22T16:29:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,16,10,6,"Put TypeBridge in play.

This adds it to {Relation,TupleDesc}.c, where it is used by
SingleRowWriter, TriggerResultSet, and SQLOutputToTuple.

PreparedStatement will have slightly different requirements,
and is left for later."
,pljava-so/src/main/c/type/Type.c,b844cae474acafc4226264446d12b31680ade1e2,Chapman Flack,2018-08-22T04:01:56Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,349,348,1,"Introduce TypeBridge.

For now, in the 1.5.x series, this is a simple stopgap so that the few
places in PL/Java where an object type can be passed to PostgreSQL
(SingleRowWriter, TriggerResultSet, SQLOutputToTuple, PreparedStatement)
are able to pass an object that isn't of the class expected by default,
and have the right native conversion get selected. All of those sites
currently work by some variant of putting supplied objects into an
Object array or list later passed to the native code, and when an object
will not be of the expected class, what is stored in the array should be
a TypeBridge.Holder for it.

This may be a temporary class that goes away entirely in a future major
release of PL/Java that revamps how type mappings are determined.  Or,
it may evolve and take on greater responsibility in a revamped scheme:
type mapping information is, at present, diffused and duplicated a lot
of places in PL/Java, and bringing it into one place would not be a bad
thing."
,pljava-so/src/main/include/pljava/type/Type.h,b844cae474acafc4226264446d12b31680ade1e2,Chapman Flack,2018-08-22T04:01:56Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,349,348,1,"Introduce TypeBridge.

For now, in the 1.5.x series, this is a simple stopgap so that the few
places in PL/Java where an object type can be passed to PostgreSQL
(SingleRowWriter, TriggerResultSet, SQLOutputToTuple, PreparedStatement)
are able to pass an object that isn't of the class expected by default,
and have the right native conversion get selected. All of those sites
currently work by some variant of putting supplied objects into an
Object array or list later passed to the native code, and when an object
will not be of the expected class, what is stored in the array should be
a TypeBridge.Holder for it.

This may be a temporary class that goes away entirely in a future major
release of PL/Java that revamps how type mappings are determined.  Or,
it may evolve and take on greater responsibility in a revamped scheme:
type mapping information is, at present, diffused and duplicated a lot
of places in PL/Java, and bringing it into one place would not be a bad
thing."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeBridge.java,b844cae474acafc4226264446d12b31680ade1e2,Chapman Flack,2018-08-22T04:01:56Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:55:40Z,chap@anastigmatix.net,349,348,1,"Introduce TypeBridge.

For now, in the 1.5.x series, this is a simple stopgap so that the few
places in PL/Java where an object type can be passed to PostgreSQL
(SingleRowWriter, TriggerResultSet, SQLOutputToTuple, PreparedStatement)
are able to pass an object that isn't of the class expected by default,
and have the right native conversion get selected. All of those sites
currently work by some variant of putting supplied objects into an
Object array or list later passed to the native code, and when an object
will not be of the expected class, what is stored in the array should be
a TypeBridge.Holder for it.

This may be a temporary class that goes away entirely in a future major
release of PL/Java that revamps how type mappings are determined.  Or,
it may evolve and take on greater responsibility in a revamped scheme:
type mapping information is, at present, diffused and duplicated a lot
of places in PL/Java, and bringing it into one place would not be a bad
thing."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,64ebb93e3a130e6663f7022d42f835d0b72ce0a1,Chapman Flack,2018-08-24T03:16:33Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:31:20Z,chap@anastigmatix.net,4,2,2,Object getters by Class must survive null values.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,64ebb93e3a130e6663f7022d42f835d0b72ce0a1,Chapman Flack,2018-08-24T03:16:33Z,chap@anastigmatix.net,Chapman Flack,2018-08-24T03:31:20Z,chap@anastigmatix.net,4,2,2,Object getters by Class must survive null values.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,38a25b4f4f0bec0b152dc6a4c460c39ec8d622a0,Chapman Flack,2018-08-20T04:38:41Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,2,2,0,"Include return types in most DDR method signatures

The 'AS' syntax for PL/Java function declarations already accepts
explicit return types as well as the parameter types, but the DDR
generator has not been emitting them. That means the magic doesn't
happen when, say, you have a Java method returning one of the JSR 310
date/time types instead of the expected ones from java.sql. For PL/Java
to notice the automatic coercion needed there, it has to see that
the Java return type is not the one that naturally corresponds to
the SQL type ... so the Java return type needs to be included
in the signature.

Avoid, however, including the return type in the case of trigger
functions, or those that return sets or composite types. Those
already get special treatment in the function parsing code, and
the explicit return types would get in the way."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,b43d1f67e3d77369d4a8c34a96f2f2a582335841,Chapman Flack,2018-08-20T04:10:44Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,22,22,0,Recognize JDBC 4.2/JSR 310 types in DDR generator.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,45ae03b7cebc3ed7ab4499430d7bf3ff11efaca0,Chapman Flack,2018-08-20T05:09:35Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,70,48,22,"Let ResultSetMetaData return JDBC4.2 Types.*ZONE.

Works, but may have to be excluded from 1.5.x as it would be
a behavior change without an opt-in."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,daf4ac3e8514dc2b43f0843d44adce8fcbe1a5a2,Chapman Flack,2018-08-20T05:09:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,10,5,5,Fix very outdated field name.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,daf4ac3e8514dc2b43f0843d44adce8fcbe1a5a2,Chapman Flack,2018-08-20T05:09:17Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,10,5,5,Fix very outdated field name.
,pljava-so/src/main/c/type/Timestamp.c,2809a7daf5cbe76cf244732f3d02c947026b63d9,Chapman Flack,2018-08-20T01:22:47Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,100,77,23,"Likewise for java.time.OffsetDateTime.

Those are the java.time classes to be supported in JDBC 4.2
for the PG -> Java direction."
,pljava-so/src/main/c/type/Timestamp.c,4b48ef5a584d9980d77910d1c01201a58eaf9733,Chapman Flack,2018-08-20T05:56:05Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,175,169,6,Likewise for java.time.LocalDateTime.
,pljava-so/src/main/c/type/Time.c,649739a8b7d3eb0b9a65a8971841c87a4e010aa9,Chapman Flack,2018-08-19T21:52:48Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,127,123,4,Likewise for java.time.OffsetTime
,pljava-so/src/main/c/type/Time.c,3256ac055f1565adbec2dc2929c87e4a1d7569b7,Chapman Flack,2018-08-20T05:44:00Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:57Z,chap@anastigmatix.net,96,93,3,Likewise for java.time.LocalTime
,pljava-so/src/main/c/type/Date.c,c85a2d95af8b9437e1349bd4f5bcc5e69afed7a4,Chapman Flack,2018-08-19T17:22:31Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:56Z,chap@anastigmatix.net,72,72,0,"Implement date -> java.time.LocalDate

The <- direction for later."
,pljava-so/src/main/c/SQLInputFromTuple.c,2d51cd84cae7ba17385d5b331a30338f83ecd0d0,Chapman Flack,2018-08-19T14:36:18Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:56Z,chap@anastigmatix.net,202,173,29,Implement JDBC 4.2 SQLInput.getObject.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,2d51cd84cae7ba17385d5b331a30338f83ecd0d0,Chapman Flack,2018-08-19T14:36:18Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:56Z,chap@anastigmatix.net,202,173,29,Implement JDBC 4.2 SQLInput.getObject.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,ee754148b90283a4c3c20786964f990f395bcb9f,Chapman Flack,2018-08-20T07:10:50Z,chap@anastigmatix.net,Chapman Flack,2018-08-20T07:10:50Z,chap@anastigmatix.net,28,24,4,Allow TypeRoundTripper to test JDBC 4.1 getObject.
,pljava-so/src/main/c/SQLInputFromTuple.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/c/type/Composite.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/c/type/HeapTupleHeader.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/c/type/Tuple.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/c/type/TupleDesc.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/c/type/Type.c,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/include/pljava/type/Tuple.h,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava-so/src/main/include/pljava/type/Type.h,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,6ff7c37d14347649656a861c4171d0b468d012c4,Chapman Flack,2018-08-19T03:28:01Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,304,208,96,"Implement JDBC 4.1 ResultSet.getObject.

This is the version that takes a Class to determine the class of result
to return. To preserve back-compatibility for now, the underlying
implementation method is not constrained to return an object of the
requested class, and accepts null for that argument, and all the
pre-existing methods call it that way, to get the previous behavior.

Per a comment in Type.h, it's always been the idea that TypeObtainer
methods return singletons (or return from a small number of allocated
instances, if there need to be instances with a few different typeIds).
That doesn't seem to have been followed always, but it grows in
importance with this change; certainly any new TypeClass that is added
and expected to be used in a JDBC 4.1/4.2ish way should be careful not
to allocate a new Type instance every time it gets mentioned."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,79b86c25c43b90ac27034caef42d78c171580563,Chapman Flack,2018-08-15T02:18:08Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,90,75,15,"Javadoc, Overrides, SingleRowResultSet/subclasses."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,79b86c25c43b90ac27034caef42d78c171580563,Chapman Flack,2018-08-15T02:18:08Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,90,75,15,"Javadoc, Overrides, SingleRowResultSet/subclasses."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,79b86c25c43b90ac27034caef42d78c171580563,Chapman Flack,2018-08-15T02:18:08Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,90,75,15,"Javadoc, Overrides, SingleRowResultSet/subclasses."
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,79b86c25c43b90ac27034caef42d78c171580563,Chapman Flack,2018-08-15T02:18:08Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:35Z,chap@anastigmatix.net,90,75,15,"Javadoc, Overrides, SingleRowResultSet/subclasses."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,25811f7b37727a18c578a8909ed246e9767b9a72,Chapman Flack,2018-08-19T14:40:30Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:00Z,chap@anastigmatix.net,135,117,18,"Javadoc, Override, ResultSetBase/subclasses.

Fix: an earlier commit incorrectly altered the copyright dates."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,25811f7b37727a18c578a8909ed246e9767b9a72,Chapman Flack,2018-08-19T14:40:30Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:00Z,chap@anastigmatix.net,135,117,18,"Javadoc, Override, ResultSetBase/subclasses.

Fix: an earlier commit incorrectly altered the copyright dates."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,25811f7b37727a18c578a8909ed246e9767b9a72,Chapman Flack,2018-08-19T14:40:30Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T19:01:00Z,chap@anastigmatix.net,135,117,18,"Javadoc, Override, ResultSetBase/subclasses.

Fix: an earlier commit incorrectly altered the copyright dates."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,1ebd53666e2f868fe29b5efd98c16fd408377bed,Chapman Flack,2018-08-19T14:39:59Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:49:46Z,chap@anastigmatix.net,27,22,5,"Javadoc, Override, ReadOnlyResultSet"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,a2d7cc28f044c1f63bb36e21f827734608c8544c,Chapman Flack,2018-08-19T14:49:56Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:49:46Z,chap@anastigmatix.net,307,279,28,"Javadoc, Overrides in ObjectResultSet."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,0707b899b0d1b97606bbfa113877fa92192f3ed4,Chapman Flack,2018-08-13T01:00:34Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:49:46Z,chap@anastigmatix.net,203,169,34,"Override annotations in AbstractResultSet.

Just to make it easier to see what's what.

With a small amount of reordering."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava-so/src/main/c/Invocation.c,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava-so/src/main/c/type/Portal.c,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,0b3ee8f6ffb7709dc6e6d1b8dd7eb8748597d672,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-19T18:42:32Z,chap@anastigmatix.net,183,150,33,"Merge pull request #169 from bug/REL1_5_STABLE/issue168

Addresses issue #168 (in case github's robot doesn't see that
in the title)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava-so/src/main/c/Invocation.c,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava-so/src/main/c/type/Portal.c,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,be5e9db556790cefb57d4b76de90a8a8ebe3524c,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T18:21:22Z,chap@anastigmatix.net,93,58,35,"Ensure SPI is connected to use Portal SPI methods.

Using a ResultSet after return of the PL/Java function that created it,
during the same open transaction (consistent with the claimed holdability
of CLOSE_CURSORS_AT_COMMIT) now works. Update various documentation
comments saying it didn't.

Also fix a couple wrong return values in SPIDatabaseMetaData concerning
holdability, and, in passing, a wrong error message in
Invocation_assertConnect. Add a deployment-time test in the Holdability
example."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Holdability.java,1a23379c3db6c4958cfe28f9afad71928bf1c049,Chapman Flack,2018-08-18T16:41:42Z,chap@anastigmatix.net,Chapman Flack,2018-08-18T16:41:42Z,chap@anastigmatix.net,94,94,0,"Test for when cursor/portal gets closed.

The _pljavaPortalCleanup callback actually doesn't get called until
end of transaction. But SPI_finish gets called at routine exit, which
is enough to make later use of the portal fail, if SPI_connect isn't
called first."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,ec721fff9b124eeef2fe92337bc9e206b100521a,Chapman Flack,2018-08-12T23:23:56Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T23:23:56Z,chap@anastigmatix.net,10,10,0,"PassXML example with Java param/return type String.

Example to confirm that existing code using String as the Java
method parameter and return types for PG XML continues to work
as expected."
,pljava-so/src/main/c/VarlenaWrapper.c,cfe42fc52cc31f8e230276e9535589299a44b376,Chapman Flack,2018-08-12T02:43:52Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T18:24:39Z,chap@anastigmatix.net,83,73,10,"Lazy detoast for 9.5 ... 8.2.

Before 9.6, there was no GetOldestSnapshot(). There may have been some
more roundabout way to dig up a suitable snapshot to protect the toast
rows, but instead, just give up on parking toast pointers and park the
fetched-but-not-uncompressed contents instead. With XML that can still
be an easy factor of 20 or so smaller.

In theory, pre-8.4, it might be possible to park toast pointers again,
because back then they were safe from vacuuming as long as the overall
transaction remains open. But for versions that old, who has the time?"
,pljava-so/src/main/c/DualState.c,1a5caf1ced2ac53da7117292b5971c115b2e0264,Chapman Flack,2018-08-12T15:45:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T18:24:17Z,chap@anastigmatix.net,335,311,24,"Lazy detoast, working in PG 11beta3, 10, 9.6.

Introduce lazy detoasting, where if the value underlying a readable
SQLXML instance is found not to be fully detoasted at the time of
construction, it's allowed to stay that way until the contents are
actually needed, as discussed in

https://www.postgresql.org/message-id/1c64290b-b729-eeab-219e-1577a12e9b5a%40anastigmatix.net

(and above and below in the same message thread), implementing the
""just use the oldest one"" snapshot selection strategy from

https://www.postgresql.org/message-id/8ca78589-734b-f904-1cc5-007eeb5d4737%40anastigmatix.net

The implementation passes the following test inspired by Andrew Gierth in
https://www.postgresql.org/message-id/877eovbjc3.fsf%40news-spur.riddles.org.uk

CREATE TABLE t(x xml);
BEGIN READ WRITE, ISOLATION LEVEL READ COMMITTED;
/*
 * In other session: INSERT INTO t(x)
 * SELECT table_to_xml('pg_operator', true, false, '');
 */
SELECT javatest.echoxmlparameter(x, 0, 5) FROM t; -- 0 => stash x
/*
 * In other session: DELETE FROM t;
 * VACUUM t;
 */
SELECT javatest.echoxmlparameter(null, 5, 5); -- null => unstash
COMMIT;

And, indeed, the same test is made to fail by commenting out the
snapshot registrations/unregistrations in VarlenaWrapper.c, so
they are performing the expected valuable service. Without them:
ERROR:  missing chunk number 0 for toast value 16716 in pg_toast_16708"
,pljava-so/src/main/c/VarlenaWrapper.c,1a5caf1ced2ac53da7117292b5971c115b2e0264,Chapman Flack,2018-08-12T15:45:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T18:24:17Z,chap@anastigmatix.net,335,311,24,"Lazy detoast, working in PG 11beta3, 10, 9.6.

Introduce lazy detoasting, where if the value underlying a readable
SQLXML instance is found not to be fully detoasted at the time of
construction, it's allowed to stay that way until the contents are
actually needed, as discussed in

https://www.postgresql.org/message-id/1c64290b-b729-eeab-219e-1577a12e9b5a%40anastigmatix.net

(and above and below in the same message thread), implementing the
""just use the oldest one"" snapshot selection strategy from

https://www.postgresql.org/message-id/8ca78589-734b-f904-1cc5-007eeb5d4737%40anastigmatix.net

The implementation passes the following test inspired by Andrew Gierth in
https://www.postgresql.org/message-id/877eovbjc3.fsf%40news-spur.riddles.org.uk

CREATE TABLE t(x xml);
BEGIN READ WRITE, ISOLATION LEVEL READ COMMITTED;
/*
 * In other session: INSERT INTO t(x)
 * SELECT table_to_xml('pg_operator', true, false, '');
 */
SELECT javatest.echoxmlparameter(x, 0, 5) FROM t; -- 0 => stash x
/*
 * In other session: DELETE FROM t;
 * VACUUM t;
 */
SELECT javatest.echoxmlparameter(null, 5, 5); -- null => unstash
COMMIT;

And, indeed, the same test is made to fail by commenting out the
snapshot registrations/unregistrations in VarlenaWrapper.c, so
they are performing the expected valuable service. Without them:
ERROR:  missing chunk number 0 for toast value 16716 in pg_toast_16708"
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,1a5caf1ced2ac53da7117292b5971c115b2e0264,Chapman Flack,2018-08-12T15:45:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T18:24:17Z,chap@anastigmatix.net,335,311,24,"Lazy detoast, working in PG 11beta3, 10, 9.6.

Introduce lazy detoasting, where if the value underlying a readable
SQLXML instance is found not to be fully detoasted at the time of
construction, it's allowed to stay that way until the contents are
actually needed, as discussed in

https://www.postgresql.org/message-id/1c64290b-b729-eeab-219e-1577a12e9b5a%40anastigmatix.net

(and above and below in the same message thread), implementing the
""just use the oldest one"" snapshot selection strategy from

https://www.postgresql.org/message-id/8ca78589-734b-f904-1cc5-007eeb5d4737%40anastigmatix.net

The implementation passes the following test inspired by Andrew Gierth in
https://www.postgresql.org/message-id/877eovbjc3.fsf%40news-spur.riddles.org.uk

CREATE TABLE t(x xml);
BEGIN READ WRITE, ISOLATION LEVEL READ COMMITTED;
/*
 * In other session: INSERT INTO t(x)
 * SELECT table_to_xml('pg_operator', true, false, '');
 */
SELECT javatest.echoxmlparameter(x, 0, 5) FROM t; -- 0 => stash x
/*
 * In other session: DELETE FROM t;
 * VACUUM t;
 */
SELECT javatest.echoxmlparameter(null, 5, 5); -- null => unstash
COMMIT;

And, indeed, the same test is made to fail by commenting out the
snapshot registrations/unregistrations in VarlenaWrapper.c, so
they are performing the expected valuable service. Without them:
ERROR:  missing chunk number 0 for toast value 16716 in pg_toast_16708"
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,1a5caf1ced2ac53da7117292b5971c115b2e0264,Chapman Flack,2018-08-12T15:45:32Z,chap@anastigmatix.net,Chapman Flack,2018-08-12T18:24:17Z,chap@anastigmatix.net,335,311,24,"Lazy detoast, working in PG 11beta3, 10, 9.6.

Introduce lazy detoasting, where if the value underlying a readable
SQLXML instance is found not to be fully detoasted at the time of
construction, it's allowed to stay that way until the contents are
actually needed, as discussed in

https://www.postgresql.org/message-id/1c64290b-b729-eeab-219e-1577a12e9b5a%40anastigmatix.net

(and above and below in the same message thread), implementing the
""just use the oldest one"" snapshot selection strategy from

https://www.postgresql.org/message-id/8ca78589-734b-f904-1cc5-007eeb5d4737%40anastigmatix.net

The implementation passes the following test inspired by Andrew Gierth in
https://www.postgresql.org/message-id/877eovbjc3.fsf%40news-spur.riddles.org.uk

CREATE TABLE t(x xml);
BEGIN READ WRITE, ISOLATION LEVEL READ COMMITTED;
/*
 * In other session: INSERT INTO t(x)
 * SELECT table_to_xml('pg_operator', true, false, '');
 */
SELECT javatest.echoxmlparameter(x, 0, 5) FROM t; -- 0 => stash x
/*
 * In other session: DELETE FROM t;
 * VACUUM t;
 */
SELECT javatest.echoxmlparameter(null, 5, 5); -- null => unstash
COMMIT;

And, indeed, the same test is made to fail by commenting out the
snapshot registrations/unregistrations in VarlenaWrapper.c, so
they are performing the expected valuable service. Without them:
ERROR:  missing chunk number 0 for toast value 16716 in pg_toast_16708"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,e7f4dcaea536bf7b0cdc17c2afd7705338ba9047,Chapman Flack,2018-08-09T00:46:02Z,chap@anastigmatix.net,Chapman Flack,2018-08-09T00:46:02Z,chap@anastigmatix.net,8,4,4,"Belonged with commit fcde4f4.

That commit fixed several regexps that used non-possessive quantifiers
in places where backtracking would provably not be useful. But it
missed these."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,6851f98146342323812519cca42556bcc9f619e4,Chapman Flack,2018-08-08T22:44:31Z,chap@anastigmatix.net,Chapman Flack,2018-08-08T22:44:31Z,chap@anastigmatix.net,7,2,5,"Changes belonging with issue #157 fix.

These two uses of @SQLType were old workarounds of the same issue
reported and fixed as #157, so are no longer needed."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,925cec2d812c26ef9e0e0da2208457b5f2f182ed,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,242,209,33,"Avoid 'bouncing' SQLXML unchecked between types.

Commit a73abee made it possible to take a readable SQLXML, as might
come in as a function parameter, and use it directly as you could a
writable one, returning it from the function or stuffing it into a
query parameter.

Commit f152658 made it possible to use this API even in PostgreSQL
instances that were not built with the XML type, by allowing a
function declaration to explicitly type an SQLXML parameter or return
type as 'text'.

In combination, those two features could undermine type safety: a
function like:

  @Function
  public static SQLXML badcast(@SQLType(""text"") SQLXML sx)
  {
    return sx;
  }

could serve as an ""unchecked cast"" returning non-XML text content
as a PostgreSQL XML type.

Solution: remember the PostgreSQL type Oid of the source when creating
a readable SQLXML instance. If it is later used directly in the Java->PG
direction, and the target PG Oid is different, run the verifier over the
content first.

That is, of course, slower than not doing it, but interestingly, the
speed of the Java XML parser compares respectably to a direct PG
CAST (text AS xml). I am seeing it pull ahead of the PG cast right
around 32 kB of serialized XML, ultimately beating PG by a factor of
two or better at 1 or 2 MB sizes. PG, of course, wins hands down on
tiny values, where the invocation overhead predominates."
,pljava-so/src/main/c/type/Oid.c,925cec2d812c26ef9e0e0da2208457b5f2f182ed,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,242,209,33,"Avoid 'bouncing' SQLXML unchecked between types.

Commit a73abee made it possible to take a readable SQLXML, as might
come in as a function parameter, and use it directly as you could a
writable one, returning it from the function or stuffing it into a
query parameter.

Commit f152658 made it possible to use this API even in PostgreSQL
instances that were not built with the XML type, by allowing a
function declaration to explicitly type an SQLXML parameter or return
type as 'text'.

In combination, those two features could undermine type safety: a
function like:

  @Function
  public static SQLXML badcast(@SQLType(""text"") SQLXML sx)
  {
    return sx;
  }

could serve as an ""unchecked cast"" returning non-XML text content
as a PostgreSQL XML type.

Solution: remember the PostgreSQL type Oid of the source when creating
a readable SQLXML instance. If it is later used directly in the Java->PG
direction, and the target PG Oid is different, run the verifier over the
content first.

That is, of course, slower than not doing it, but interestingly, the
speed of the Java XML parser compares respectably to a direct PG
CAST (text AS xml). I am seeing it pull ahead of the PG cast right
around 32 kB of serialized XML, ultimately beating PG by a factor of
two or better at 1 or 2 MB sizes. PG, of course, wins hands down on
tiny values, where the invocation overhead predominates."
,pljava-so/src/main/c/type/SQLXMLImpl.c,925cec2d812c26ef9e0e0da2208457b5f2f182ed,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,242,209,33,"Avoid 'bouncing' SQLXML unchecked between types.

Commit a73abee made it possible to take a readable SQLXML, as might
come in as a function parameter, and use it directly as you could a
writable one, returning it from the function or stuffing it into a
query parameter.

Commit f152658 made it possible to use this API even in PostgreSQL
instances that were not built with the XML type, by allowing a
function declaration to explicitly type an SQLXML parameter or return
type as 'text'.

In combination, those two features could undermine type safety: a
function like:

  @Function
  public static SQLXML badcast(@SQLType(""text"") SQLXML sx)
  {
    return sx;
  }

could serve as an ""unchecked cast"" returning non-XML text content
as a PostgreSQL XML type.

Solution: remember the PostgreSQL type Oid of the source when creating
a readable SQLXML instance. If it is later used directly in the Java->PG
direction, and the target PG Oid is different, run the verifier over the
content first.

That is, of course, slower than not doing it, but interestingly, the
speed of the Java XML parser compares respectably to a direct PG
CAST (text AS xml). I am seeing it pull ahead of the PG cast right
around 32 kB of serialized XML, ultimately beating PG by a factor of
two or better at 1 or 2 MB sizes. PG, of course, wins hands down on
tiny values, where the invocation overhead predominates."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,925cec2d812c26ef9e0e0da2208457b5f2f182ed,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,242,209,33,"Avoid 'bouncing' SQLXML unchecked between types.

Commit a73abee made it possible to take a readable SQLXML, as might
come in as a function parameter, and use it directly as you could a
writable one, returning it from the function or stuffing it into a
query parameter.

Commit f152658 made it possible to use this API even in PostgreSQL
instances that were not built with the XML type, by allowing a
function declaration to explicitly type an SQLXML parameter or return
type as 'text'.

In combination, those two features could undermine type safety: a
function like:

  @Function
  public static SQLXML badcast(@SQLType(""text"") SQLXML sx)
  {
    return sx;
  }

could serve as an ""unchecked cast"" returning non-XML text content
as a PostgreSQL XML type.

Solution: remember the PostgreSQL type Oid of the source when creating
a readable SQLXML instance. If it is later used directly in the Java->PG
direction, and the target PG Oid is different, run the verifier over the
content first.

That is, of course, slower than not doing it, but interestingly, the
speed of the Java XML parser compares respectably to a direct PG
CAST (text AS xml). I am seeing it pull ahead of the PG cast right
around 32 kB of serialized XML, ultimately beating PG by a factor of
two or better at 1 or 2 MB sizes. PG, of course, wins hands down on
tiny values, where the invocation overhead predominates."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,925cec2d812c26ef9e0e0da2208457b5f2f182ed,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,Chapman Flack,2018-08-07T13:02:49Z,chap@anastigmatix.net,242,209,33,"Avoid 'bouncing' SQLXML unchecked between types.

Commit a73abee made it possible to take a readable SQLXML, as might
come in as a function parameter, and use it directly as you could a
writable one, returning it from the function or stuffing it into a
query parameter.

Commit f152658 made it possible to use this API even in PostgreSQL
instances that were not built with the XML type, by allowing a
function declaration to explicitly type an SQLXML parameter or return
type as 'text'.

In combination, those two features could undermine type safety: a
function like:

  @Function
  public static SQLXML badcast(@SQLType(""text"") SQLXML sx)
  {
    return sx;
  }

could serve as an ""unchecked cast"" returning non-XML text content
as a PostgreSQL XML type.

Solution: remember the PostgreSQL type Oid of the source when creating
a readable SQLXML instance. If it is later used directly in the Java->PG
direction, and the target PG Oid is different, run the verifier over the
content first.

That is, of course, slower than not doing it, but interestingly, the
speed of the Java XML parser compares respectably to a direct PG
CAST (text AS xml). I am seeing it pull ahead of the PG cast right
around 32 kB of serialized XML, ultimately beating PG by a factor of
two or better at 1 or 2 MB sizes. PG, of course, wins hands down on
tiny values, where the invocation overhead predominates."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,5716b0a0209cb2f698cda97fa39aa8a340ac80da,Chapman Flack,2018-08-06T06:21:03Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,80,73,7,"Two more methods in the PassXML example.

1. a text-typed variant of lowLevelXMLEcho, which does not depend on
   PostgreSQL's XML type, and so can be used in PG builds without
   libxml, and also is useful for testing the behavior of an output
   verifier with input that wouldn't get past PostgreSQL's XML input.

2. a method to create SQLXML instances and leave them unused, unfreed,
   and unreferenced, the better to examine the cleanup behavior.

Also add an SQLAction that runs a largish sample of XML--specifically,
the result of table_to_xml('pg_operator', ...)--through echoXMLParameter
using (almost) every combination of reading and writing protocols
offered by SQLXML. Currently does not test reading as StAX(6) and writing
as DOM(7), because that combination seems to make the JRE-supplied
Transformer mess up, at least for me and Java 8."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c0fe9f7e11927fbc0ecdf02669b478833262823b,Chapman Flack,2018-08-06T04:28:20Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,475,265,210,"Add a Verifier for SQLXMLImpl.Writable.

Because the stored form in PostgreSQL of the XML data type is just its
character serialization, of all the methods offered by java.sql.SQLXML
for reading/writing the content, the ones based on strings, character
streams, and byte streams are the quickest ones to get working in a lazy
sort of way.

But the lazy way isn't appropriate for production, at least for the
writing methods, because type safety precludes letting client code write
arbitrary bytes into a varlena that PostgreSQL believes to be of XML
type. So the quick, lazy methods ultimately become the ones that need
the complexity of a Verifier making sure what is written is XML.

The other writing methods, where the serialization is done via Java XML
APIs, are left with the NoOp verifier, trusting the APIs to produce XML."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,f4b87bede67f63602ea666763deeb840c7a11154,Chapman Flack,2018-08-06T04:57:40Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,505,490,15,"Add VarlenaWrapper.Verifier.

A Verifier can be set on a VarlenaWrapper.Output to read along as bytes
are written to the varlena, and throw an exception if they do not make a
well-formed representation of the expected type. This is not necessary
if the PL/Java code for a given type retains complete control over what
is written to the varlena, but is, if an API requires exposing the
VarlenaWrapper.Output more or less directly to client code that could
write arbitrary content on it.

The code that implements a specific data type over varlena can create a
subclass of Verifier.Base, whose verify(InputStream) method simply reads
the whole stream and returns successfully if nothing is wrong, otherwise
throws an exception. VarlenaWrapper.Output will take care of submitting
that verify method to a thread pool, feeding it buffers of written data
as they are filled, and collecting its success or exception status when
the stream is closed (or canceling the task when appropriate)."
,pljava/src/main/java/org/postgresql/pljava/internal/ByteBufferInputStream.java,8e79cc3e55d1755dde20589243e38df25b2dfe5d,Chapman Flack,2018-08-06T05:10:40Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,325,207,118,"Re{factor|package} M.S.I.Stream and VarlenaWrapper

There is nothing very JDBC-specific about MarkableSequenceInputStream,
so move it from o.p.p.jdbc to o.p.p.internal. VarlenaWrapper.Input is
mostly made up of what could be a more general ByteBufferInputStream,
so factor that out into its own class."
,pljava/src/main/java/org/postgresql/pljava/internal/MarkableSequenceInputStream.java,8e79cc3e55d1755dde20589243e38df25b2dfe5d,Chapman Flack,2018-08-06T05:10:40Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,325,207,118,"Re{factor|package} M.S.I.Stream and VarlenaWrapper

There is nothing very JDBC-specific about MarkableSequenceInputStream,
so move it from o.p.p.jdbc to o.p.p.internal. VarlenaWrapper.Input is
mostly made up of what could be a more general ByteBufferInputStream,
so factor that out into its own class."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,8e79cc3e55d1755dde20589243e38df25b2dfe5d,Chapman Flack,2018-08-06T05:10:40Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,325,207,118,"Re{factor|package} M.S.I.Stream and VarlenaWrapper

There is nothing very JDBC-specific about MarkableSequenceInputStream,
so move it from o.p.p.jdbc to o.p.p.internal. VarlenaWrapper.Input is
mostly made up of what could be a more general ByteBufferInputStream,
so factor that out into its own class."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,8e79cc3e55d1755dde20589243e38df25b2dfe5d,Chapman Flack,2018-08-06T05:10:40Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,325,207,118,"Re{factor|package} M.S.I.Stream and VarlenaWrapper

There is nothing very JDBC-specific about MarkableSequenceInputStream,
so move it from o.p.p.jdbc to o.p.p.internal. VarlenaWrapper.Input is
mostly made up of what could be a more general ByteBufferInputStream,
so factor that out into its own class."
,pljava/src/main/java/org/postgresql/pljava/jdbc/MarkableSequenceInputStream.java,3377c2dd544e942e50d64588590b5a217aa761f5,Chapman Flack,2018-08-06T05:09:22Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:20Z,chap@anastigmatix.net,325,270,55,"Let MarkableSequenceInputStream draw from a queue.

Change the internal form of the sequence of constituent streams from an
array to a ListIterator backed by a LinkedList, and add a constructor
that accepts a BlockingQueue of constituent streams. If these
constituent streams are markable/resettable, the combined stream
still is also.

This can then serve as an efficient markable input stream for reading
along concurrently with content generated in a series of buffers that
are just handed over here as they are filled."
,pljava-so/src/main/c/type/Portal.c,7d152374cf27f85bb0437d41b33f5e66193a4588,Chapman Flack,2018-08-02T02:51:16Z,chap@anastigmatix.net,Chapman Flack,2018-08-06T16:47:08Z,chap@anastigmatix.net,13,12,1,"Plant a DualState_cleanEnqueuedInstances call.

Where to plant such calls may involve some arbitrary and strategic
choices, but the one currently planted in Invocation_popInvocation
is surely not enough in the case a PL/Java function loops through
a lot of data, possibly creating and discarding DualState objects,
without returning to PostgreSQL.

This seems a good place to plant another. It is not called for every
row processed, but for every fetchSize rows, defaulting (in
SPIStatement) to 1000. Perhaps that might still be too seldom for
code that churns a lot of DualState objects. But it's fairly certain
not to be too often and impose an onerous overhead."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,af22f60ef6f7b8b40a85d597cbe078d0b1369942,Chapman Flack,2018-07-30T03:35:35Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,242,202,40,"Javadoc 8 nits, and other tidying.

Flesh out the existing toString methods to produce more useful
information for debugging."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,af22f60ef6f7b8b40a85d597cbe078d0b1369942,Chapman Flack,2018-07-30T03:35:35Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,242,202,40,"Javadoc 8 nits, and other tidying.

Flesh out the existing toString methods to produce more useful
information for debugging."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,af22f60ef6f7b8b40a85d597cbe078d0b1369942,Chapman Flack,2018-07-30T03:35:35Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,242,202,40,"Javadoc 8 nits, and other tidying.

Flesh out the existing toString methods to produce more useful
information for debugging."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,af22f60ef6f7b8b40a85d597cbe078d0b1369942,Chapman Flack,2018-07-30T03:35:35Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,242,202,40,"Javadoc 8 nits, and other tidying.

Flesh out the existing toString methods to produce more useful
information for debugging."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,3632b76457659dd8bdb7ca8d70d7b7132e8a63da,Chapman Flack,2018-07-30T06:03:26Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,29,29,0,"Include return types in most DDR method signatures

The 'AS' syntax for PL/Java function declarations already accepts
explicit return types as well as the parameter types, but the DDR
generator has not been emitting them. That means the magic doesn't
happen when, say, you have a Java method returning SQLXML but give
it type=""text"" in the @Function annotation. For PL/Java to notice
the automatic coercion needed there, it has to see that the Java
return type is not the one that naturally corresponds to the SQL
type ... so the Java return type needs to be included in the
signature.

Avoid, however, including the return type in the case of trigger
functions, or those that return sets or composite types. Those
already get special treatment in the function parsing code, and
the explicit return types would get in the way."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,3632b76457659dd8bdb7ca8d70d7b7132e8a63da,Chapman Flack,2018-07-30T06:03:26Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,29,29,0,"Include return types in most DDR method signatures

The 'AS' syntax for PL/Java function declarations already accepts
explicit return types as well as the parameter types, but the DDR
generator has not been emitting them. That means the magic doesn't
happen when, say, you have a Java method returning SQLXML but give
it type=""text"" in the @Function annotation. For PL/Java to notice
the automatic coercion needed there, it has to see that the Java
return type is not the one that naturally corresponds to the SQL
type ... so the Java return type needs to be included in the
signature.

Avoid, however, including the return type in the case of trigger
functions, or those that return sets or composite types. Those
already get special treatment in the function parsing code, and
the explicit return types would get in the way."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,f1526584c5fd8a7d74917995024263b7084e23a7,Chapman Flack,2018-07-27T02:56:36Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,55,48,7,"Let PL/Java build where PG lacks XML type.

In Java, SQLXML will still be available, and can even be used as
function parameter and return types, as long as these are mapped
in the function declaration to the PostgreSQL type text, as the
type xml will not be present)."
,pljava-so/src/main/c/type/Oid.c,f1526584c5fd8a7d74917995024263b7084e23a7,Chapman Flack,2018-07-27T02:56:36Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,55,48,7,"Let PL/Java build where PG lacks XML type.

In Java, SQLXML will still be available, and can even be used as
function parameter and return types, as long as these are mapped
in the function declaration to the PostgreSQL type text, as the
type xml will not be present)."
,pljava-so/src/main/c/type/SQLXMLImpl.c,f1526584c5fd8a7d74917995024263b7084e23a7,Chapman Flack,2018-07-27T02:56:36Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,55,48,7,"Let PL/Java build where PG lacks XML type.

In Java, SQLXML will still be available, and can even be used as
function parameter and return types, as long as these are mapped
in the function declaration to the PostgreSQL type text, as the
type xml will not be present)."
,pljava-so/src/main/c/VarlenaWrapper.c,2e11fc415ea8a17a008bddd4161d61fedeade140,Chapman Flack,2018-07-25T02:43:40Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,86,85,1,"Back-compat: let tweaks for old PG versions begin.

Before PG 9.5, ""expanded"" TOASTed forms were not a thing.
Before 9.2, there was no MemoryContextSetParent, and before 8.3,
no VARSIZE_ANY_EXHDR or SET_VARSIZE."
,pljava-so/src/main/c/type/SQLXMLImpl.c,2e11fc415ea8a17a008bddd4161d61fedeade140,Chapman Flack,2018-07-25T02:43:40Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:02:09Z,chap@anastigmatix.net,86,85,1,"Back-compat: let tweaks for old PG versions begin.

Before PG 9.5, ""expanded"" TOASTed forms were not a thing.
Before 9.2, there was no MemoryContextSetParent, and before 8.3,
no VARSIZE_ANY_EXHDR or SET_VARSIZE."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/Backend.c,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/InstallHelper.c,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/type/JavaWrapper.c,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/type/Timestamp.c,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/type/Type.c,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/include/pljava/InstallHelper.h,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/include/pljava/pljava.h,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,792e509eda75c257fbc86433816b0ed557ef0477,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-31T03:00:09Z,chap@anastigmatix.net,1429,992,437,Merge REL1_5_STABLE into trackjdbc/REL1_5_STABLE/SQLXML
,pljava-so/src/main/c/Backend.c,e23b98b63d2d4a09a51afee6cdf424f192937436,Chapman Flack,2018-07-30T21:33:29Z,chap@anastigmatix.net,Chapman Flack,2018-07-30T21:33:29Z,chap@anastigmatix.net,1,0,1,Merge pull request #167 from bug/REL1_5_STABLE/issue166
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-so/src/main/c/Backend.c,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-so/src/main/c/InstallHelper.c,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-so/src/main/c/type/Type.c,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-so/src/main/include/pljava/InstallHelper.h,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,cf82c7dad2ac4d7a2bb6183e36fde952483b01aa,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:43:57Z,chap@anastigmatix.net,511,347,164,Merge pull request #165 from chore/REL1_5_STABLE/pgversupport
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,28174fa76f7b63420b0cc1fbfd59677033e8bcb3,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,262,184,78,Merge pull request #164 from bug/REL1_5_STABLE/issue163
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,28174fa76f7b63420b0cc1fbfd59677033e8bcb3,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,262,184,78,Merge pull request #164 from bug/REL1_5_STABLE/issue163
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,28174fa76f7b63420b0cc1fbfd59677033e8bcb3,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:42:15Z,chap@anastigmatix.net,262,184,78,Merge pull request #164 from bug/REL1_5_STABLE/issue163
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,13a6f387f559edd52a42dc9c69cab57e9ed7fc78,Chapman Flack,2018-07-29T21:26:26Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T21:26:26Z,chap@anastigmatix.net,12,12,0,"Tighten some conditional-DDR documentation.

The javadocs of the ConditionalDDR example are perhaps the most
complete written description of the feature, so keep them up to date."
,pljava-so/src/main/c/Backend.c,55ae99b2b16e4ca32e63aba383c145a05d172f5a,Chapman Flack,2018-07-29T19:25:36Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T19:26:04Z,chap@anastigmatix.net,1,0,1,"Do not clobber timeouts when loaded (#166).

The call to InitializeTimeouts here was probably added based on
a quick reading of the code comment in PG's timeout.c, where it
says ""This must be called in every process that wants to use timeouts.""
But it has been called already in a backend process (PostgresMain
did that), and calling it again here is not necessary or correct."
,pljava-so/src/main/c/InstallHelper.c,bd08bd31a62162a13e4d199113998b8dc9ec0c2c,Chapman Flack,2018-07-29T18:07:46Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T18:07:46Z,chap@anastigmatix.net,29,26,3,"Add PostgreSQL versions to greeting on load.

Some troubleshooting exercise somewhere is bound to be simplified
by reporting, at load time, the PostgreSQL version that was built
against and the version currently running."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,bd08bd31a62162a13e4d199113998b8dc9ec0c2c,Chapman Flack,2018-07-29T18:07:46Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T18:07:46Z,chap@anastigmatix.net,29,26,3,"Add PostgreSQL versions to greeting on load.

Some troubleshooting exercise somewhere is bound to be simplified
by reporting, at load time, the PostgreSQL version that was built
against and the version currently running."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,b1b19c1778cede4c969d0978ee4ac1be912285de,Chapman Flack,2018-07-29T04:27:27Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T04:34:13Z,chap@anastigmatix.net,250,172,78,"Emit REMOVE section of DDR in right order (#163).

The implicitly-added provides/requires relationships between implementor
tags and the snippets that test the environment to activate or suppress
them need to be treated specially. Unlike other dependency
relationships, which have their sense reversed between the INSTALL and
REMOVE action groups, these implicit ones need to keep the same sense.
It always works better to test a condition before needing to use the
result.

The old augmentRequires method, which created the implied dependencies
by outright adding them to the snippet's other requires, is now gone;
the implied relationship is simply handled within the ordering code.
Two DAGs are created, one for install and one for remove, and an order
is found independently for each.

It's also necessary to use the deployStrings of tag-testing snippets
at undeploy time, at least in the case they don't have explicit
undeployStrings supplied, which is the usual case, because the
conditions to be tested are the same deploying and undeploying."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,b1b19c1778cede4c969d0978ee4ac1be912285de,Chapman Flack,2018-07-29T04:27:27Z,chap@anastigmatix.net,Chapman Flack,2018-07-29T04:34:13Z,chap@anastigmatix.net,250,172,78,"Emit REMOVE section of DDR in right order (#163).

The implicitly-added provides/requires relationships between implementor
tags and the snippets that test the environment to activate or suppress
them need to be treated specially. Unlike other dependency
relationships, which have their sense reversed between the INSTALL and
REMOVE action groups, these implicit ones need to keep the same sense.
It always works better to test a condition before needing to use the
result.

The old augmentRequires method, which created the implied dependencies
by outright adding them to the snippet's other requires, is now gone;
the implied relationship is simply handled within the ordering code.
Two DAGs are created, one for install and one for remove, and an order
is found independently for each.

It's also necessary to use the deployStrings of tag-testing snippets
at undeploy time, at least in the case they don't have explicit
undeployStrings supplied, which is the usual case, because the
conditions to be tested are the same deploying and undeploying."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,2ee21e77d25668c8662bfc028fba9a8f808b67b1,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:54:00Z,chap@anastigmatix.net,221,155,66,"Conditionalize examples that depend on PG version.

(Also avoid yet another conditional, by replacing a use of the
format() function, which appeared in 9.0, with plain string
concatenation.)

Move the setting of the several version-specific ""implementor tags"" to
one place, ConditionalDDR.java.  It gets crazy to have SELECT CASE WHEN
... server_version_num ...  proliferating all through the examples."
,pljava-so/src/main/c/InstallHelper.c,36b628dc3d13bc051bf7008aa83293657977d685,Chapman Flack,2018-07-27T00:38:04Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,34,33,1,"Preserve LOAD usability over supported PG versions

In PG versions where CREATE EXTENSION is available, it will surely be
the most common installation method, but the method using LOAD should
not be allowed to bitrot. It can still be preferable, whether for quick
testing purposes, or cases where write access isn't available to the PG
installation's libdir and sharedir to install the PL/Java files there.

In both the most recent supported PG versions, 10 and later, and the
very earliest, 8.2, there are slight differences in the path of things
to dereference while finding the LoadStmt to get the library name.
In 10 and later, there can be an extra PlannedStmt to unwrap on the way,
and 8.2 had a list of query trees on the Portal instead of Stmts."
,pljava-so/src/main/c/InstallHelper.c,7b3f8746aa21355f2144f9511239ccc92ef3beec,Chapman Flack,2018-07-26T02:11:21Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,33,32,1,"Make sure InstallHelper_groundwork has a snapshot.

The check in pg_plan_query() was added for 8.4 (backpatched
to 8.3.6.and 8.2.12), and can prevent loading in some cases
(seen in 9.1 and earlier), at least when doing the 'guided'
sort of load with interactive setting of GUCs.

In passing, fix a plain old typo in Type that has been there
for a while, but only is exposed when building for 8.2."
,pljava-so/src/main/c/type/Type.c,7b3f8746aa21355f2144f9511239ccc92ef3beec,Chapman Flack,2018-07-26T02:11:21Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,33,32,1,"Make sure InstallHelper_groundwork has a snapshot.

The check in pg_plan_query() was added for 8.4 (backpatched
to 8.3.6.and 8.2.12), and can prevent loading in some cases
(seen in 9.1 and earlier), at least when doing the 'guided'
sort of load with interactive setting of GUCs.

In passing, fix a plain old typo in Type that has been there
for a while, but only is exposed when building for 8.2."
,pljava-so/src/main/c/Backend.c,c58975fc98fbffc8d67db9d8cbc1ebbfa48a9e85,Chapman Flack,2018-07-25T06:11:07Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,194,101,93,"Back-compat: fix Backend.c for PG < 8.4.

Among nits to fix, it pleasantly turns out that GUCs had boot values
even pre-8.4. They just had to be assigned in a different way. This
both tidies up the code in Backend and improves the experience of
setting up PL/Java in the oldest PG versions it supports."
,pljava-so/src/main/c/InstallHelper.c,c58975fc98fbffc8d67db9d8cbc1ebbfa48a9e85,Chapman Flack,2018-07-25T06:11:07Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,194,101,93,"Back-compat: fix Backend.c for PG < 8.4.

Among nits to fix, it pleasantly turns out that GUCs had boot values
even pre-8.4. They just had to be assigned in a different way. This
both tidies up the code in Backend and improves the experience of
setting up PL/Java in the oldest PG versions it supports."
,pljava-so/src/main/include/pljava/InstallHelper.h,c58975fc98fbffc8d67db9d8cbc1ebbfa48a9e85,Chapman Flack,2018-07-25T06:11:07Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:47:57Z,chap@anastigmatix.net,194,101,93,"Back-compat: fix Backend.c for PG < 8.4.

Among nits to fix, it pleasantly turns out that GUCs had boot values
even pre-8.4. They just had to be assigned in a different way. This
both tidies up the code in Backend and improves the experience of
setting up PL/Java in the oldest PG versions it supports."
,pljava-so/src/main/c/Backend.c,769bb19c174fa998bb73eba5d51bba3f3483d53a,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,36,28,8,Merge pull request #161 from trackpg/REL1_5_STABLE/pg11
,pljava-so/src/main/c/type/JavaWrapper.c,769bb19c174fa998bb73eba5d51bba3f3483d53a,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,36,28,8,Merge pull request #161 from trackpg/REL1_5_STABLE/pg11
,pljava-so/src/main/c/type/Type.c,769bb19c174fa998bb73eba5d51bba3f3483d53a,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,36,28,8,Merge pull request #161 from trackpg/REL1_5_STABLE/pg11
,pljava-so/src/main/include/pljava/pljava.h,769bb19c174fa998bb73eba5d51bba3f3483d53a,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,Chapman Flack,2018-07-28T23:30:55Z,chap@anastigmatix.net,36,28,8,Merge pull request #161 from trackpg/REL1_5_STABLE/pg11
,pljava-so/src/main/c/Backend.c,fdd2cdd285ff5417b730ef734330990bfc10c48e,Chapman Flack,2018-07-24T02:26:09Z,chap@anastigmatix.net,Chapman Flack,2018-07-24T02:26:09Z,chap@anastigmatix.net,13,11,2,"Drop GUC_LIST_QUOTE flag on pljava.implementors.

It becomes disallowed for extensions to define GUC_LIST_QUOTE
variables as of PG 11 (846b5a5)."
,pljava-so/src/main/c/type/JavaWrapper.c,3b67999e1b152132f725f9a3f33c88b237fc3d1a,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,23,17,6,"Use ALLOCSET_*_SIZES macros to create contexts.

These macros became available in 9.6 (ea268cd, with a ""back-patch""
appearing in 9.6.0, funnily enough). It becomes /necessary/ to use
them in PG 11 (9fa6f00), at least when using AllocSetContextCreate
rather than the PG11-new AllocSetContextCreateExtended.

Here, just define the macros locally for PG < 9.6, and use them
unconditionally."
,pljava-so/src/main/c/type/Type.c,3b67999e1b152132f725f9a3f33c88b237fc3d1a,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,23,17,6,"Use ALLOCSET_*_SIZES macros to create contexts.

These macros became available in 9.6 (ea268cd, with a ""back-patch""
appearing in 9.6.0, funnily enough). It becomes /necessary/ to use
them in PG 11 (9fa6f00), at least when using AllocSetContextCreate
rather than the PG11-new AllocSetContextCreateExtended.

Here, just define the macros locally for PG < 9.6, and use them
unconditionally."
,pljava-so/src/main/include/pljava/pljava.h,3b67999e1b152132f725f9a3f33c88b237fc3d1a,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,Chapman Flack,2018-07-24T01:39:02Z,chap@anastigmatix.net,23,17,6,"Use ALLOCSET_*_SIZES macros to create contexts.

These macros became available in 9.6 (ea268cd, with a ""back-patch""
appearing in 9.6.0, funnily enough). It becomes /necessary/ to use
them in PG 11 (9fa6f00), at least when using AllocSetContextCreate
rather than the PG11-new AllocSetContextCreateExtended.

Here, just define the macros locally for PG < 9.6, and use them
unconditionally."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,0510ef536c697abcc89f038828344971bdbfecbe,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,149,91,58,Merge pull request feature/REL1_5_STABLE/udtmap
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,0510ef536c697abcc89f038828344971bdbfecbe,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,149,91,58,Merge pull request feature/REL1_5_STABLE/udtmap
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,0510ef536c697abcc89f038828344971bdbfecbe,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,149,91,58,Merge pull request feature/REL1_5_STABLE/udtmap
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,0510ef536c697abcc89f038828344971bdbfecbe,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,149,91,58,Merge pull request feature/REL1_5_STABLE/udtmap
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,0510ef536c697abcc89f038828344971bdbfecbe,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,Chapman Flack,2018-07-22T03:55:45Z,chap@anastigmatix.net,149,91,58,Merge pull request feature/REL1_5_STABLE/udtmap
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,50e2e95a936f551067770c79ecec600c727f95aa,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,149,91,58,"Don't repeat yourself with UDT mappings.

It was never satisfying to define a UDT in Java through annotations
and still have the DDR generator give ""no mapping to an SQL type"" errors
for functions accepting or returning that type. It was easy enough (if
tedious) to work around by adding explicit type= or @SQLType annotations,
but the DDR generator had all the necessary information to figure that out
without such manual help. Now it does, eliminating the tedium
illustrated in jcflack/pljava-udt-type-extension@bcb5734.

To accommodate mappings added from the source being compiled, the
protoMappings collection is now of TypeMirror instances rather than
of Class instances.

Still future work: also add implied ordering dependencies for uses of
the new type (such as functions that have it as parameter or return
types and have to follow the type declaration, as illustrated in
jcflack/pljava-udt-type-extension@225ef5c, or that are named in it as,
for example, typmod in/out functions, and have to precede it)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,50e2e95a936f551067770c79ecec600c727f95aa,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,149,91,58,"Don't repeat yourself with UDT mappings.

It was never satisfying to define a UDT in Java through annotations
and still have the DDR generator give ""no mapping to an SQL type"" errors
for functions accepting or returning that type. It was easy enough (if
tedious) to work around by adding explicit type= or @SQLType annotations,
but the DDR generator had all the necessary information to figure that out
without such manual help. Now it does, eliminating the tedium
illustrated in jcflack/pljava-udt-type-extension@bcb5734.

To accommodate mappings added from the source being compiled, the
protoMappings collection is now of TypeMirror instances rather than
of Class instances.

Still future work: also add implied ordering dependencies for uses of
the new type (such as functions that have it as parameter or return
types and have to follow the type declaration, as illustrated in
jcflack/pljava-udt-type-extension@225ef5c, or that are named in it as,
for example, typmod in/out functions, and have to precede it)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,50e2e95a936f551067770c79ecec600c727f95aa,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,149,91,58,"Don't repeat yourself with UDT mappings.

It was never satisfying to define a UDT in Java through annotations
and still have the DDR generator give ""no mapping to an SQL type"" errors
for functions accepting or returning that type. It was easy enough (if
tedious) to work around by adding explicit type= or @SQLType annotations,
but the DDR generator had all the necessary information to figure that out
without such manual help. Now it does, eliminating the tedium
illustrated in jcflack/pljava-udt-type-extension@bcb5734.

To accommodate mappings added from the source being compiled, the
protoMappings collection is now of TypeMirror instances rather than
of Class instances.

Still future work: also add implied ordering dependencies for uses of
the new type (such as functions that have it as parameter or return
types and have to follow the type declaration, as illustrated in
jcflack/pljava-udt-type-extension@225ef5c, or that are named in it as,
for example, typmod in/out functions, and have to precede it)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,50e2e95a936f551067770c79ecec600c727f95aa,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,149,91,58,"Don't repeat yourself with UDT mappings.

It was never satisfying to define a UDT in Java through annotations
and still have the DDR generator give ""no mapping to an SQL type"" errors
for functions accepting or returning that type. It was easy enough (if
tedious) to work around by adding explicit type= or @SQLType annotations,
but the DDR generator had all the necessary information to figure that out
without such manual help. Now it does, eliminating the tedium
illustrated in jcflack/pljava-udt-type-extension@bcb5734.

To accommodate mappings added from the source being compiled, the
protoMappings collection is now of TypeMirror instances rather than
of Class instances.

Still future work: also add implied ordering dependencies for uses of
the new type (such as functions that have it as parameter or return
types and have to follow the type declaration, as illustrated in
jcflack/pljava-udt-type-extension@225ef5c, or that are named in it as,
for example, typmod in/out functions, and have to precede it)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,50e2e95a936f551067770c79ecec600c727f95aa,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,Chapman Flack,2018-07-21T02:06:06Z,chap@anastigmatix.net,149,91,58,"Don't repeat yourself with UDT mappings.

It was never satisfying to define a UDT in Java through annotations
and still have the DDR generator give ""no mapping to an SQL type"" errors
for functions accepting or returning that type. It was easy enough (if
tedious) to work around by adding explicit type= or @SQLType annotations,
but the DDR generator had all the necessary information to figure that out
without such manual help. Now it does, eliminating the tedium
illustrated in jcflack/pljava-udt-type-extension@bcb5734.

To accommodate mappings added from the source being compiled, the
protoMappings collection is now of TypeMirror instances rather than
of Class instances.

Still future work: also add implied ordering dependencies for uses of
the new type (such as functions that have it as parameter or return
types and have to follow the type declaration, as illustrated in
jcflack/pljava-udt-type-extension@225ef5c, or that are named in it as,
for example, typmod in/out functions, and have to precede it)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,f3f7544bf442c9c5e14d138d45fc4912750094f5,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,6,4,2,"Restore javadoc buildability with Java 8+

Fix a few recently-touched javadoc comments that do not prevent
doc building in Java 7, but do under the stricter rules introduced
in javadoc in Java 8."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,f3f7544bf442c9c5e14d138d45fc4912750094f5,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,6,4,2,"Restore javadoc buildability with Java 8+

Fix a few recently-touched javadoc comments that do not prevent
doc building in Java 7, but do under the stricter rules introduced
in javadoc in Java 8."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f3f7544bf442c9c5e14d138d45fc4912750094f5,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,Chapman Flack,2018-07-20T01:27:42Z,chap@anastigmatix.net,6,4,2,"Restore javadoc buildability with Java 8+

Fix a few recently-touched javadoc comments that do not prevent
doc building in Java 7, but do under the stricter rules introduced
in javadoc in Java 8."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,a156eda5d0d80f447b8ecc99bca8ea2f68481d10,Chapman Flack,2018-07-19T05:18:46Z,chap@anastigmatix.net,Chapman Flack,2018-07-19T05:18:46Z,chap@anastigmatix.net,263,114,149,"Merge pull request bug/REL1_5_STABLE/issue157

Fix failure of the compile-time SQL generator to recognize bytea as the
SQL type corresponding to Java's byte[]. Also eliminates a longstanding
warning message."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,a156eda5d0d80f447b8ecc99bca8ea2f68481d10,Chapman Flack,2018-07-19T05:18:46Z,chap@anastigmatix.net,Chapman Flack,2018-07-19T05:18:46Z,chap@anastigmatix.net,263,114,149,"Merge pull request bug/REL1_5_STABLE/issue157

Fix failure of the compile-time SQL generator to recognize bytea as the
SQL type corresponding to Java's byte[]. Also eliminates a longstanding
warning message."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,269437b15c358cd9b021439f420d5742f5a6376b,Chapman Flack,2018-07-18T03:06:55Z,chap@anastigmatix.net,Chapman Flack,2018-07-18T03:06:55Z,chap@anastigmatix.net,8,1,7,Remove a vestige of GCJ support.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,12ec013be94c3b256f2d2d184b3a2979932f83b7,Chapman Flack,2018-07-17T03:59:30Z,chap@anastigmatix.net,Chapman Flack,2018-07-18T02:58:32Z,chap@anastigmatix.net,61,35,26,Types.getArrayType() does the trick.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,8adc01b8293b88d30d48666690ecf2e2d9a38519,Chapman Flack,2018-07-17T03:18:24Z,chap@anastigmatix.net,Chapman Flack,2018-07-18T02:58:32Z,chap@anastigmatix.net,15,11,4,"This fixes a problem but not the problem.

The name passed to getTypeElement is expected to be a canonical name,
but that isn't what Class.getName() returns (or there wouldn't be a
Class.getCanonicalName()).

However, the problem seems to be deeper; arrays are not listed among the
things TypeElements exist to represent. It may be necessary to drill down
to the component type and then construct the TypeMirror using
getArrayType()."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Parameters.java,af28366a81d1f1733745e301040c361212cc8ad9,Chapman Flack,2018-07-18T02:58:28Z,chap@anastigmatix.net,Chapman Flack,2018-07-18T02:58:28Z,chap@anastigmatix.net,201,78,123,"Adapt the Parameters example to annotation style.

This example checks many of the mappings between SQL and Java
parameter and return types, so, as an annotation example, it
also exercises those mappings in the SQL generator. It is
sufficient to expose issue #157 (indeed, with this commit only,
compilation will fail on the inability to map byte[] to bytea).

The former, hand-crafted deployment descriptor did not contain
a declaration for every public static method in the Parameters
class. Those that were not declared then have been left
unannotated now.

The SQL generator includes parameter names in the function
declarations it emits. That makes it possible to use named-
parameter notation when calling the functions. However, it
has a consequence that parameter names should not be SQL
type keywords, as parameter names are optional in declarations
so if the name could be a type, PostgreSQL assumes it is, then
fails to parse the actual type that follows it. A few Java method
parameter names, accordingly, have been changed here."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,3447d0e05f1e6e911df934fc72a9d1f43955c7c7,Chapman Flack,2018-07-01T02:54:34Z,chap@anastigmatix.net,Chapman Flack,2018-07-01T02:54:34Z,chap@anastigmatix.net,269,258,11,"Merge pull request bug/REL1_5_STABLE/issue155

Enables conversion of negative (before the epoch) timestamp values,
which formerly threw an exception, so backward compatibility is not
an issue for that case.

Also avoids a double-counting of the fractional second, which can change
the conversion result from what it formerly would have been, by a maximum
of 1998 ms, average of 999 ms."
,pljava-so/src/main/c/type/Timestamp.c,3447d0e05f1e6e911df934fc72a9d1f43955c7c7,Chapman Flack,2018-07-01T02:54:34Z,chap@anastigmatix.net,Chapman Flack,2018-07-01T02:54:34Z,chap@anastigmatix.net,269,258,11,"Merge pull request bug/REL1_5_STABLE/issue155

Enables conversion of negative (before the epoch) timestamp values,
which formerly threw an exception, so backward compatibility is not
an issue for that case.

Also avoids a double-counting of the fractional second, which can change
the conversion result from what it formerly would have been, by a maximum
of 1998 ms, average of 999 ms."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,c4e4c54754f4f7aea5703aaad6bce67e8b2b0758,Chapman Flack,2018-06-25T05:35:17Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T05:12:12Z,chap@anastigmatix.net,234,210,24,"Timestamp (w/wo tz) good with + and - values.

There may still be particular values to test that could reveal
remaining flaws, but with a selection of positive and negative
(from the Java epoch) values, and with the corrections to
Timestamp.c, successful round trips are now seen."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,9626c246b127e8d9333bf4470bba4003799158eb,Chapman Flack,2018-06-26T05:10:07Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T05:10:07Z,chap@anastigmatix.net,269,258,11,"Merge branch bug/REL1_5_STABLE/issue155 into HEAD

Necessary to get the timestamp/timestamptz conversions <-> XQuery types
right."
,pljava-so/src/main/c/type/Timestamp.c,9626c246b127e8d9333bf4470bba4003799158eb,Chapman Flack,2018-06-26T05:10:07Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T05:10:07Z,chap@anastigmatix.net,269,258,11,"Merge branch bug/REL1_5_STABLE/issue155 into HEAD

Necessary to get the timestamp/timestamptz conversions <-> XQuery types
right."
,pljava-so/src/main/c/type/Timestamp.c,e1fcce8f7836ecd1c4907ee429e23ad643c6240b,Chapman Flack,2018-06-26T05:03:50Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T05:03:50Z,chap@anastigmatix.net,25,15,10,"Improve comments.

One always pushes to a public repository first, then sees the comments
that need improvement."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,c4e162a7f956413e5e2729c9e307570b32319b13,Chapman Flack,2018-06-26T04:42:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T04:42:11Z,chap@anastigmatix.net,56,50,6,"Correct errors in Timestamp (issue #155).

Review the arithmetic to make sure 'floored' / and % are always done
to preserve the constraint that the 'nanos' component of the Java
Timestamp class is always nonnegative, and to avoid double-counting
the part of the fractional second that is represented in both the
millis and the nanos components.

Add SQLActions in the TypeRoundTripper to test this behavior.

In passing, add conditionals for access in MSVC to the session_timezone
GUC, for those PG versions where it has become possible, and avoid the
work of computing tz in coerceDatum unless it is needed."
,pljava-so/src/main/c/type/Timestamp.c,c4e162a7f956413e5e2729c9e307570b32319b13,Chapman Flack,2018-06-26T04:42:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T04:42:11Z,chap@anastigmatix.net,56,50,6,"Correct errors in Timestamp (issue #155).

Review the arithmetic to make sure 'floored' / and % are always done
to preserve the constraint that the 'nanos' component of the Java
Timestamp class is always nonnegative, and to avoid double-counting
the part of the fractional second that is represented in both the
millis and the nanos components.

Add SQLActions in the TypeRoundTripper to test this behavior.

In passing, add conditionals for access in MSVC to the session_timezone
GUC, for those PG versions where it has become possible, and avoid the
work of computing tz in coerceDatum unless it is needed."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/TypeRoundTripper.java,5d9374b731ddde98c3d6a2edcb0aee102988b01e,Chapman Flack,2018-06-26T02:31:36Z,chap@anastigmatix.net,Chapman Flack,2018-06-26T02:31:36Z,chap@anastigmatix.net,198,198,0,"Add TypeRoundTripper example class.

This class simplifies testing of PL/Java's mappings between
PostgreSQL types and Java/JDBC types. It accepts and returns RECORD,
so values of any type can be passed and returned."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,522053898ea085e71a99c0beb49f4ada43158196,Chapman Flack,2018-06-19T03:43:38Z,chap@anastigmatix.net,Chapman Flack,2018-06-19T03:43:38Z,chap@anastigmatix.net,58,54,4,"Get negative intervals working.

Both XML Schema and PostgreSQL supposedly accept the ISO 8601
PdddYddMddDTddHddMdd.dddS form, but they could hardly disagree
more on what to do if the value is negative. XML Schema wants
-PdddYddMddDTddHddMdd.dddS which PG roundly rejects, wanting
to see instead P-dddY-ddM-ddDT-ddH-ddM-dd.dddS which is anathema
to XS. For this datatype there is no real help to be had from
JDBC or Saxon methods, so it boils down to shuffling the '-'
characters around in the lexical string."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,8064557349d62be64733f226bfe11904dfed0ecb,Chapman Flack,2018-06-18T06:09:35Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:53:49Z,chap@anastigmatix.net,545,497,48,"A first cut at XMLTABLE.

Correctly returns atomic types matching atomic values passed in,
except times and timestamps aren't right yet, to the great surprise
of no one in particular.

Is limited, so far, to output columns of non-XML types, where each
column expression produces an atomic value that's an instance of the
atomic type the rules determine from the SQL output column type. The
automatic casting of some other atomic type result value AV to the
value BV of the determined type isn't implemented yet (but that is no
blocker; XQuery ""cast as"" can be written into the column expression
to achieve exactly that effect).

This is perhaps most noticeable with the output column type bytea,
for which the rules always determine an XQuery type of xs:hexBinary.
A binary value in the form xs:base64Binary can't be retrieved as a
bytea, without writing ""cast as xs:hexBinary"" in the column expression.
That limitation will go away when the AV-to-BV casting rules are in place."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,82eb4954e4e2e070540e1c268119ac3f2876e94d,Chapman Flack,2018-06-17T03:55:25Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:53:49Z,chap@anastigmatix.net,77,71,6,Support namespace declarations.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,d97261f20979fbee6c26a2cbe4ad34394fad2667,Chapman Flack,2018-06-17T03:48:53Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:53:49Z,chap@anastigmatix.net,454,313,141,"Tidy, improve internal interfaces.

Factor the main works of XMLQUERY into an xmlquery_internal method
that is easier to call, and move the result serialization as CONTENT
back out into xq_ret_content (where the form of result is enforced).
Also create a Binding class to abstract the bindings of context item
and parameters away from ResultSet specifics; BindingsFromResultSet
is now just one implementation.

There turns out to be a handy isValidNCName() provided in Saxon."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/S9.java,f4f9c28257a70b0ff2264f50e645f6f8a3527319,Chapman Flack,2018-06-11T01:38:23Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:53:49Z,chap@anastigmatix.net,800,800,0,"A largely-working XMLQUERY using s9api.

Known limitations:
Maps all INTERVALs to xs:duration, rather than to
yearMonthDuration or dayTimeDuration as called for in the spec
(PL/Java ResultSetMetaData not exposing adequate information
from the typmod).

Maps all NUMERIC / DECIMAL to xs:decimal, not to xs:integer
when scale is zero as called for in the spec (PL/Java
ResultSetMetaData returning hardcoded value for scale).

Surely needs more work around time zones for types that may
or may not have them."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,2d850c64d1285f161643e57543820ee1f8d143d7,Chapman Flack,2018-06-16T22:21:34Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,31,24,7,"Enter type into yet one more mapping.

There are too many places in this code base where type mappings
are represented. Without this one, ResultSetMetaData will
still return Types.OTHER from getColumnType(), even though
ResultSet.getObject() correctly returns a SQLXML object.

Add comments in favor of future consolidation of the various
places where type mappings have to be kept up to date."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,2d850c64d1285f161643e57543820ee1f8d143d7,Chapman Flack,2018-06-16T22:21:34Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,31,24,7,"Enter type into yet one more mapping.

There are too many places in this code base where type mappings
are represented. Without this one, ResultSetMetaData will
still return Types.OTHER from getColumnType(), even though
ResultSet.getObject() correctly returns a SQLXML object.

Add comments in favor of future consolidation of the various
places where type mappings have to be kept up to date."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,2d850c64d1285f161643e57543820ee1f8d143d7,Chapman Flack,2018-06-16T22:21:34Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,31,24,7,"Enter type into yet one more mapping.

There are too many places in this code base where type mappings
are represented. Without this one, ResultSetMetaData will
still return Types.OTHER from getColumnType(), even though
ResultSet.getObject() correctly returns a SQLXML object.

Add comments in favor of future consolidation of the various
places where type mappings have to be kept up to date."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,b795a760aab046fe5e805398af7ea28569c6fc4b,Chapman Flack,2018-05-15T03:53:44Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,18,12,6,Complete the mapped composite example.
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,964aba2dfaffcfe0bdbef902caa259540694b555,Chapman Flack,2018-05-15T03:40:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,123,65,58,Take off the training wheels.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,964aba2dfaffcfe0bdbef902caa259540694b555,Chapman Flack,2018-05-15T03:40:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,123,65,58,Take off the training wheels.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,964aba2dfaffcfe0bdbef902caa259540694b555,Chapman Flack,2018-05-15T03:40:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,123,65,58,Take off the training wheels.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,964aba2dfaffcfe0bdbef902caa259540694b555,Chapman Flack,2018-05-15T03:40:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,123,65,58,Take off the training wheels.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,f8b39a6333a82ea87c0497b94332eb5dc1c65d15,Chapman Flack,2018-05-14T06:32:47Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,64,59,5,"Confirm SQLXML can be read from a mapped composite.

It can; nothing more needed to be done (readSQLXML still
throws SQLFeatureNotSupported, but readObject returns SQLXML).

On the SQLOutput side, there is no general-purpose writeObject
as there is for statements and result sets. Checking that will
have to wait until writeSQLXML no longer throws NotSupported."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,aa46edb392a2bfa254a071b11baf9d336cf2bd72,Chapman Flack,2018-05-30T03:42:25Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,73,56,17,"SQLXML in/out of PreparedStatements / ResultSets.

For PreparedStatement.setObject(col, x, Types.SQLXML) to work,
it's sufficient to mention the type in Oid.c. Getting the type
back from the ResultSet already works, thanks to the
Type_registerType() already done in SQLXMLImpl.c. However, the
test in the getObject(col, SQLXML.class) needed fixing, as it was
testing exact class equality, not whether it got an implementation
of the desired interface. (In passing, reorder those methods to make
clearer what JDBC revision brought them in.)

The setObject overload without the explicit Types.SQLXML will not
work yet, and simply adding addType(SQLXML.class,Types.SQLXML)
in SPIConnection is not sufficient ... because that uses a hash
table and therefore also depends on exact class equality; the full
grody names of the implementing classes would have to be added.
Or the mechanism would have to be fixed.

Wondering why the out.updateObject(col, x) works, without giving
an explicit type? That result set is already typed (by the column
definition list you have to include in the query calling this
RECORD-typed function). That method succeeding is /almost/ enough
to make a subsequent ps.setObject(col, x) work right (because in
succeeding, it primed the s_class2typeId cache in Oid); how would
that be for spooky action at a distance? But that doesn't quite
happen, because that cache is also a strict-class-equality hash map.

At this point, implementing the various (get,set,update}SQLXML methods
will be an easy formality, as they can be implemented in terms of the
methods taking explicit types, which now work.

Alas, this current behavior won't do for a 1.5.x release, because it
would actually start producing SQLXML objects by default where old
code may be expecting String. Before merging, this will need a way
to suppress that automatic mapping but still allow the explicit kind.
A subsequent major release can then go the rest of the way."
,pljava-so/src/main/c/type/Oid.c,aa46edb392a2bfa254a071b11baf9d336cf2bd72,Chapman Flack,2018-05-30T03:42:25Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,73,56,17,"SQLXML in/out of PreparedStatements / ResultSets.

For PreparedStatement.setObject(col, x, Types.SQLXML) to work,
it's sufficient to mention the type in Oid.c. Getting the type
back from the ResultSet already works, thanks to the
Type_registerType() already done in SQLXMLImpl.c. However, the
test in the getObject(col, SQLXML.class) needed fixing, as it was
testing exact class equality, not whether it got an implementation
of the desired interface. (In passing, reorder those methods to make
clearer what JDBC revision brought them in.)

The setObject overload without the explicit Types.SQLXML will not
work yet, and simply adding addType(SQLXML.class,Types.SQLXML)
in SPIConnection is not sufficient ... because that uses a hash
table and therefore also depends on exact class equality; the full
grody names of the implementing classes would have to be added.
Or the mechanism would have to be fixed.

Wondering why the out.updateObject(col, x) works, without giving
an explicit type? That result set is already typed (by the column
definition list you have to include in the query calling this
RECORD-typed function). That method succeeding is /almost/ enough
to make a subsequent ps.setObject(col, x) work right (because in
succeeding, it primed the s_class2typeId cache in Oid); how would
that be for spooky action at a distance? But that doesn't quite
happen, because that cache is also a strict-class-equality hash map.

At this point, implementing the various (get,set,update}SQLXML methods
will be an easy formality, as they can be implemented in terms of the
methods taking explicit types, which now work.

Alas, this current behavior won't do for a 1.5.x release, because it
would actually start producing SQLXML objects by default where old
code may be expecting String. Before merging, this will need a way
to suppress that automatic mapping but still allow the explicit kind.
A subsequent major release can then go the rest of the way."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,aa46edb392a2bfa254a071b11baf9d336cf2bd72,Chapman Flack,2018-05-30T03:42:25Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,73,56,17,"SQLXML in/out of PreparedStatements / ResultSets.

For PreparedStatement.setObject(col, x, Types.SQLXML) to work,
it's sufficient to mention the type in Oid.c. Getting the type
back from the ResultSet already works, thanks to the
Type_registerType() already done in SQLXMLImpl.c. However, the
test in the getObject(col, SQLXML.class) needed fixing, as it was
testing exact class equality, not whether it got an implementation
of the desired interface. (In passing, reorder those methods to make
clearer what JDBC revision brought them in.)

The setObject overload without the explicit Types.SQLXML will not
work yet, and simply adding addType(SQLXML.class,Types.SQLXML)
in SPIConnection is not sufficient ... because that uses a hash
table and therefore also depends on exact class equality; the full
grody names of the implementing classes would have to be added.
Or the mechanism would have to be fixed.

Wondering why the out.updateObject(col, x) works, without giving
an explicit type? That result set is already typed (by the column
definition list you have to include in the query calling this
RECORD-typed function). That method succeeding is /almost/ enough
to make a subsequent ps.setObject(col, x) work right (because in
succeeding, it primed the s_class2typeId cache in Oid); how would
that be for spooky action at a distance? But that doesn't quite
happen, because that cache is also a strict-class-equality hash map.

At this point, implementing the various (get,set,update}SQLXML methods
will be an easy formality, as they can be implemented in terms of the
methods taking explicit types, which now work.

Alas, this current behavior won't do for a 1.5.x release, because it
would actually start producing SQLXML objects by default where old
code may be expecting String. Before merging, this will need a way
to suppress that automatic mapping but still allow the explicit kind.
A subsequent major release can then go the rest of the way."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava-so/src/main/c/VarlenaWrapper.c,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava-so/src/main/c/type/SQLXMLImpl.c,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava-so/src/main/include/pljava/VarlenaWrapper.h,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,a73abee1385c22861f8b8357d28360c073bad916,Chapman Flack,2018-05-13T04:26:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,182,140,42,"Allow returning/storing a 'readable' SQLXML.

Relax the distinction between 'readable' and 'writable' SQLXML
instances just enough to allow a readable one passed in (or, later,
retrieved from a ResultSet) to be directly returned (or, later,
passed as a parameter or into a ResultSet), as long as it is still
readable, i.e., has not had any of the reading methods called by Java.

It can be used that way exactly once, as the native code retakes
ownership of it at that point."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,fce40fe43255b79213a7fd509a2dbd8ec385769b,Chapman Flack,2018-05-12T03:22:16Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,98,98,0,"Add an example doing ""XML echo"" at a lower level.

While the simple use of Transformer.transform(src, rlt) in
echoXMLParameter() is easy to read and covers a lot of cases without
a lot of coding, lowLevelXMLEcho() shows that, for some cases,
it is not hard to do without the Transformer. Comparisons of time and
memory demands can be made."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,27b80ca98b3ee706d9e672a00a60a52b70db3e8b,Chapman Flack,2018-05-12T00:30:46Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,80,79,1,"Unwrappage for DOM.

The DOMResult will now come back with getNode() returning a
Document node in the DOCUMENT case, a DocumentFragment node
in the CONTENT case. The JRE-bundled identity transformer
seems to reproduce either faithfully, without complaint."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,395512d829f4b6751b97de94813e0b4ab8521c0b,Chapman Flack,2018-05-09T17:28:24Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,124,123,1,"Unwrappage for StAX.

The XMLStreamReader created here returns the expected sequence of
things with no complaints or surprises when called directly.
However, a JRE default identity transformer using it as a source
will ignore or lose things, even while the 'same' transformer
reading the same sequence of things through the SAXUnwrapFilter
reproduces them faithfully. Odd, but for now it has to be enough
that the filter itself behaves as expected."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,b3281090d7a2e16e9dcd45833149d3bbabba6f73,Chapman Flack,2018-05-09T01:37:24Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,48,45,3,Unwrappage for SAX.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,064f7cbed968426c6673cd4eb04c5ef3c2feb79a,Chapman Flack,2018-05-13T00:59:09Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,14,13,1,"Don't let stream get closed in useWrappingElement.

The JRE XMLStreamReader seems to end up closing it, if it happens
to parse to the end, under some circumstances only, such as if
there's nothing (after the possible decl) but whitespace. I suspect
a bug (XMLDocumentScannerImpl$PrologDriver seems to use
XMLEntityScanner.skipSpaces to do that work, and maybe an /entity/
scanner would assume it can close its stream when it's done); in any
case, make sure that doesn't actually close the original stream."
,pljava/src/main/java/org/postgresql/pljava/jdbc/MarkableSequenceInputStream.java,b9910f30d61c42e9d17326c9bc95c885a6033b87,Chapman Flack,2018-05-09T19:14:04Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,480,466,14,"Test imperfectly for DOCUMENT/CONTENT in Readable.

The current stored form of XML in PostgreSQL does not save any
indication of whether the XML is in DOCUMENT or CONTENT form (which,
to determine correctly, requires fully reparsing it). Java's bundled
XML parsers do not accept the CONTENT form, requiring a synthetic
document root element to be wrapped around the stream content first,
then filtered out of the parse result. This, of course, is not necessary
if the input is in DOCUMENT form, but is harmless unless the input is in
DOCUMENT form with a DTD, in which case such wrapping must be avoided.

An imperfect test is added here that uses an input stream supporting
mark/reset, and pulls a few initial parse events before resetting the
stream for the application to parse. Those initial events only need to
be pulled until a DTD is parsed (meaning the input is definitely
DOCUMENT), or a disallowed-in-prolog production is parsed (meaning it
definitely isn't), or an element-start is parsed (meaning it could be
either, barring a full reparse to settle the question). The last two
cases can both be handled by the wrapping technique, so don't need to be
distinguished further.

The JDBC spec is mute on how SQLXML should handle DOCUMENT vs.
CONTENT. For the forms of Source that expose parse results,
wrapping and filtering is effective, but it would seem a POLA
violation to include synthetic wrapper elements via
getBinaryStream, getCharacterStream, or getString (or getSource
with StreamSource.class). So, for those cases, no wrapping.
The application code will need to know what it's doing if the
XML value might be of CONTENT form.

Because the JRE-supplied SequenceInputStream doesn't support mark/reset,
adds a (possibly general-purpose) MarkableSequenceInputStream that does,
as long as its constituent input streams do."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,b9910f30d61c42e9d17326c9bc95c885a6033b87,Chapman Flack,2018-05-09T19:14:04Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,480,466,14,"Test imperfectly for DOCUMENT/CONTENT in Readable.

The current stored form of XML in PostgreSQL does not save any
indication of whether the XML is in DOCUMENT or CONTENT form (which,
to determine correctly, requires fully reparsing it). Java's bundled
XML parsers do not accept the CONTENT form, requiring a synthetic
document root element to be wrapped around the stream content first,
then filtered out of the parse result. This, of course, is not necessary
if the input is in DOCUMENT form, but is harmless unless the input is in
DOCUMENT form with a DTD, in which case such wrapping must be avoided.

An imperfect test is added here that uses an input stream supporting
mark/reset, and pulls a few initial parse events before resetting the
stream for the application to parse. Those initial events only need to
be pulled until a DTD is parsed (meaning the input is definitely
DOCUMENT), or a disallowed-in-prolog production is parsed (meaning it
definitely isn't), or an element-start is parsed (meaning it could be
either, barring a full reparse to settle the question). The last two
cases can both be handled by the wrapping technique, so don't need to be
distinguished further.

The JDBC spec is mute on how SQLXML should handle DOCUMENT vs.
CONTENT. For the forms of Source that expose parse results,
wrapping and filtering is effective, but it would seem a POLA
violation to include synthetic wrapper elements via
getBinaryStream, getCharacterStream, or getString (or getSource
with StreamSource.class). So, for those cases, no wrapping.
The application code will need to know what it's doing if the
XML value might be of CONTENT form.

Because the JRE-supplied SequenceInputStream doesn't support mark/reset,
adds a (possibly general-purpose) MarkableSequenceInputStream that does,
as long as its constituent input streams do."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,542ac0cd1938358cce0e8f39f29ec7dab5c079c8,Chapman Flack,2018-05-03T22:57:21Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,48,48,0,"Support mark/reset in VarlenaWrapper.Input.

As remarked earlier, it's straightforward. It will end up
being handy after all."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,fd8ab228f1c2548e58302cc81f3624eb6c5d3533,Chapman Flack,2018-05-03T02:36:57Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,4,2,2,"Choose the Source/Result types to be default.

The spec allows getSource and setResult to be called with null
as the desired source or result class, and to return one that is
chosen with some driver-specific knowledge of what's most natural/
efficient.

It was easy to assume that byte streams would be the natural choice,
as they are what's going on under the hood. However, some testing
shows no time cost and even a slight memory advantage when presenting
input in the form of a SAXSource--at least when presenting it to a
JRE-bundled Transformer, which is likely to be a typical case where
null is passed as the desired class.

On the output side, there is a slight time advantage to StreamResult,
but SAXResult is pretty comparable, and saves the caller the burden
of getting the encoding right, closing the stream at the end, etc.
Interestingly, StAX for output was a little more sparing of memory
than SAX, but slower. It's possible that slowness could turn out to
be something simple (adding a BufferedWriter to the pipeline somewhere,
for example); if such an improvement to StAX timing is possible, it
might make a reasonable default on memory grounds. There's still a
point against StAX on fidelity grounds: when driven by a default JRE
identity transform, it can render empty elements with start and end
tags where they were self-closed in the original.

This commit only changes defaults for when the caller has no preferred
class. It is still possible to request any of the choices.

DOM is quite profligate with memory, and can balloon the Java heap
to something like 20 times the size of the serialized XML value; it
should probably be avoided except when it's exactly what the calling
code is built for."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,1d023b8343f1dc3426520baea276cbcd234adc7a,Chapman Flack,2018-05-02T03:56:35Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,19,17,2,"Work around JRE bug in reporting entity boundaries.

When being written as a Result by a transformer built from the
JRE-bundled Transformer implementation, it is possible to get
called from an implementation class
com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler
that overrides startEntity, and so passes those along, but neglects
to override endEntity, and so never reports those ... leaving our
underlying serializer thinking it is stuck in an entity forever."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,0bb474d20c67faa7ed17a4b777db04aedd5b8ea5,Chapman Flack,2018-05-12T02:10:14Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,84,81,3,"Implement SQLXML.setResult(DOMResult.class)

... the one flavor of Result originally left for later (= now).

It turns out that, alone among the setResult flavors, a DOMResult
does object to being used as the result of a transformation that
produces a document fragment (CONTENT, in SQL/XMLese). That's because,
unless setNode() is called first with a DocumentFragment node, the
transform will default to installing a Document node there instead.

Add an example presetting the DOMResult with an empty DocumentFragment."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,0bb474d20c67faa7ed17a4b777db04aedd5b8ea5,Chapman Flack,2018-05-12T02:10:14Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,84,81,3,"Implement SQLXML.setResult(DOMResult.class)

... the one flavor of Result originally left for later (= now).

It turns out that, alone among the setResult flavors, a DOMResult
does object to being used as the result of a transformation that
produces a document fragment (CONTENT, in SQL/XMLese). That's because,
unless setNode() is called first with a DocumentFragment node, the
transform will default to installing a Document node there instead.

Add an example presetting the DOMResult with an empty DocumentFragment."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,c9cf11cbf6a1722a7ef72dd30647d4a324001728,Chapman Flack,2018-04-29T16:25:05Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,141,90,51,"Use SQLXML for transformXML's result.

A quick test with a transform that produces a fragment (""CONTENT"",
in SQL/XML-speak) establishes that the Java serializers have no
objection (by default?) to serializing one, despite the parsers
being peevish about parsing one."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,b5ed64501c45efdb330040cdcda43f9664319643,Chapman Flack,2018-04-29T05:06:28Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,49,48,1,Illustrate the must-close requirements.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,8247c3adee3953d491ce12d3e30cac198344405f,Chapman Flack,2018-04-29T04:31:31Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,124,120,4,"Close StAXResult upon endDocument.

To comply with the API spec, SQLXML has to throw an exception if
passed to the database to be stored before being closed. However,
a StAXResult exposes no way for the caller to explicitly close it
(XMLStreamWriter has a close() method, but its documentation explicitly
forbids it to close the underlying stream!). So, wrap it in an adapter
that does so after the endDocument is processed.

This still leaves the oddity that serializing with StAX does not
reproduce self-closing empty elements."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,7d9718e49f5e3cc5538c8c374a2b101ca897e82d,Chapman Flack,2018-04-29T03:39:30Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,135,133,2,"Close SAXResult upon endDocument().

To comply with the API spec, SQLXML has to throw an exception if
passed to the database to be stored before being closed. However,
a SAXResult exposes no way for the caller to explicitly close it,
so wrap it in an adapter that will do so after the endDocument()
is processed."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,f9f7b53d0da9b84aa94573f9e636c00fc45bbfa7,Chapman Flack,2018-04-29T02:06:36Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,58,44,14,Extend example to echo via writable SQLXML.
,pljava-so/src/main/c/type/SQLXMLImpl.c,4c738695e8098dc0f5f227ae0c37c6ff53114584,Chapman Flack,2018-04-29T02:25:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,64,56,8,Implement Connection.createSQLXML()
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,4c738695e8098dc0f5f227ae0c37c6ff53114584,Chapman Flack,2018-04-29T02:25:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,64,56,8,Implement Connection.createSQLXML()
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,4c738695e8098dc0f5f227ae0c37c6ff53114584,Chapman Flack,2018-04-29T02:25:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,64,56,8,Implement Connection.createSQLXML()
,pljava-so/src/main/c/type/SQLXMLImpl.c,dedd2c7ccc4ab9ac08093cbc4505ba155a8fe2d2,Chapman Flack,2018-05-12T01:17:08Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,19,18,1,Implement adopt() for Writable.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,dedd2c7ccc4ab9ac08093cbc4505ba155a8fe2d2,Chapman Flack,2018-05-12T01:17:08Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,19,18,1,Implement adopt() for Writable.
,pljava-so/src/main/c/type/SQLXMLImpl.c,ad1ebc8dc0a10ae7258a924d4dd09339169339a7,Chapman Flack,2018-04-29T01:32:38Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,336,336,0,Add SQLXMLImpl.Writable.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,ad1ebc8dc0a10ae7258a924d4dd09339169339a7,Chapman Flack,2018-04-29T01:32:38Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,336,336,0,Add SQLXMLImpl.Writable.
,pljava-so/src/main/c/JNICalls.c,3a7a0145da0550dc11f762b92ae979403e06b471,Chapman Flack,2018-04-29T01:11:00Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,457,457,0,Add VarlenaWrapper.Output.
,pljava-so/src/main/c/VarlenaWrapper.c,3a7a0145da0550dc11f762b92ae979403e06b471,Chapman Flack,2018-04-29T01:11:00Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,457,457,0,Add VarlenaWrapper.Output.
,pljava-so/src/main/include/pljava/JNICalls.h,3a7a0145da0550dc11f762b92ae979403e06b471,Chapman Flack,2018-04-29T01:11:00Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,457,457,0,Add VarlenaWrapper.Output.
,pljava-so/src/main/include/pljava/VarlenaWrapper.h,3a7a0145da0550dc11f762b92ae979403e06b471,Chapman Flack,2018-04-29T01:11:00Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,457,457,0,Add VarlenaWrapper.Output.
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,3a7a0145da0550dc11f762b92ae979403e06b471,Chapman Flack,2018-04-29T01:11:00Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,457,457,0,Add VarlenaWrapper.Output.
,pljava-so/src/main/c/DualState.c,c5992c2bc63dd6571722b9ced5a8e2c0376b1b15,Chapman Flack,2018-04-21T15:45:41Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,139,137,2,"Add DualState.SingleMemContextDelete.

A subclass of DualState that encapsulates a reference to a single
PostgreSQL memory context, and will delete it if the Java reference
is released or garbage collected."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,c5992c2bc63dd6571722b9ced5a8e2c0376b1b15,Chapman Flack,2018-04-21T15:45:41Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,139,137,2,"Add DualState.SingleMemContextDelete.

A subclass of DualState that encapsulates a reference to a single
PostgreSQL memory context, and will delete it if the Java reference
is released or garbage collected."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,93fb395cc39f3b31c49118f63c8f022a1ef8104e,Chapman Flack,2018-04-28T23:34:07Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,13,13,0,Make toString more useful for DualState.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,3ce8cbdf7c76d2f1b9c4439b24d2f025bd4816a7,Chapman Flack,2018-04-28T23:13:52Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,92,67,25,Add an example that applies a transform.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,c03b4e6203a6ca0888f4c8068b266e31c530a72e,Chapman Flack,2018-04-29T02:22:51Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,559,550,9,"Ensure declaration, if any, is accurate.

The current PostgreSQL stored form for the XML type is a serialized
character string in the server encoding, still preceded by any
XMLDecl or TextDecl that preceded it, even if wrong (about the
encoding, anyway). PG's xml_out and xml_send deal with that by
replacing the decl, if any, with a newly-constructed one, and have
their own problems, but that's the basic technique reproduced here."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,593e30d1aac9016ecea2bd81cdeaf814eef56892,Chapman Flack,2018-04-28T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,11,10,1,"Honor API spec for namespaces with getSource().

""Sources for XML parsers will have namespace processing on by default."""
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PassXML.java,2950d96cfa4b5f2de2402cae37924270317dafaa,Chapman Flack,2018-05-13T00:39:18Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,110,110,0,Add a rudimentary example.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,ae412dbd7c00a88f3b09a309852d378a36b6083a,Chapman Flack,2018-04-28T22:35:15Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,1,1,0,Recognize type SQLXML in the annotation processor.
,pljava-so/src/main/c/type/SQLXMLImpl.c,f0bb8b5c86bbe4b1f20591caa9645c5b692c2a9a,Chapman Flack,2018-04-29T02:18:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,243,243,0,"Add SQLXMLImpl.Readable.

This implements the reading (get...) operations, so it is the kind
of SQLXML instance that would be passed by PostgreSQL to a Java function
as a parameter, or retrieved from the ResultSet of a query."
,pljava-so/src/main/c/type/Type.c,f0bb8b5c86bbe4b1f20591caa9645c5b692c2a9a,Chapman Flack,2018-04-29T02:18:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,243,243,0,"Add SQLXMLImpl.Readable.

This implements the reading (get...) operations, so it is the kind
of SQLXML instance that would be passed by PostgreSQL to a Java function
as a parameter, or retrieved from the ResultSet of a query."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,f0bb8b5c86bbe4b1f20591caa9645c5b692c2a9a,Chapman Flack,2018-04-29T02:18:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,243,243,0,"Add SQLXMLImpl.Readable.

This implements the reading (get...) operations, so it is the kind
of SQLXML instance that would be passed by PostgreSQL to a Java function
as a parameter, or retrieved from the ResultSet of a query."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,f0bb8b5c86bbe4b1f20591caa9645c5b692c2a9a,Chapman Flack,2018-04-29T02:18:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,243,243,0,"Add SQLXMLImpl.Readable.

This implements the reading (get...) operations, so it is the kind
of SQLXML instance that would be passed by PostgreSQL to a Java function
as a parameter, or retrieved from the ResultSet of a query."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,f0bb8b5c86bbe4b1f20591caa9645c5b692c2a9a,Chapman Flack,2018-04-29T02:18:11Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,243,243,0,"Add SQLXMLImpl.Readable.

This implements the reading (get...) operations, so it is the kind
of SQLXML instance that would be passed by PostgreSQL to a Java function
as a parameter, or retrieved from the ResultSet of a query."
,pljava-so/src/main/c/DualState.c,2f9844c0ab4d18fcf397178c2ec7acc72a5e9899,Chapman Flack,2018-04-28T21:50:33Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,272,272,0,"Add VarlenaWrapper.

A VarlenaWrapper.Input presents a readable view of a detoasted
datum residing in native memory. It is constructed from native code,
specifying the memory context to (always copy or) detoast into, and
a ResourceOwner bounding the life of the native copy (which must be
released no later than the specified memory context is reset).

The available() method returns the actual detoasted size.

It would also be easy to support mark/reset, but nothing urgently
needs them at the moment."
,pljava-so/src/main/c/VarlenaWrapper.c,2f9844c0ab4d18fcf397178c2ec7acc72a5e9899,Chapman Flack,2018-04-28T21:50:33Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,272,272,0,"Add VarlenaWrapper.

A VarlenaWrapper.Input presents a readable view of a detoasted
datum residing in native memory. It is constructed from native code,
specifying the memory context to (always copy or) detoast into, and
a ResourceOwner bounding the life of the native copy (which must be
released no later than the specified memory context is reset).

The available() method returns the actual detoasted size.

It would also be easy to support mark/reset, but nothing urgently
needs them at the moment."
,pljava-so/src/main/include/pljava/VarlenaWrapper.h,2f9844c0ab4d18fcf397178c2ec7acc72a5e9899,Chapman Flack,2018-04-28T21:50:33Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,272,272,0,"Add VarlenaWrapper.

A VarlenaWrapper.Input presents a readable view of a detoasted
datum residing in native memory. It is constructed from native code,
specifying the memory context to (always copy or) detoast into, and
a ResourceOwner bounding the life of the native copy (which must be
released no later than the specified memory context is reset).

The available() method returns the actual detoasted size.

It would also be easy to support mark/reset, but nothing urgently
needs them at the moment."
,pljava/src/main/java/org/postgresql/pljava/internal/VarlenaWrapper.java,2f9844c0ab4d18fcf397178c2ec7acc72a5e9899,Chapman Flack,2018-04-28T21:50:33Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,272,272,0,"Add VarlenaWrapper.

A VarlenaWrapper.Input presents a readable view of a detoasted
datum residing in native memory. It is constructed from native code,
specifying the memory context to (always copy or) detoast into, and
a ResourceOwner bounding the life of the native copy (which must be
released no later than the specified memory context is reset).

The available() method returns the actual detoasted size.

It would also be easy to support mark/reset, but nothing urgently
needs them at the moment."
,pljava-so/src/main/c/DualState.c,498f5dff57f2818c3e3063a2516db8918a982e82,Chapman Flack,2018-04-09T04:23:21Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,124,123,1,"Add a SinglePfree subclass of DualState.

This should cover many cases where the native component of the state
is a single pointer that only wants to be pfree'd when no longer needed."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,498f5dff57f2818c3e3063a2516db8918a982e82,Chapman Flack,2018-04-09T04:23:21Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,124,123,1,"Add a SinglePfree subclass of DualState.

This should cover many cases where the native component of the state
is a single pointer that only wants to be pfree'd when no longer needed."
,pljava-so/src/main/c/Backend.c,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava-so/src/main/c/DualState.c,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava-so/src/main/c/Invocation.c,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava-so/src/main/c/JNICalls.c,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava-so/src/main/include/pljava/DualState.h,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava-so/src/main/include/pljava/JNICalls.h,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava/src/main/java/org/postgresql/pljava/internal/DualState.java,6df786639138a572232ecaf0ef4bfbb254fdb2a3,Chapman Flack,2018-05-11T23:51:43Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,465,465,0,"Introduce DualState class.

Yes, it is *another* pattern for objects that have Java and native state.
For now, the existing ones are being left alone. The existing patterns
do not seem to include anything for objects that are spec'd to live for
the whole transaction (as JDBC specs SQLXML to do). This pattern hooks
into PostgreSQL ResourceOwner mechanisms (and there is a TopTransaction
ResourceOwner) in order to be usable for that. If nothing blows up, it
may be possible to migrate other existing patterns to it later."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLXMLImpl.java,5efb2b57e1aae6a96c50dabe66de4e04dc6dccfd,Chapman Flack,2018-05-12T01:09:42Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:49:54Z,chap@anastigmatix.net,158,158,0,"Add SQLXMLImpl abstract class.

Concrete subclasses will implement the readable flavor of SQLXML
instance (as would be received as a function parameter or retrieved
from a ResultSet) and the writable flavor (as would be obtained empty
from Connection.createSQLXML, populated, then used as a query parameter,
return value, etc.)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,a096f917ca6094d7bf7be60c8211a70ac789933c,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,182,174,8,"Merge pull request #153 from feature/REL1_5_STABLE/rowparamdefaults

PL/Java has long had the ability to declare a function parameter that is
of a row type, even of the row type RECORD with no a priori known
structure. This is quite convenient for implementing functions that can
be passed an arbitrary sequence of named, typed parameters by the SQL
caller.

This patch tweaks the SQL deployment descriptor generator to be able to
emit default values for parameters of row types (where previously it
could only emit working syntax for scalars or arrays). This simplifies
the development of functions accepting optional sequences of arbitrary
named, typed parameters.

Adds RecordParameterDefaults.java in pljava-examples for illustration."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,a096f917ca6094d7bf7be60c8211a70ac789933c,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,182,174,8,"Merge pull request #153 from feature/REL1_5_STABLE/rowparamdefaults

PL/Java has long had the ability to declare a function parameter that is
of a row type, even of the row type RECORD with no a priori known
structure. This is quite convenient for implementing functions that can
be passed an arbitrary sequence of named, typed parameters by the SQL
caller.

This patch tweaks the SQL deployment descriptor generator to be able to
emit default values for parameters of row types (where previously it
could only emit working syntax for scalars or arrays). This simplifies
the development of functions accepting optional sequences of arbitrary
named, typed parameters.

Adds RecordParameterDefaults.java in pljava-examples for illustration."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,a096f917ca6094d7bf7be60c8211a70ac789933c,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,Chapman Flack,2018-06-18T16:43:41Z,chap@anastigmatix.net,182,174,8,"Merge pull request #153 from feature/REL1_5_STABLE/rowparamdefaults

PL/Java has long had the ability to declare a function parameter that is
of a row type, even of the row type RECORD with no a priori known
structure. This is quite convenient for implementing functions that can
be passed an arbitrary sequence of named, typed parameters by the SQL
caller.

This patch tweaks the SQL deployment descriptor generator to be able to
emit default values for parameters of row types (where previously it
could only emit working syntax for scalars or arrays). This simplifies
the development of functions accepting optional sequences of arbitrary
named, typed parameters.

Adds RecordParameterDefaults.java in pljava-examples for illustration."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,9da65f8b7e4f1e73d3a1643d3497f74b7e491dc2,Chapman Flack,2018-06-16T21:32:05Z,chap@anastigmatix.net,Chapman Flack,2018-06-16T21:32:05Z,chap@anastigmatix.net,7,0,7,Remove an overlooked copy/paste artifact.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,5e4bf0be03a1203ce7df880e2f4e937741f5d6ed,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,189,181,8,"Let annotations give row-type parameters defaults.

The @SQLType annotation can now supply an array of strings as
defaultValue for a parameter that has a row type (either the RECORD
type, whose structure is unknown, or a named row type).

In the case of RECORD, the only default that will be accepted is
{} (the array of no strings). While a bit limiting, that is still
just the ticket when a RECORD-typed parameter is being used to
supply a function with an optional, arbitrary sequence of named, typed
parameters.

In the case of a named row type, the default should be an array of
as many strings as the components of the type, and the strings should
be castable to the corresponding component types. The DDR generator
has no way to check that at compile time, but PostgreSQL will report
the error at jar install time if there is a mismatch."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,5e4bf0be03a1203ce7df880e2f4e937741f5d6ed,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,189,181,8,"Let annotations give row-type parameters defaults.

The @SQLType annotation can now supply an array of strings as
defaultValue for a parameter that has a row type (either the RECORD
type, whose structure is unknown, or a named row type).

In the case of RECORD, the only default that will be accepted is
{} (the array of no strings). While a bit limiting, that is still
just the ticket when a RECORD-typed parameter is being used to
supply a function with an optional, arbitrary sequence of named, typed
parameters.

In the case of a named row type, the default should be an array of
as many strings as the components of the type, and the strings should
be castable to the corresponding component types. The DDR generator
has no way to check that at compile time, but PostgreSQL will report
the error at jar install time if there is a mismatch."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/RecordParameterDefaults.java,5e4bf0be03a1203ce7df880e2f4e937741f5d6ed,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,Chapman Flack,2018-06-16T21:13:53Z,chap@anastigmatix.net,189,181,8,"Let annotations give row-type parameters defaults.

The @SQLType annotation can now supply an array of strings as
defaultValue for a parameter that has a row type (either the RECORD
type, whose structure is unknown, or a named row type).

In the case of RECORD, the only default that will be accepted is
{} (the array of no strings). While a bit limiting, that is still
just the ticket when a RECORD-typed parameter is being used to
supply a function with an optional, arbitrary sequence of named, typed
parameters.

In the case of a named row type, the default should be an array of
as many strings as the components of the type, and the strings should
be castable to the corresponding component types. The DDR generator
has no way to check that at compile time, but PostgreSQL will report
the error at jar install time if there is a mismatch."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,d5172c688ee45fffd93f8850ec35f4487b15efed,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,64,52,12,"Merge pull request #150 from trackjdbc/REL1_5_STABLE/udttypename

Supplies one of the short-term improvements suggested in issue #149."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,d5172c688ee45fffd93f8850ec35f4487b15efed,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,64,52,12,"Merge pull request #150 from trackjdbc/REL1_5_STABLE/udttypename

Supplies one of the short-term improvements suggested in issue #149."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,d5172c688ee45fffd93f8850ec35f4487b15efed,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,Chapman Flack,2018-06-10T21:40:02Z,chap@anastigmatix.net,64,52,12,"Merge pull request #150 from trackjdbc/REL1_5_STABLE/udttypename

Supplies one of the short-term improvements suggested in issue #149."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,141efe2264553a2300af425a7f3d4b5a76d02924,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,64,52,12,"Use getSQLTypeName, and add a test.

Provide one of the short-term solutions suggested in issue #149.

As the current PreparedStatement implementation does not get the
inferred parameter types from PostgreSQL (which became possible
with SPI only as recently as PostgreSQL 9.0), its setObject method
must make a best effort to map in the other direction, finding the
PostgreSQL type that corresponds to the Java parameter value. In
one case, this is easily made much more reliable: when the Java
parameter value is an SQLData instance (a UDT), and therefore has
a getSQLTypeName method, unused until now.

Add a test method (in the ComplexTuple UDT example) to confirm that
the type is properly mapped when passed as a parameter to a
PreparedStatement."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,141efe2264553a2300af425a7f3d4b5a76d02924,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,64,52,12,"Use getSQLTypeName, and add a test.

Provide one of the short-term solutions suggested in issue #149.

As the current PreparedStatement implementation does not get the
inferred parameter types from PostgreSQL (which became possible
with SPI only as recently as PostgreSQL 9.0), its setObject method
must make a best effort to map in the other direction, finding the
PostgreSQL type that corresponds to the Java parameter value. In
one case, this is easily made much more reliable: when the Java
parameter value is an SQLData instance (a UDT), and therefore has
a getSQLTypeName method, unused until now.

Add a test method (in the ComplexTuple UDT example) to confirm that
the type is properly mapped when passed as a parameter to a
PreparedStatement."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,141efe2264553a2300af425a7f3d4b5a76d02924,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,Chapman Flack,2018-06-01T17:07:58Z,chap@anastigmatix.net,64,52,12,"Use getSQLTypeName, and add a test.

Provide one of the short-term solutions suggested in issue #149.

As the current PreparedStatement implementation does not get the
inferred parameter types from PostgreSQL (which became possible
with SPI only as recently as PostgreSQL 9.0), its setObject method
must make a best effort to map in the other direction, finding the
PostgreSQL type that corresponds to the Java parameter value. In
one case, this is easily made much more reliable: when the Java
parameter value is an SQLData instance (a UDT), and therefore has
a getSQLTypeName method, unused until now.

Add a test method (in the ComplexTuple UDT example) to confirm that
the type is properly mapped when passed as a parameter to a
PreparedStatement."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,9eb363f9b766562be954bcf914a5c750b2442e27,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,Chapman Flack,2018-04-28T19:35:53Z,chap@anastigmatix.net,478,263,215,"Sort implemented from unimplemented JDBC4 methods.

Move those that have some JDBC-allowed behavior (other than
throwing a not-supported exception) into the 'implemented'
category, even when the JDBC-allowed behavior is to do
nothing special. Leave in the 'unimplemented' category just
the methods that ought to do something else, but currently
throw the not-supported exception.

In passing, just provide the natural implementation for
isWrapperFor and unwrap; it's no more trouble than throwing
the exception!

For ResultSetMetaData, pull up their implementations into
AbstractResultSetMetaData, so they don't have to be duplicated
in SPIResultSetMetaData and SyntheticResultSetMetaData.

Some indentation normalized, only in areas touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f3b6577a2f2878d7ea902a184ea731a90c1c7a20,Chapman Flack,2018-04-24T00:15:42Z,chap@anastigmatix.net,Chapman Flack,2018-04-24T00:15:42Z,chap@anastigmatix.net,232,180,52,"Annotate Connection methods and add more comments.

Add @Override to the methods in SPIConnection that are specified
by the Connection API (to make it easier to spot the ones that
aren't). For those added in JDBC 4.1, the annotation is commented out,
as PL/Java 1.5 still strives to be buildable with Java 6. Once the
back-compatibility horizon is Java 7 or later, those @Overrides can
be uncommented.

It would also be fair to say this has added annotations (or
commented-out annotations) through JDBC 4.2, as it didn't add
any new Connection methods.

The PL/Java-specific and internal methods are now easier to pick out
(they're the ones without @Override annotations), and have some more
extensive comments about what they're doing there. Also moved one
method to be nearer the stuff it pertains to. No code changes (except
to add the specified generic signature on getTypeMap/setTypeMap).
Indentation adjusted in a couple contiguous areas."
,pljava-so/src/main/c/type/Oid.c,1c76bab23c01afe61a3d2d514917b4bf8c126fec,Chapman Flack,2018-04-21T14:35:15Z,chap@anastigmatix.net,Chapman Flack,2018-04-21T14:35:15Z,chap@anastigmatix.net,19,17,2,"Mention JDBC 4.0 to 4.2 types in Oid.c.

These are still not given any mapping other than to InvalidOid,
but at least they are mentioned (conditionally, for the JDBC 4.2
ones) in the switch statement now."
,pljava-so/src/main/c/Backend.c,61cc0a9c5f02f81bf0a7fd6286ac834c2698efcf,Chapman Flack,2018-04-17T01:31:41Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:27:39Z,chap@anastigmatix.net,2,1,1,"Fix dangling pointer left as GUC boot value.

The clearly-intended-but-forgotten 'static' here never caused
functional trouble in practice, because the value was valid at the only
time it was used. It could, however, cause unexpected bytes to appear
in the boot_val column of the pg_settings view, which in turn appeared
as character-encoding errors in tests of XML processing with
schema_to_xml('pg_catalog', ...) as the source document for testing,
which ended up being how this missing 'static' came to light."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,eccfadecea65e3d23345073437440b443f185b22,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,123,65,58,"Merge branch 'bug/REL1_5_STABLE/issue146'.

Ensure, when returning RECORD or SETOF RECORD, that returned values
are cast according to the types in the column definition list that SQL
requires in the query following the function call."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,eccfadecea65e3d23345073437440b443f185b22,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,123,65,58,"Merge branch 'bug/REL1_5_STABLE/issue146'.

Ensure, when returning RECORD or SETOF RECORD, that returned values
are cast according to the types in the column definition list that SQL
requires in the query following the function call."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,eccfadecea65e3d23345073437440b443f185b22,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,123,65,58,"Merge branch 'bug/REL1_5_STABLE/issue146'.

Ensure, when returning RECORD or SETOF RECORD, that returned values
are cast according to the types in the column definition list that SQL
requires in the query following the function call."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,eccfadecea65e3d23345073437440b443f185b22,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,123,65,58,"Merge branch 'bug/REL1_5_STABLE/issue146'.

Ensure, when returning RECORD or SETOF RECORD, that returned values
are cast according to the types in the column definition list that SQL
requires in the query following the function call."
,src/java/test/org/postgresql/pljava/test/Tester.java,eccfadecea65e3d23345073437440b443f185b22,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,Chapman Flack,2018-04-17T22:13:05Z,chap@anastigmatix.net,123,65,58,"Merge branch 'bug/REL1_5_STABLE/issue146'.

Ensure, when returning RECORD or SETOF RECORD, that returned values
are cast according to the types in the column definition list that SQL
requires in the query following the function call."
,pljava-so/src/main/include/pljava/pljava.h,2e9db0a8a824d6da3a7c5342e52627f70046ef5b,Chapman Flack,2018-04-08T17:43:34Z,chap@anastigmatix.net,Chapman Flack,2018-04-08T17:43:34Z,chap@anastigmatix.net,9,0,9,"Remove some dead declarations.

Of pljavaEntryFence(), and the x64 {intVal_1, intVal_2} members of
Ptr2Long, all declared in pljava.h, there is no other use anywhere
in the code. Get rid of them to reduce obstacles to understanding
the implementation."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,847375d73c21f3fb386f25b74f0e0fd5e0977561,Chapman Flack,2018-03-23T00:34:39Z,chap@anastigmatix.net,Chapman Flack,2018-03-23T00:34:39Z,chap@anastigmatix.net,36,31,5,"Document SETOF RECORD in ResultSet{Provider|Handle}

Expand the API docs to explain the interaction with the calling query's
column definition list when a function is declared to return SETOF RECORD.

Except for the type-casting behavior change in ResultSetHandle
for issue #146, this is simply an exercise in documenting what currently
happens."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,847375d73c21f3fb386f25b74f0e0fd5e0977561,Chapman Flack,2018-03-23T00:34:39Z,chap@anastigmatix.net,Chapman Flack,2018-03-23T00:34:39Z,chap@anastigmatix.net,36,31,5,"Document SETOF RECORD in ResultSet{Provider|Handle}

Expand the API docs to explain the interaction with the calling query's
column definition list when a function is declared to return SETOF RECORD.

Except for the type-casting behavior change in ResultSetHandle
for issue #146, this is simply an exercise in documenting what currently
happens."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/SetOfRecordTest.java,6db6d070197a8f445c6c1c06f0f5b34a98b06147,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,87,34,53,"Do casts in ResultSetHandle by column definition list

A function declared to return RECORD or SETOF RECORD is required
by SQL to be followed by a column definition list in any query using it.
If the function returns SETOF RECORD using ResultSetHandle, there is a
possibility that one or more corresponding columns in the definition list
and the ResultSet offered by ResultSetHandle differ in type. Let the type
be cast automatically, just as it would be when using ResultSetProvider
and storing each value into the output ResultSet.

Also convert the SetOfRecordTest example to an annotation-style example
and add an SQLAction that tests it.

Addresses issue #146."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,6db6d070197a8f445c6c1c06f0f5b34a98b06147,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,87,34,53,"Do casts in ResultSetHandle by column definition list

A function declared to return RECORD or SETOF RECORD is required
by SQL to be followed by a column definition list in any query using it.
If the function returns SETOF RECORD using ResultSetHandle, there is a
possibility that one or more corresponding columns in the definition list
and the ResultSet offered by ResultSetHandle differ in type. Let the type
be cast automatically, just as it would be when using ResultSetProvider
and storing each value into the output ResultSet.

Also convert the SetOfRecordTest example to an annotation-style example
and add an SQLAction that tests it.

Addresses issue #146."
,src/java/test/org/postgresql/pljava/test/Tester.java,6db6d070197a8f445c6c1c06f0f5b34a98b06147,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,Chapman Flack,2018-03-22T23:59:54Z,chap@anastigmatix.net,87,34,53,"Do casts in ResultSetHandle by column definition list

A function declared to return RECORD or SETOF RECORD is required
by SQL to be followed by a column definition list in any query using it.
If the function returns SETOF RECORD using ResultSetHandle, there is a
possibility that one or more corresponding columns in the definition list
and the ResultSet offered by ResultSetHandle differ in type. Let the type
be cast automatically, just as it would be when using ResultSetProvider
and storing each value into the output ResultSet.

Also convert the SetOfRecordTest example to an annotation-style example
and add an SQLAction that tests it.

Addresses issue #146."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,5c52e3ff7a00622ca9fee867652c9c673b936585,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,193,169,24,"Merge pull request #145 from feature/REL1_5_STABLE/constrainttrigger

Constraint triggers can be declared and are usable (the runtime will
deliver them; a trigger method should throw an exception to report that
a constraint would be violated); however, the TriggerData interface has
not been extended to expose any of the new contraint-trigger-specific
information to the called method."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,5c52e3ff7a00622ca9fee867652c9c673b936585,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,193,169,24,"Merge pull request #145 from feature/REL1_5_STABLE/constrainttrigger

Constraint triggers can be declared and are usable (the runtime will
deliver them; a trigger method should throw an exception to report that
a constraint would be violated); however, the TriggerData interface has
not been extended to expose any of the new contraint-trigger-specific
information to the called method."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,5c52e3ff7a00622ca9fee867652c9c673b936585,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:04:52Z,chap@anastigmatix.net,193,169,24,"Merge pull request #145 from feature/REL1_5_STABLE/constrainttrigger

Constraint triggers can be declared and are usable (the runtime will
deliver them; a trigger method should throw an exception to report that
a constraint would be violated); however, the TriggerData interface has
not been extended to expose any of the new contraint-trigger-specific
information to the called method."
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,5347925908398a5af1a6985304ca327dedbaf6d5,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,38,32,6,"Merge pull request #142 from tada/bug/REL1_5_STABLE/issue142

Enable row triggers to suppress operations."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,5347925908398a5af1a6985304ca327dedbaf6d5,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,38,32,6,"Merge pull request #142 from tada/bug/REL1_5_STABLE/issue142

Enable row triggers to suppress operations."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,5347925908398a5af1a6985304ca327dedbaf6d5,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T18:01:08Z,chap@anastigmatix.net,38,32,6,"Merge pull request #142 from tada/bug/REL1_5_STABLE/issue142

Enable row triggers to suppress operations."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,ed0e4382a837e11ccf57be0cfa613f72b48c63f8,Chapman Flack,2018-03-18T17:44:01Z,chap@anastigmatix.net,Chapman Flack,2018-03-18T17:44:01Z,chap@anastigmatix.net,2,1,1,"Merge pull request #141 from pmichalek/bug/REL1_5_STABLE/issue136

PL/Java's internal JDBC driver was forked from pgjdbc a long time ago,
and there's a lot wrong with the nativeSQL method. It gives a meaning to
backslash that isn't from the SQL or JDBC standards, it has no knowledge
of standard JDBC escapes, or the difference between standard-conforming
and e-quoted strings, or Unicode strings, or dollar-quoted strings, or
continuation of string literals. Bringing it all to spec would be far
too much change for a minor PL/Java release.

All that being said, this particular quoting issue is a simple, obvious
bug among bugs, and has been reported, so it is clearly in somebody's
way, so no objection to fixing it here, though it leaves nativeSQL() for
now only slightly less wrong."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,b40aa730e24950b4e438d65cfc762eab6203d512,Chapman Flack,2018-03-14T04:28:03Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:28:03Z,chap@anastigmatix.net,37,37,0,"Add a constraint-trigger example.

A more interesting test would be to actually try to insert 44, and
verify that the exception happens. (Oh, for the chance to use pgTAP...)."
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,2aaef63903cf0abff9ae362f345a3065e60f9749,Chapman Flack,2018-03-14T03:40:32Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:19:03Z,chap@anastigmatix.net,38,32,6,"Enable row triggers to suppress operations.

Adds to TriggerData the suppress() method suggested in issue #142."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,2aaef63903cf0abff9ae362f345a3065e60f9749,Chapman Flack,2018-03-14T03:40:32Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:19:03Z,chap@anastigmatix.net,38,32,6,"Enable row triggers to suppress operations.

Adds to TriggerData the suppress() method suggested in issue #142."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,2aaef63903cf0abff9ae362f345a3065e60f9749,Chapman Flack,2018-03-14T03:40:32Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:19:03Z,chap@anastigmatix.net,38,32,6,"Enable row triggers to suppress operations.

Adds to TriggerData the suppress() method suggested in issue #142."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,4cda8c0743f8d853b09d09f07928970caa3a2db4,Chapman Flack,2018-03-13T03:03:53Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:13:57Z,chap@anastigmatix.net,155,104,51,"Adjust per earlier discussion.

Now has enum Constraint with only the constraint-related values; its
actual omission is what indicates a non-constraint trigger. The name
fromSchema is kept (it has no analog in the PG syntax), but fromTable
is now simply from, to match the PG syntax. Semantic errors are checked.

Also some whitespace tweaks.

An example/test is still needed."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,4cda8c0743f8d853b09d09f07928970caa3a2db4,Chapman Flack,2018-03-13T03:03:53Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:13:57Z,chap@anastigmatix.net,155,104,51,"Adjust per earlier discussion.

Now has enum Constraint with only the constraint-related values; its
actual omission is what indicates a non-constraint trigger. The name
fromSchema is kept (it has no analog in the PG syntax), but fromTable
is now simply from, to match the PG syntax. Semantic errors are checked.

Also some whitespace tweaks.

An example/test is still needed."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava-so/src/main/c/Function.c,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava-so/src/main/c/Invocation.c,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava-so/src/main/c/type/Relation.c,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava-so/src/main/include/pljava/type/TriggerData.h,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,98990e444cd08f2aaa22052f264d1be4803309db,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,Chapman Flack,2018-03-14T04:11:35Z,chap@anastigmatix.net,69,61,8,Merge to catch up to last published REL1_5_STABLE.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,1a58efbcb5d6cea8716922305ff7bd0be4562d40,Petr Michálek,2018-03-12T23:59:23Z,petr.michalek@aca.cz,Petr Michálek,2018-03-12T23:59:23Z,petr.michalek@aca.cz,2,1,1,"Fix #136 SPIConnection prepareStatement doesn't recognize all parameters
when SQL combines single and double quotes"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,aa5419e852e29444ae7a8300ec4513e6dc252b12,Petr Michálek,2018-03-12T19:38:40Z,petr.michalek@aca.cz,Petr Michálek,2018-03-12T19:38:40Z,petr.michalek@aca.cz,103,79,24,"Annotations doesn't support CREATE CONSTRAINT TRIGGER and clause FROM
schema.table
#138"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,aa5419e852e29444ae7a8300ec4513e6dc252b12,Petr Michálek,2018-03-12T19:38:40Z,petr.michalek@aca.cz,Petr Michálek,2018-03-12T19:38:40Z,petr.michalek@aca.cz,103,79,24,"Annotations doesn't support CREATE CONSTRAINT TRIGGER and clause FROM
schema.table
#138"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava-so/src/main/c/Function.c,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava-so/src/main/c/Invocation.c,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava-so/src/main/c/type/Relation.c,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava-so/src/main/include/pljava/type/TriggerData.h,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,05463dd2baa4f78c651f7c4b45533c8b27b80c2a,Chapman Flack,2018-02-01T02:40:27Z,chap@anastigmatix.net,GitHub,2018-02-01T02:40:27Z,noreply@github.com,69,61,8,"Merge pull request #135 from tada/bug/REL1_5_STABLE/issue134

Accomodate upstream SPI_push/pop API changes (issue #134)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,7a8897a282eccea36a096342e8074ca74186fd35,Chapman Flack,2018-01-30T02:33:11Z,chap@anastigmatix.net,Chapman Flack,2018-01-30T02:33:11Z,chap@anastigmatix.net,9,9,0,"Document (lack of) issue #134 regression test.

An obvious place to put it, in examples/Triggers.java, won't really
help, because those all run with SPI already connected and would not
catch the bug.

This is more of a note to the future, to make such a test when there
is more of a regression test infrastructure to run tests from outside
PL/Java itself."
,pljava-so/src/main/c/Invocation.c,73175b14bd66b64122145c6035f6a6af28644ca4,Chapman Flack,2018-01-28T00:37:05Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:23Z,chap@anastigmatix.net,6,4,2,"Use SPI_result_code_string more.

While thinking of SPI and its error codes, report those
as strings rather than numeric codes in a couple more places."
,pljava-so/src/main/c/Function.c,37d15d9c180017358ca8c7149e320ef168531224,Chapman Flack,2018-01-28T00:35:27Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:06Z,chap@anastigmatix.net,54,48,6,"Adapt to PG 10 changes to SPI_push et al. (#134)

In postgres/postgres@1833f1a1c3b0e12b3ea40d49bf11898eedae5248, SPI_push
and SPI_pop are removed. They are still defined (as no-ops), so
there is no need yet to rototill PL/Java adding version checks
around uses of those. They can be removed later once PG 10 is
PL/Java's back-compatibility horizon.

However, the same change altered some other SPI behavior too.
In particular, seven SPI functions now require SPI to be connected
that did not before. PL/Java only uses one of those, SPI_modifytuple,
and only in one place. Ensure SPI is connected before it is called."
,pljava-so/src/main/c/type/Relation.c,37d15d9c180017358ca8c7149e320ef168531224,Chapman Flack,2018-01-28T00:35:27Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:06Z,chap@anastigmatix.net,54,48,6,"Adapt to PG 10 changes to SPI_push et al. (#134)

In postgres/postgres@1833f1a1c3b0e12b3ea40d49bf11898eedae5248, SPI_push
and SPI_pop are removed. They are still defined (as no-ops), so
there is no need yet to rototill PL/Java adding version checks
around uses of those. They can be removed later once PG 10 is
PL/Java's back-compatibility horizon.

However, the same change altered some other SPI behavior too.
In particular, seven SPI functions now require SPI to be connected
that did not before. PL/Java only uses one of those, SPI_modifytuple,
and only in one place. Ensure SPI is connected before it is called."
,pljava-so/src/main/include/pljava/type/TriggerData.h,37d15d9c180017358ca8c7149e320ef168531224,Chapman Flack,2018-01-28T00:35:27Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:06Z,chap@anastigmatix.net,54,48,6,"Adapt to PG 10 changes to SPI_push et al. (#134)

In postgres/postgres@1833f1a1c3b0e12b3ea40d49bf11898eedae5248, SPI_push
and SPI_pop are removed. They are still defined (as no-ops), so
there is no need yet to rototill PL/Java adding version checks
around uses of those. They can be removed later once PG 10 is
PL/Java's back-compatibility horizon.

However, the same change altered some other SPI behavior too.
In particular, seven SPI functions now require SPI to be connected
that did not before. PL/Java only uses one of those, SPI_modifytuple,
and only in one place. Ensure SPI is connected before it is called."
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,37d15d9c180017358ca8c7149e320ef168531224,Chapman Flack,2018-01-28T00:35:27Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:06Z,chap@anastigmatix.net,54,48,6,"Adapt to PG 10 changes to SPI_push et al. (#134)

In postgres/postgres@1833f1a1c3b0e12b3ea40d49bf11898eedae5248, SPI_push
and SPI_pop are removed. They are still defined (as no-ops), so
there is no need yet to rototill PL/Java adding version checks
around uses of those. They can be removed later once PG 10 is
PL/Java's back-compatibility horizon.

However, the same change altered some other SPI behavior too.
In particular, seven SPI functions now require SPI to be connected
that did not before. PL/Java only uses one of those, SPI_modifytuple,
and only in one place. Ensure SPI is connected before it is called."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,37d15d9c180017358ca8c7149e320ef168531224,Chapman Flack,2018-01-28T00:35:27Z,chap@anastigmatix.net,Chapman Flack,2018-01-28T00:57:06Z,chap@anastigmatix.net,54,48,6,"Adapt to PG 10 changes to SPI_push et al. (#134)

In postgres/postgres@1833f1a1c3b0e12b3ea40d49bf11898eedae5248, SPI_push
and SPI_pop are removed. They are still defined (as no-ops), so
there is no need yet to rototill PL/Java adding version checks
around uses of those. They can be removed later once PG 10 is
PL/Java's back-compatibility horizon.

However, the same change altered some other SPI behavior too.
In particular, seven SPI functions now require SPI to be connected
that did not before. PL/Java only uses one of those, SPI_modifytuple,
and only in one place. Ensure SPI is connected before it is called."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,efd6af52dc1353fe4e9ef485703132f5543186f3,Chapman Flack,2017-06-20T03:55:08Z,chap@anastigmatix.net,Chapman Flack,2017-06-20T03:55:08Z,chap@anastigmatix.net,1,1,0,"Poke migration-management versions for 1.5.1-BETA1.

-packaging/build.xml already makes an update .sql from 1.5.0,
the last released version. No change needed before this release.

A change to past practice in updating the SchemaVariant list
in InstallHelper.java. There has been no change to the schema,
so may as well minimize changes by continuing to call it
the 1.5.0 schema (the first full release to feature it), and
adding 1_5_1_BETA1 only as an alias to it."
,pljava/src/main/java/org/postgresql/pljava/internal/ELogHandler.java,f7d97de53c576335268a7dcae161e7fad6343cf1,Chapman Flack,2017-06-20T03:30:31Z,chap@anastigmatix.net,GitHub,2017-06-20T03:30:31Z,noreply@github.com,32,27,5,"Merge pull request #126 from tada/bug/REL1_5_STABLE/issue125

Honor client_min_messages too at PL/Java startup."
,pljava/src/main/java/org/postgresql/pljava/internal/ELogHandler.java,0d80a3ee9860ac561ae231cd7d16dee43a48172e,Chapman Flack,2017-06-20T02:13:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-20T02:50:58Z,chap@anastigmatix.net,32,27,5,"Honor client_min_messages too at PL/Java startup.

Fix the easier complaint in issue #125; if Java will be summarily
discarding log messages finer than a level derived from PostgreSQL's
settings just once at PL/Java startup, at least derive the level
from the finer of log_min_messages and client_min_messages, rather
than from log_min_messages alone."
,pljava-so/src/main/c/Backend.c,6c1d355b62b4036c97ddedddb3070ebf190ec92f,Chapman Flack,2017-06-19T15:50:14Z,chap@anastigmatix.net,GitHub,2017-06-19T15:50:14Z,noreply@github.com,340,312,28,"Merge pull request #124 from tada/feature/REL1_5_STABLE/packagingsupport

New build/install options and documentation for downstream packagers"
,pljava-so/src/main/c/Backend.c,a6fe9b9abefc76b595b334563ed720e1c957160b,Chapman Flack,2017-06-03T16:17:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-14T02:46:54Z,chap@anastigmatix.net,56,49,7,"Fulfill old todo for setting a libjvm default.

By passing -Dpljava.libjvmdefault=... on the mvn command line,
the downstream maintainer of a packaging system for a platform
where the standard Java install location is known can build
a package where the default for pljava.libjvm_location is
usually right."
,pljava-so/src/main/c/type/LargeObject.c,6255e91e9e8111e88035c18f88132d6295759f44,Chapman Flack,2017-06-14T02:17:18Z,chap@anastigmatix.net,GitHub,2017-06-14T02:17:18Z,noreply@github.com,677,0,677,"Merge pull request #123 from tada/bug/REL1_5_STABLE/loapi

Do away with never-documented, long-broken LargeObject code."
,pljava-so/src/main/c/type/Type.c,6255e91e9e8111e88035c18f88132d6295759f44,Chapman Flack,2017-06-14T02:17:18Z,chap@anastigmatix.net,GitHub,2017-06-14T02:17:18Z,noreply@github.com,677,0,677,"Merge pull request #123 from tada/bug/REL1_5_STABLE/loapi

Do away with never-documented, long-broken LargeObject code."
,pljava-so/src/main/include/pljava/type/LargeObject.h,6255e91e9e8111e88035c18f88132d6295759f44,Chapman Flack,2017-06-14T02:17:18Z,chap@anastigmatix.net,GitHub,2017-06-14T02:17:18Z,noreply@github.com,677,0,677,"Merge pull request #123 from tada/bug/REL1_5_STABLE/loapi

Do away with never-documented, long-broken LargeObject code."
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,6255e91e9e8111e88035c18f88132d6295759f44,Chapman Flack,2017-06-14T02:17:18Z,chap@anastigmatix.net,GitHub,2017-06-14T02:17:18Z,noreply@github.com,677,0,677,"Merge pull request #123 from tada/bug/REL1_5_STABLE/loapi

Do away with never-documented, long-broken LargeObject code."
,pljava-so/src/main/c/type/LargeObject.c,d77d8b21f28289de6c6fc7ef56faef0b26d1349f,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,677,0,677,"Do away with never-documented LargeObject code.

In the run-up to releasing 1.5.0, the code to do with large objects
was looked over in a very conservative and cautious way, as fits
code that was never documented or presented as API and didn't have
any test coverage, with little way of knowing whether some client
code somewhere in the wild might have been developed around it.
So, it got carefully updated to 64-bit offsets, and even had a
vulnerability reported because it hadn't been updated to honor
the object access controls added in 9.0.

What all that very conservative analysis failed to notice was,
thanks to a change made back in 77bfc34, coupled with the absence
of test coverage, it has been about eleven years since the last
chance anyone ever had of doing anything useful with a LargeObject
instance. That makes the decision to do away with it much easier.

In all the PostgreSQL versions PL/Java currently supports, all the
functions needed to manipulate large objects are already exposed in
SQL and usable through the JDBC/SPI, without any specific effort
needed in PL/Java. For programming convenience, some later version
(after Java 7 becomes the minimum requirement) could add a simple
utility method to turn an integer LO fd from lo_open into a
SeekableByteChannel that could then be used without further trips
through SPI, but even that would be about optimization and convenience,
not functionality."
,pljava-so/src/main/c/type/Type.c,d77d8b21f28289de6c6fc7ef56faef0b26d1349f,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,677,0,677,"Do away with never-documented LargeObject code.

In the run-up to releasing 1.5.0, the code to do with large objects
was looked over in a very conservative and cautious way, as fits
code that was never documented or presented as API and didn't have
any test coverage, with little way of knowing whether some client
code somewhere in the wild might have been developed around it.
So, it got carefully updated to 64-bit offsets, and even had a
vulnerability reported because it hadn't been updated to honor
the object access controls added in 9.0.

What all that very conservative analysis failed to notice was,
thanks to a change made back in 77bfc34, coupled with the absence
of test coverage, it has been about eleven years since the last
chance anyone ever had of doing anything useful with a LargeObject
instance. That makes the decision to do away with it much easier.

In all the PostgreSQL versions PL/Java currently supports, all the
functions needed to manipulate large objects are already exposed in
SQL and usable through the JDBC/SPI, without any specific effort
needed in PL/Java. For programming convenience, some later version
(after Java 7 becomes the minimum requirement) could add a simple
utility method to turn an integer LO fd from lo_open into a
SeekableByteChannel that could then be used without further trips
through SPI, but even that would be about optimization and convenience,
not functionality."
,pljava-so/src/main/include/pljava/type/LargeObject.h,d77d8b21f28289de6c6fc7ef56faef0b26d1349f,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,677,0,677,"Do away with never-documented LargeObject code.

In the run-up to releasing 1.5.0, the code to do with large objects
was looked over in a very conservative and cautious way, as fits
code that was never documented or presented as API and didn't have
any test coverage, with little way of knowing whether some client
code somewhere in the wild might have been developed around it.
So, it got carefully updated to 64-bit offsets, and even had a
vulnerability reported because it hadn't been updated to honor
the object access controls added in 9.0.

What all that very conservative analysis failed to notice was,
thanks to a change made back in 77bfc34, coupled with the absence
of test coverage, it has been about eleven years since the last
chance anyone ever had of doing anything useful with a LargeObject
instance. That makes the decision to do away with it much easier.

In all the PostgreSQL versions PL/Java currently supports, all the
functions needed to manipulate large objects are already exposed in
SQL and usable through the JDBC/SPI, without any specific effort
needed in PL/Java. For programming convenience, some later version
(after Java 7 becomes the minimum requirement) could add a simple
utility method to turn an integer LO fd from lo_open into a
SeekableByteChannel that could then be used without further trips
through SPI, but even that would be about optimization and convenience,
not functionality."
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,d77d8b21f28289de6c6fc7ef56faef0b26d1349f,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,Chapman Flack,2017-06-13T02:50:04Z,chap@anastigmatix.net,677,0,677,"Do away with never-documented LargeObject code.

In the run-up to releasing 1.5.0, the code to do with large objects
was looked over in a very conservative and cautious way, as fits
code that was never documented or presented as API and didn't have
any test coverage, with little way of knowing whether some client
code somewhere in the wild might have been developed around it.
So, it got carefully updated to 64-bit offsets, and even had a
vulnerability reported because it hadn't been updated to honor
the object access controls added in 9.0.

What all that very conservative analysis failed to notice was,
thanks to a change made back in 77bfc34, coupled with the absence
of test coverage, it has been about eleven years since the last
chance anyone ever had of doing anything useful with a LargeObject
instance. That makes the decision to do away with it much easier.

In all the PostgreSQL versions PL/Java currently supports, all the
functions needed to manipulate large objects are already exposed in
SQL and usable through the JDBC/SPI, without any specific effort
needed in PL/Java. For programming convenience, some later version
(after Java 7 becomes the minimum requirement) could add a simple
utility method to turn an integer LO fd from lo_open into a
SeekableByteChannel that could then be used without further trips
through SPI, but even that would be about optimization and convenience,
not functionality."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,6707aa458ab2ae91d016280786bf9680e6ce277e,Chapman Flack,2017-06-05T19:05:49Z,chap@anastigmatix.net,GitHub,2017-06-05T19:05:49Z,noreply@github.com,12,6,6,"Merge pull request #121 from tada/chore/REL1_5_STABLE/debuglevels

Keep making DEBUG1 quieter."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,6707aa458ab2ae91d016280786bf9680e6ce277e,Chapman Flack,2017-06-05T19:05:49Z,chap@anastigmatix.net,GitHub,2017-06-05T19:05:49Z,noreply@github.com,12,6,6,"Merge pull request #121 from tada/chore/REL1_5_STABLE/debuglevels

Keep making DEBUG1 quieter."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,6707aa458ab2ae91d016280786bf9680e6ce277e,Chapman Flack,2017-06-05T19:05:49Z,chap@anastigmatix.net,GitHub,2017-06-05T19:05:49Z,noreply@github.com,12,6,6,"Merge pull request #121 from tada/chore/REL1_5_STABLE/debuglevels

Keep making DEBUG1 quieter."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,114a5bda113effa6ebed1ba7f0546d52fee1cbbc,Chapman Flack,2017-06-03T22:40:44Z,chap@anastigmatix.net,Chapman Flack,2017-06-04T19:22:38Z,chap@anastigmatix.net,12,6,6,"Keep making DEBUG1 quieter.

These sites were missed in commit 1eb3bd8, trying to get the
PL/Java-loaded-versions announcement to be the only thing at DEBUG1."
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,114a5bda113effa6ebed1ba7f0546d52fee1cbbc,Chapman Flack,2017-06-03T22:40:44Z,chap@anastigmatix.net,Chapman Flack,2017-06-04T19:22:38Z,chap@anastigmatix.net,12,6,6,"Keep making DEBUG1 quieter.

These sites were missed in commit 1eb3bd8, trying to get the
PL/Java-loaded-versions announcement to be the only thing at DEBUG1."
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,114a5bda113effa6ebed1ba7f0546d52fee1cbbc,Chapman Flack,2017-06-03T22:40:44Z,chap@anastigmatix.net,Chapman Flack,2017-06-04T19:22:38Z,chap@anastigmatix.net,12,6,6,"Keep making DEBUG1 quieter.

These sites were missed in commit 1eb3bd8, trying to get the
PL/Java-loaded-versions announcement to be the only thing at DEBUG1."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/c/Backend.c,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/c/Function.c,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/c/Invocation.c,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/c/type/Time.c,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/c/type/Timestamp.c,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/include/pljava/Backend.h,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-so/src/main/include/pljava/Invocation.h,70d4c39b1af61be318d72c662c0984b13616cd78,Chapman Flack,2017-06-04T19:15:32Z,chap@anastigmatix.net,GitHub,2017-06-04T19:15:32Z,noreply@github.com,269,236,33,"Merge pull request #120 from tada/trackpg/REL1_5_STABLE/pg10

Changes to accommodate PostgreSQL 10."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,6c8ecbaee5900866e76bf54e1810feddbbdba015,Chapman Flack,2017-06-02T04:28:42Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:31Z,chap@anastigmatix.net,60,58,2,"Add example for trigger transition tables.

Expand the Triggers example so the trigger actually does something,
and add a new trigger to test transition table functionality in
PostgreSQL 10 or later."
,pljava-so/src/main/c/Function.c,adf15afd407cafbe7f0ea6d2a5da48913a1d6221,Chapman Flack,2017-06-03T15:49:56Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:31Z,chap@anastigmatix.net,37,35,2,"Register a trigger's transition tables.

The magic that makes tableOld/tableNew appear to exist under
the chosen names, for purposes of queries in SPI, happens when
SPI_register_trigger_data is called, passing the TriggerData
struct that was passed to the handler function, and that struct
has the chosen names and the tuplestores.

PL/Java doesn't do SPI_connect unless and until the called Java
function wants to use the jdbc:default:connection, at which point
the connection is created in Invocation.c and remembered for the
current level. So, that's a fine place to call SPI_register_trigger_data.
The TriggerData struct simply needs to be stashed in the current
Invocation at the time of function entry, so it can be passed to the
SPI function when the time comes."
,pljava-so/src/main/c/Invocation.c,adf15afd407cafbe7f0ea6d2a5da48913a1d6221,Chapman Flack,2017-06-03T15:49:56Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:31Z,chap@anastigmatix.net,37,35,2,"Register a trigger's transition tables.

The magic that makes tableOld/tableNew appear to exist under
the chosen names, for purposes of queries in SPI, happens when
SPI_register_trigger_data is called, passing the TriggerData
struct that was passed to the handler function, and that struct
has the chosen names and the tuplestores.

PL/Java doesn't do SPI_connect unless and until the called Java
function wants to use the jdbc:default:connection, at which point
the connection is created in Invocation.c and remembered for the
current level. So, that's a fine place to call SPI_register_trigger_data.
The TriggerData struct simply needs to be stashed in the current
Invocation at the time of function entry, so it can be passed to the
SPI function when the time comes."
,pljava-so/src/main/include/pljava/Invocation.h,adf15afd407cafbe7f0ea6d2a5da48913a1d6221,Chapman Flack,2017-06-03T15:49:56Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:31Z,chap@anastigmatix.net,37,35,2,"Register a trigger's transition tables.

The magic that makes tableOld/tableNew appear to exist under
the chosen names, for purposes of queries in SPI, happens when
SPI_register_trigger_data is called, passing the TriggerData
struct that was passed to the handler function, and that struct
has the chosen names and the tuplestores.

PL/Java doesn't do SPI_connect unless and until the called Java
function wants to use the jdbc:default:connection, at which point
the connection is created in Invocation.c and remembered for the
current level. So, that's a fine place to call SPI_register_trigger_data.
The TriggerData struct simply needs to be stashed in the current
Invocation at the time of function entry, so it can be passed to the
SPI function when the time comes."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,e9f1de099b4c962875f86b44e26f6cf66b1e128c,Chapman Flack,2017-06-03T15:52:25Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:25Z,chap@anastigmatix.net,84,83,1,"Generate SQL for trigger transition tables.

To accommodate PotgreSQL 10 transition tables, allow the Trigger
annotation to specify tableOld and/or tableNew, check that they
are allowed (trigger must be AFTER and include events capable of
populating the table), and generate the corresponding REFERENCING
OLD TABLE AS ... NEW TABLE AS ... in the trigger declaration."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,e9f1de099b4c962875f86b44e26f6cf66b1e128c,Chapman Flack,2017-06-03T15:52:25Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:52:25Z,chap@anastigmatix.net,84,83,1,"Generate SQL for trigger transition tables.

To accommodate PotgreSQL 10 transition tables, allow the Trigger
annotation to specify tableOld and/or tableNew, check that they
are allowed (trigger must be AFTER and include events capable of
populating the table), and generate the corresponding REFERENCING
OLD TABLE AS ... NEW TABLE AS ... in the trigger declaration."
,pljava-so/src/main/c/Backend.c,e0928d7f76ff419768bd5d40e0415a73bb95956c,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,86,59,27,"Accommodate PG10 demise of float datetimes.

Because PostgreSQL still has an integer_datetimes GUC (it's just
always true now), the obvious approach would be ""do nothing"", and
the integer code would always be selected, and the floating code
would be dead. However, the dead code now produces compiler warnings
about implicit declaration of floor() and rint(); presumably, we were
relying on math.h being included in some PostgreSQL header where it
now is not (though I am drawing a blank on where that changed; it's
not in the same upstream commit that desupported float datetimes).
Given that, the cleanest solution here is to conditionally compile
the float-time code only for PG < 10, and one day prune it completely
once the backward-compatibility goal reaches 10."
,pljava-so/src/main/c/type/Time.c,e0928d7f76ff419768bd5d40e0415a73bb95956c,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,86,59,27,"Accommodate PG10 demise of float datetimes.

Because PostgreSQL still has an integer_datetimes GUC (it's just
always true now), the obvious approach would be ""do nothing"", and
the integer code would always be selected, and the floating code
would be dead. However, the dead code now produces compiler warnings
about implicit declaration of floor() and rint(); presumably, we were
relying on math.h being included in some PostgreSQL header where it
now is not (though I am drawing a blank on where that changed; it's
not in the same upstream commit that desupported float datetimes).
Given that, the cleanest solution here is to conditionally compile
the float-time code only for PG < 10, and one day prune it completely
once the backward-compatibility goal reaches 10."
,pljava-so/src/main/c/type/Timestamp.c,e0928d7f76ff419768bd5d40e0415a73bb95956c,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,86,59,27,"Accommodate PG10 demise of float datetimes.

Because PostgreSQL still has an integer_datetimes GUC (it's just
always true now), the obvious approach would be ""do nothing"", and
the integer code would always be selected, and the floating code
would be dead. However, the dead code now produces compiler warnings
about implicit declaration of floor() and rint(); presumably, we were
relying on math.h being included in some PostgreSQL header where it
now is not (though I am drawing a blank on where that changed; it's
not in the same upstream commit that desupported float datetimes).
Given that, the cleanest solution here is to conditionally compile
the float-time code only for PG < 10, and one day prune it completely
once the backward-compatibility goal reaches 10."
,pljava-so/src/main/include/pljava/Backend.h,e0928d7f76ff419768bd5d40e0415a73bb95956c,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,Chapman Flack,2017-06-03T15:29:39Z,chap@anastigmatix.net,86,59,27,"Accommodate PG10 demise of float datetimes.

Because PostgreSQL still has an integer_datetimes GUC (it's just
always true now), the obvious approach would be ""do nothing"", and
the integer code would always be selected, and the floating code
would be dead. However, the dead code now produces compiler warnings
about implicit declaration of floor() and rint(); presumably, we were
relying on math.h being included in some PostgreSQL header where it
now is not (though I am drawing a blank on where that changed; it's
not in the same upstream commit that desupported float datetimes).
Given that, the cleanest solution here is to conditionally compile
the float-time code only for PG < 10, and one day prune it completely
once the backward-compatibility goal reaches 10."
,pljava-so/src/main/c/Backend.c,21c80ca1311e756dd3465d4bbc5e67722211b9e6,Chapman Flack,2017-05-15T16:28:11Z,chap@anastigmatix.net,GitHub,2017-05-15T16:28:11Z,noreply@github.com,174,126,48,"Merge pull request #119 from tada/bug/REL1_5_STABLE/pg_upgrade

Address #117 and document upgrade procedures."
,pljava-so/src/main/c/InstallHelper.c,21c80ca1311e756dd3465d4bbc5e67722211b9e6,Chapman Flack,2017-05-15T16:28:11Z,chap@anastigmatix.net,GitHub,2017-05-15T16:28:11Z,noreply@github.com,174,126,48,"Merge pull request #119 from tada/bug/REL1_5_STABLE/pg_upgrade

Address #117 and document upgrade procedures."
,pljava-so/src/main/include/pljava/InstallHelper.h,21c80ca1311e756dd3465d4bbc5e67722211b9e6,Chapman Flack,2017-05-15T16:28:11Z,chap@anastigmatix.net,GitHub,2017-05-15T16:28:11Z,noreply@github.com,174,126,48,"Merge pull request #119 from tada/bug/REL1_5_STABLE/pg_upgrade

Address #117 and document upgrade procedures."
,pljava-so/src/main/c/Backend.c,e05905560f9b738fec934d19ece960a0e22dc4e3,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,37,25,12,"Suppress eager initialization during pg_upgrade.

During pg_upgrade, dynamic libraries are loaded to confirm
they exist in the new installation, but this happens early, before
pg_upgrade has copied the old schema over. PL/Java should not
react to the absence of its schema by creating one (as it would during
a fresh install), because pg_upgrade is expecting to handle that.

Reported in #117."
,pljava-so/src/main/c/InstallHelper.c,e05905560f9b738fec934d19ece960a0e22dc4e3,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,37,25,12,"Suppress eager initialization during pg_upgrade.

During pg_upgrade, dynamic libraries are loaded to confirm
they exist in the new installation, but this happens early, before
pg_upgrade has copied the old schema over. PL/Java should not
react to the absence of its schema by creating one (as it would during
a fresh install), because pg_upgrade is expecting to handle that.

Reported in #117."
,pljava-so/src/main/include/pljava/InstallHelper.h,e05905560f9b738fec934d19ece960a0e22dc4e3,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,Chapman Flack,2017-04-21T01:48:27Z,chap@anastigmatix.net,37,25,12,"Suppress eager initialization during pg_upgrade.

During pg_upgrade, dynamic libraries are loaded to confirm
they exist in the new installation, but this happens early, before
pg_upgrade has copied the old schema over. PL/Java should not
react to the absence of its schema by creating one (as it would during
a fresh install), because pg_upgrade is expecting to handle that.

Reported in #117."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,4b053839cdacfbfed5f58e132529af9ad3ef6f5e,Chapman Flack,2017-04-20T02:42:17Z,chap@anastigmatix.net,Chapman Flack,2017-04-20T02:42:17Z,chap@anastigmatix.net,5,3,2,"Clarify currentRow in ResultSetProvider.

Fill in the missing explanation (reported in issue #115) of
the currentRow parameter in ResultSetProvider.

Trivial doc fix, pushing directly."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/Backend.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/InstallHelper.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/SPI.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/type/Composite.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/type/Portal.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/type/TupleDesc.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/type/TupleTable.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/type/Type.c,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/include/pljava/InstallHelper.h,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/include/pljava/pljava.h,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/include/pljava/type/Type.h,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/include/pljava/type/Type_priv.h,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,27bfdd9213029e8d4276f6c60e87bd727f92a4bf,Chapman Flack,2016-10-31T16:23:01Z,chap@anastigmatix.net,GitHub,2016-10-31T16:23:01Z,noreply@github.com,692,510,182,"Merge pull request #109 from tada/trackpg/REL1_5_STABLE/pg96

Bring PostgreSQL 9.6 compatibility."
,pljava-so/src/main/c/InstallHelper.c,97ddb5efe7e75840dbee7606e13dfa1faf455bbc,Chapman Flack,2016-10-30T22:06:48Z,chap@anastigmatix.net,Chapman Flack,2016-10-30T22:06:48Z,chap@anastigmatix.net,23,17,6,"Appease vengeful gods of back compatibility.

You can have a background worker process starting in 9.3, but it
can't find out who it's authenticated as until 9.5...."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,2fb5a24b2d8aba0a13a5818867143bb03eceaad8,Chapman Flack,2016-10-30T03:03:05Z,chap@anastigmatix.net,Chapman Flack,2016-10-30T03:03:05Z,chap@anastigmatix.net,104,99,5,"Out with my pessimism; PARALLEL SAFE works fine.

A simple test with a PL/Java function declared PARALLEL SAFE,
and used in a parallel query, did just what it says on the tin,
on the first try.

There may still be cases lurking in which PL/Java's inner workings
would do something a SAFE or RESTRICTED function isn't supposed to
do, but I had imagined there would be problems galore and there aren't,
so the capability may as well be announced and documented."
,pljava-so/src/main/c/Backend.c,e5ae7fd0ac2692974f5831458b971b95c0d7f0b0,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,127,112,15,"Initialize more lazily in background workers.

In a background worker (in particular, one running ParallelWorkerMain),
PL/Java's _PG_init can get called even if the parallel query being
executed makes no reference to PL/Java functions. That's because
ParallelWorkerMain makes sure the same libraries are loaded that were
present in the lead process, so if it had loaded PL/Java at any time,
it gets loaded in the background worker ... quite early, and _PG_init
gets called before much of the state it wants to look at has been
set up.

Detect that case and bail from the initsequencer as soon as possible
(right after defining the custom GUCs), leaving all the rest to be
completed when (if!) any actual call arrives at the call handler.

This prevents a baffling failure in parallel queries that make no use
of PL/Java; even better, it also avoids starting JVMs unnecessarily in
parallel queries that aren't going to use them."
,pljava-so/src/main/c/InstallHelper.c,e5ae7fd0ac2692974f5831458b971b95c0d7f0b0,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,127,112,15,"Initialize more lazily in background workers.

In a background worker (in particular, one running ParallelWorkerMain),
PL/Java's _PG_init can get called even if the parallel query being
executed makes no reference to PL/Java functions. That's because
ParallelWorkerMain makes sure the same libraries are loaded that were
present in the lead process, so if it had loaded PL/Java at any time,
it gets loaded in the background worker ... quite early, and _PG_init
gets called before much of the state it wants to look at has been
set up.

Detect that case and bail from the initsequencer as soon as possible
(right after defining the custom GUCs), leaving all the rest to be
completed when (if!) any actual call arrives at the call handler.

This prevents a baffling failure in parallel queries that make no use
of PL/Java; even better, it also avoids starting JVMs unnecessarily in
parallel queries that aren't going to use them."
,pljava-so/src/main/include/pljava/InstallHelper.h,e5ae7fd0ac2692974f5831458b971b95c0d7f0b0,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,Chapman Flack,2016-10-27T06:02:46Z,chap@anastigmatix.net,127,112,15,"Initialize more lazily in background workers.

In a background worker (in particular, one running ParallelWorkerMain),
PL/Java's _PG_init can get called even if the parallel query being
executed makes no reference to PL/Java functions. That's because
ParallelWorkerMain makes sure the same libraries are loaded that were
present in the lead process, so if it had loaded PL/Java at any time,
it gets loaded in the background worker ... quite early, and _PG_init
gets called before much of the state it wants to look at has been
set up.

Detect that case and bail from the initsequencer as soon as possible
(right after defining the custom GUCs), leaving all the rest to be
completed when (if!) any actual call arrives at the call handler.

This prevents a baffling failure in parallel queries that make no use
of PL/Java; even better, it also avoids starting JVMs unnecessarily in
parallel queries that aren't going to use them."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,c8a91f78f8ef228791aa180e6c0fc2c2d49e2e72,Chapman Flack,2016-10-26T03:34:17Z,chap@anastigmatix.net,Chapman Flack,2016-10-26T03:34:17Z,chap@anastigmatix.net,34,32,2,"Teach SQL generator about PARALLEL declaration.

For now, it will freely accept, and generate the right syntax for,
any of parallel={UNSAFE,RESTRICTED,SAFE}. The API docs explain why
anything besides UNSAFE is probably a dangerous lie, but the generator
does no enforcement for now."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,c8a91f78f8ef228791aa180e6c0fc2c2d49e2e72,Chapman Flack,2016-10-26T03:34:17Z,chap@anastigmatix.net,Chapman Flack,2016-10-26T03:34:17Z,chap@anastigmatix.net,34,32,2,"Teach SQL generator about PARALLEL declaration.

For now, it will freely accept, and generate the right syntax for,
any of parallel={UNSAFE,RESTRICTED,SAFE}. The API docs explain why
anything besides UNSAFE is probably a dangerous lie, but the generator
does no enforcement for now."
,pljava-so/src/main/c/SPI.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/Composite.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/Portal.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/TupleDesc.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/TupleTable.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/Type.c,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/include/pljava/pljava.h,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/include/pljava/type/Type.h,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/include/pljava/type/Type_priv.h,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,5270b7bb680af94cd9aa68438650f5384dae2ab7,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T05:21:31Z,chap@anastigmatix.net,199,131,68,"Copyright notice in files just touched.

Some files still have notices predating the explicit BSD-style one
introduced in 2013. Update it in the files this branch has touched."
,pljava-so/src/main/c/type/TupleTable.c,0dc6c81a17833d09b0511513371353b37cb644b3,Chapman Flack,2016-10-25T02:37:58Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,10,9,1,"Handle widening of SPITupleTable .alloced and .free.

Not many choices available here. Wider-than-32-bit array indices
in Java seem as far off as ever, so without reimplementing TupleTable
to do something else besides copying the whole megillah into a Java
array, there is no choice but to check and report a suitable error if
the table is too big."
,pljava-so/src/main/c/type/Composite.c,d3113da8338b131fe06ca142bbe2becf0de67445,Chapman Flack,2016-10-25T02:11:22Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,30,23,7,"Handle the widening of FuncCallContext's call_cntr.

This one is a bit stickier, because the value is passed to Java code
that implements ResultSetProvider, an interface in pljava-api. The
signature for assignRowValues can't just be changed.

Instead, for now, a ResultSetProvider is limited to returning INT_MAX
rows, but the limit is checked to ensure a predictable failure.

For the future, in the Java 8 world, the ResultSetProvider interface
could grow a default method largeAssignRowValues that takes a long
row number; the Java 8 default implementation would just signal the
same error, and classes implementing the old interface won't break.
Alas, PL/Java isn't committed to supporting only Java 8 yet.

In fact, the same thing could be done on the quiet: PL/Java could check
whether the class implementing ResultSetProvider happens to have a
largeAssignRowValues method with the right signature, and use it if
present. It would simply have to be covered in documentation, and not
formally declared in the interface until the Java support bar moves to
Java 8.

All of that is future work - this change merely checks and enforces
an INT_MAX limit."
,pljava-so/src/main/c/type/Type.c,d3113da8338b131fe06ca142bbe2becf0de67445,Chapman Flack,2016-10-25T02:11:22Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,30,23,7,"Handle the widening of FuncCallContext's call_cntr.

This one is a bit stickier, because the value is passed to Java code
that implements ResultSetProvider, an interface in pljava-api. The
signature for assignRowValues can't just be changed.

Instead, for now, a ResultSetProvider is limited to returning INT_MAX
rows, but the limit is checked to ensure a predictable failure.

For the future, in the Java 8 world, the ResultSetProvider interface
could grow a default method largeAssignRowValues that takes a long
row number; the Java 8 default implementation would just signal the
same error, and classes implementing the old interface won't break.
Alas, PL/Java isn't committed to supporting only Java 8 yet.

In fact, the same thing could be done on the quiet: PL/Java could check
whether the class implementing ResultSetProvider happens to have a
largeAssignRowValues method with the right signature, and use it if
present. It would simply have to be covered in documentation, and not
formally declared in the interface until the Java support bar moves to
Java 8.

All of that is future work - this change merely checks and enforces
an INT_MAX limit."
,pljava-so/src/main/include/pljava/pljava.h,d3113da8338b131fe06ca142bbe2becf0de67445,Chapman Flack,2016-10-25T02:11:22Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,30,23,7,"Handle the widening of FuncCallContext's call_cntr.

This one is a bit stickier, because the value is passed to Java code
that implements ResultSetProvider, an interface in pljava-api. The
signature for assignRowValues can't just be changed.

Instead, for now, a ResultSetProvider is limited to returning INT_MAX
rows, but the limit is checked to ensure a predictable failure.

For the future, in the Java 8 world, the ResultSetProvider interface
could grow a default method largeAssignRowValues that takes a long
row number; the Java 8 default implementation would just signal the
same error, and classes implementing the old interface won't break.
Alas, PL/Java isn't committed to supporting only Java 8 yet.

In fact, the same thing could be done on the quiet: PL/Java could check
whether the class implementing ResultSetProvider happens to have a
largeAssignRowValues method with the right signature, and use it if
present. It would simply have to be covered in documentation, and not
formally declared in the interface until the Java support bar moves to
Java 8.

All of that is future work - this change merely checks and enforces
an INT_MAX limit."
,pljava-so/src/main/include/pljava/type/Type.h,d3113da8338b131fe06ca142bbe2becf0de67445,Chapman Flack,2016-10-25T02:11:22Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,30,23,7,"Handle the widening of FuncCallContext's call_cntr.

This one is a bit stickier, because the value is passed to Java code
that implements ResultSetProvider, an interface in pljava-api. The
signature for assignRowValues can't just be changed.

Instead, for now, a ResultSetProvider is limited to returning INT_MAX
rows, but the limit is checked to ensure a predictable failure.

For the future, in the Java 8 world, the ResultSetProvider interface
could grow a default method largeAssignRowValues that takes a long
row number; the Java 8 default implementation would just signal the
same error, and classes implementing the old interface won't break.
Alas, PL/Java isn't committed to supporting only Java 8 yet.

In fact, the same thing could be done on the quiet: PL/Java could check
whether the class implementing ResultSetProvider happens to have a
largeAssignRowValues method with the right signature, and use it if
present. It would simply have to be covered in documentation, and not
formally declared in the interface until the Java support bar moves to
Java 8.

All of that is future work - this change merely checks and enforces
an INT_MAX limit."
,pljava-so/src/main/include/pljava/type/Type_priv.h,d3113da8338b131fe06ca142bbe2becf0de67445,Chapman Flack,2016-10-25T02:11:22Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,30,23,7,"Handle the widening of FuncCallContext's call_cntr.

This one is a bit stickier, because the value is passed to Java code
that implements ResultSetProvider, an interface in pljava-api. The
signature for assignRowValues can't just be changed.

Instead, for now, a ResultSetProvider is limited to returning INT_MAX
rows, but the limit is checked to ensure a predictable failure.

For the future, in the Java 8 world, the ResultSetProvider interface
could grow a default method largeAssignRowValues that takes a long
row number; the Java 8 default implementation would just signal the
same error, and classes implementing the old interface won't break.
Alas, PL/Java isn't committed to supporting only Java 8 yet.

In fact, the same thing could be done on the quiet: PL/Java could check
whether the class implementing ResultSetProvider happens to have a
largeAssignRowValues method with the right signature, and use it if
present. It would simply have to be covered in documentation, and not
formally declared in the interface until the Java support bar moves to
Java 8.

All of that is future work - this change merely checks and enforces
an INT_MAX limit."
,pljava-so/src/main/c/type/Portal.c,4024bac74507ebb08b2825b24c9923a7b2b1480e,Chapman Flack,2016-10-25T00:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,60,13,47,"Handle widening of portalPos and demise of posOverflow.

No need for version conditionals around isPosOverflow: it isn't in
an API class, and nothing in this code base uses it, so out it goes.

This eliminates the other compile-time error that was blocking
compilation for PG 9.6, but it's not the last thing to have had
its width changed."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,4024bac74507ebb08b2825b24c9923a7b2b1480e,Chapman Flack,2016-10-25T00:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,60,13,47,"Handle widening of portalPos and demise of posOverflow.

No need for version conditionals around isPosOverflow: it isn't in
an API class, and nothing in this code base uses it, so out it goes.

This eliminates the other compile-time error that was blocking
compilation for PG 9.6, but it's not the last thing to have had
its width changed."
,pljava-so/src/main/c/SPI.c,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava-so/src/main/c/type/Portal.c,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,c32911532cdb9243e15c61d36fc81da95d264fea,Chapman Flack,2016-10-25T00:02:01Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,119,81,38,"Handle the PG 9.6 widening of SPI_processed.

Includes a start on some Java 8 JDBC additions: getLargeUpdateCount()
and executeLargeBatch()."
,pljava-so/src/main/c/type/TupleDesc.c,2493fc532a3b7e832b2e837f317998d8111483bc,Chapman Flack,2016-10-24T08:37:00Z,chap@anastigmatix.net,Chapman Flack,2016-10-25T04:09:56Z,chap@anastigmatix.net,8,4,4,"Use heap_form_tuple, not heap_formtuple.

Both have existed back to PG 8.2, so no need for version conditionals.
The preferred one uses a boolean nulls array instead of a char array
of ' ' or 'n', and the deprecated one goes away in 9.6.

memset(nulls, true, count * sizeof(bool)) is a bit off if bool is ever
wider than a byte (values will be nonzero but not exactly equal to true).
But it's an idiom Tom Lane has used in multiple places:
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/utils/cache/catcache.c;h=d5f237bc;hp=83a12776f;hb=902d1cb35;hpb=492059d
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/utils/adt/arrayfuncs.c;h=3818b181;hp=5304d47fa;hb=cecb6075;hpb=c859308a
which makes it good enough for me."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,eb3ebe10dfaa29fdd39cfedd72b47a70830b2ba2,Chapman Flack,2016-04-10T21:36:21Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T21:36:21Z,chap@anastigmatix.net,20,4,16,"Merge branch 'trackjdbc/master/svcload'

Adopt JDBC4+ ServiceLoader conventions for locating the driver,
elininating a Class.forName."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,eb3ebe10dfaa29fdd39cfedd72b47a70830b2ba2,Chapman Flack,2016-04-10T21:36:21Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T21:36:21Z,chap@anastigmatix.net,20,4,16,"Merge branch 'trackjdbc/master/svcload'

Adopt JDBC4+ ServiceLoader conventions for locating the driver,
elininating a Class.forName."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,6123936d05202dcf4b4296d77b57464749d672a5,Chapman Flack,2016-04-10T21:35:13Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T21:35:13Z,chap@anastigmatix.net,20,4,16,"Adopt JDBC4+ ServiceLoader conventions.

Add a META-INF/services/java.sql.Driver file (probably unnecessary
as the driver will always be loaded explicitly through SQLUtils
before anyone else needs it, but for completeness...), and get rid
of the Class.forName(""...SPIDriver"") that was previously in, of all
places, Oid."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,6123936d05202dcf4b4296d77b57464749d672a5,Chapman Flack,2016-04-10T21:35:13Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T21:35:13Z,chap@anastigmatix.net,20,4,16,"Adopt JDBC4+ ServiceLoader conventions.

Add a META-INF/services/java.sql.Driver file (probably unnecessary
as the driver will always be loaded explicitly through SQLUtils
before anyone else needs it, but for completeness...), and get rid
of the Class.forName(""...SPIDriver"") that was previously in, of all
places, Oid."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava-api/src/test/java/LexicalsTest.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,03278f646ed79b419348b33b39a6b9f90fddfdaa,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:31:09Z,chap@anastigmatix.net,653,563,90,"Merge branch 'feature/master/getlistguc'

Add Lexicals support for general SQL identifiers, and a
Backend.getListConfigOption method for retrieving GUCs of
type GUC_LIST (for which PostgreSQL accepts either identifier
or string quoting rules on input, but *uses* identifier quoting
in the retrieved value, so such a GUC is retrieved as a list
of Identifier. As a consequence, members are currently limited
in length to no more than the ISO SQL identifier length of 128
code points.

In deployment descriptors, implementor names are now accepted
in any SQL identifier syntax, not just unquoted regular identifiers
and no longer restricted to be Java identifiers too."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,b5915630819b2e7ebbb6778b01bc4e971e306cbd,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,144,77,67,"Add Backend.getListConfigOption.

There is a limitation, because PostgreSQL uses *identifier*
quoting (that is, double quotes) for list GUC members, and
getListConfigOption really does use the Lexicals identifier
patterns to match them, and ISO SQL restricts an identifier
to no more than 128 code points, so that is a current per-member
length limit."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,b5915630819b2e7ebbb6778b01bc4e971e306cbd,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,144,77,67,"Add Backend.getListConfigOption.

There is a limitation, because PostgreSQL uses *identifier*
quoting (that is, double quotes) for list GUC members, and
getListConfigOption really does use the Lexicals identifier
patterns to match them, and ISO SQL restricts an identifier
to no more than 128 code points, so that is a current per-member
length limit."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,b5915630819b2e7ebbb6778b01bc4e971e306cbd,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,144,77,67,"Add Backend.getListConfigOption.

There is a limitation, because PostgreSQL uses *identifier*
quoting (that is, double quotes) for list GUC members, and
getListConfigOption really does use the Lexicals identifier
patterns to match them, and ISO SQL restricts an identifier
to no more than 128 code points, so that is a current per-member
length limit."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,b5915630819b2e7ebbb6778b01bc4e971e306cbd,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T16:16:07Z,chap@anastigmatix.net,144,77,67,"Add Backend.getListConfigOption.

There is a limitation, because PostgreSQL uses *identifier*
quoting (that is, double quotes) for list GUC members, and
getListConfigOption really does use the Lexicals identifier
patterns to match them, and ISO SQL restricts an identifier
to no more than 128 code points, so that is a current per-member
length limit."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,c6b2072d44984b8332170fec34d6d7b17452d2b3,Chapman Flack,2016-04-10T04:13:34Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T14:06:13Z,chap@anastigmatix.net,378,364,14,"Add an Identifier class.

A start on encapsulating the strange and wonderful SQL rules
for matching quoted and non-quoted identifiers.

Note there is still no consultation of a list of SQL keywords,
so the rules for regular identifiers can't be called complete yet."
,pljava-api/src/test/java/LexicalsTest.java,c6b2072d44984b8332170fec34d6d7b17452d2b3,Chapman Flack,2016-04-10T04:13:34Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T14:06:13Z,chap@anastigmatix.net,378,364,14,"Add an Identifier class.

A start on encapsulating the strange and wonderful SQL rules
for matching quoted and non-quoted identifiers.

Note there is still no consultation of a list of SQL keywords,
so the rules for regular identifiers can't be called complete yet."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,a4c29cf1efd87cf780c13df961cb095e8e8f795b,Chapman Flack,2016-04-10T14:06:05Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T14:06:05Z,chap@anastigmatix.net,153,133,20,"Lexicals.identifierFrom.

Fixed a typo in ISO_UNICODE_IDENTIFIER and added JUnit test (not
necessarily in that order).

This changes Lexicals from an interface to an abstract class. That
should not affect any client code unless it was written to inherit
from Lexicals, which would have been an example of the ""constant
interface antipattern"" so with any luck will not have been common."
,pljava-api/src/test/java/LexicalsTest.java,a4c29cf1efd87cf780c13df961cb095e8e8f795b,Chapman Flack,2016-04-10T14:06:05Z,chap@anastigmatix.net,Chapman Flack,2016-04-10T14:06:05Z,chap@anastigmatix.net,153,133,20,"Lexicals.identifierFrom.

Fixed a typo in ISO_UNICODE_IDENTIFIER and added JUnit test (not
necessarily in that order).

This changes Lexicals from an interface to an abstract class. That
should not affect any client code unless it was written to inherit
from Lexicals, which would have been an example of the ""constant
interface antipattern"" so with any luck will not have been common."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-so/src/main/c/type/String.c,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,461fff29a2df03e8b721a667e9b01efec73b2666,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T03:05:38Z,chap@anastigmatix.net,482,248,234,"Merge branch 'chore/master/java7ify'

Bump the minimum Java to 7 and begin adopting Java 7 features
in places where the fruit hangs low."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,6604a7f2a7ac870ea3bd076ea43618841c481880,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:55:24Z,chap@anastigmatix.net,133,70,63,Adopt the diamond operator.
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,21b380ed0eaa1cd3ca9ff1c3720a07b8791f043b,Chapman Flack,2016-04-01T02:16:43Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:16:43Z,chap@anastigmatix.net,180,59,121,Prefer try-with-resources in some easy places.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,21b380ed0eaa1cd3ca9ff1c3720a07b8791f043b,Chapman Flack,2016-04-01T02:16:43Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T02:16:43Z,chap@anastigmatix.net,180,59,121,Prefer try-with-resources in some easy places.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava-so/src/main/c/type/String.c,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,9d250c41e1b70f1072a95f76947514bb03fa5b42,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,Chapman Flack,2016-04-01T01:26:48Z,chap@anastigmatix.net,77,42,35,"No more standard charset lookups by name.

Rethink use of java.util.Scanner to slurp data ... it's very
convenient, but part of the reason is it swallows IOExceptions.
If you add the extra lines of code to hang onto the reference
and call its ioException() method to see if something went wrong,
the brevity advantage slips away."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,389d6b36be229c90786309954810224101f6e714,Chapman Flack,2016-03-31T05:23:24Z,chap@anastigmatix.net,Chapman Flack,2016-03-31T05:31:53Z,chap@anastigmatix.net,12,6,6,Make more quantifiers possessive.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,389d6b36be229c90786309954810224101f6e714,Chapman Flack,2016-03-31T05:23:24Z,chap@anastigmatix.net,Chapman Flack,2016-03-31T05:31:53Z,chap@anastigmatix.net,12,6,6,Make more quantifiers possessive.
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,389d6b36be229c90786309954810224101f6e714,Chapman Flack,2016-03-31T05:23:24Z,chap@anastigmatix.net,Chapman Flack,2016-03-31T05:31:53Z,chap@anastigmatix.net,12,6,6,Make more quantifiers possessive.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,ebd314bb244ceba042859a4575536603b593f743,Chapman Flack,2016-03-31T04:50:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-31T05:31:53Z,chap@anastigmatix.net,70,66,4,"More regexps for common lexicals, a la jdk7."
,fixes/gcj/java_sql_Types.h,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/.classpath,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/.settings/org.eclipse.core.resources.prefs,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/.settings/org.eclipse.jdt.core.prefs,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/.settings/org.eclipse.m2e.core.prefs,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,63b2e83e1cf0ccb35939b268159ad1d46762b300,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:49:39Z,chap@anastigmatix.net,793,0,793,Merge branch 'chore/master/post150vacuum'
,fixes/gcj/java_sql_Types.h,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/.classpath,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/.settings/org.eclipse.core.resources.prefs,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/.settings/org.eclipse.jdt.core.prefs,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/.settings/org.eclipse.m2e.core.prefs,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,8bd216e4dbf4192265983981a27afb46d7ea4edb,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,Chapman Flack,2016-03-30T02:45:19Z,chap@anastigmatix.net,793,0,793,"Bit of vacuuming after release 1.5.0.

Old Deployer is obsolete, as are install/uninstall.sql
and old fixes for GCJ. In 1.5.0 they've seen their last
release. It's all in the history if ever needed."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava-so/src/main/c/InstallHelper.c,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,9f3394fe7d6317780a05dfe4a3f9e266717081aa,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:57:31Z,chap@anastigmatix.net,806,708,98,Merge branch 'REL1_5_STABLE'
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,5d1dec24d3857f092029806906ff7544687e6918,Chapman Flack,2016-03-29T16:36:26Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:36:26Z,chap@anastigmatix.net,9,7,2,Poke migration-management versions for 1.5.0.
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,f997fdfa221ccad5e739e88b0c974a1960548ffb,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:27:01Z,chap@anastigmatix.net,79,77,2,"Merge branch 'doc/REL1_5_STABLE/examples' into REL1_5_STABLE

At least fill the gaps in class comments for the pljava-examples
javadocs."
,pljava-so/src/main/c/InstallHelper.c,4b34e10a7e7ee36ff7c194c04601065caa3c372e,Chapman Flack,2016-03-29T16:25:21Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:25:21Z,chap@anastigmatix.net,128,93,35,"Merge branch 'doc/REL1_5_STABLE/clarify' into REL1_5_STABLE

Clarifies permissions needed for self-extractor, and the
CREATE-EXTENSION-failed-because-new-session-needed message,
as Daniel Blanch Bataller suggested."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,4b34e10a7e7ee36ff7c194c04601065caa3c372e,Chapman Flack,2016-03-29T16:25:21Z,chap@anastigmatix.net,Chapman Flack,2016-03-29T16:25:21Z,chap@anastigmatix.net,128,93,35,"Merge branch 'doc/REL1_5_STABLE/clarify' into REL1_5_STABLE

Clarifies permissions needed for self-extractor, and the
CREATE-EXTENSION-failed-because-new-session-needed message,
as Daniel Blanch Bataller suggested."
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,a9c6117611c8b8f5b6270d549ebe8f101c33be13,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T02:59:59Z,chap@anastigmatix.net,61,59,2,"At least class javadoc for pre-anno examples.

The old typo in the Security javadoc is a fine illustration of why
almost any word pair, like SANDBOXED / UNSANDBOXED, is more mnemonic
than TRUSTED / UNTRUSTED."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,795dfaf2e0ae16d6b980c2dcc4255f21d8f1953d,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,18,18,0,At least class javadoc for each anno example.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,795dfaf2e0ae16d6b980c2dcc4255f21d8f1953d,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,18,18,0,At least class javadoc for each anno example.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,795dfaf2e0ae16d6b980c2dcc4255f21d8f1953d,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,Chapman Flack,2016-03-28T01:15:12Z,chap@anastigmatix.net,18,18,0,At least class javadoc for each anno example.
,pljava-so/src/main/c/InstallHelper.c,3d4fd37ede3a0b6032231e7fe94b536c227f6087,Chapman Flack,2016-03-27T23:28:33Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T23:28:33Z,chap@anastigmatix.net,123,88,35,"Make create-extension-didn't message clearer.

The only error message resulting from a CREATE EXTENSION attempt
that failed (because the library had been loaded before in the
session, therefore LOAD was a no-op) is one about a table that
already exists.

But the name of the table appears in the error message, so the
table may as well be named
""see doc: do CREATE EXTENSION PLJAVA in new session""
which may serve to get the point across."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,3d4fd37ede3a0b6032231e7fe94b536c227f6087,Chapman Flack,2016-03-27T23:28:33Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T23:28:33Z,chap@anastigmatix.net,123,88,35,"Make create-extension-didn't message clearer.

The only error message resulting from a CREATE EXTENSION attempt
that failed (because the library had been loaded before in the
session, therefore LOAD was a no-op) is one about a table that
already exists.

But the name of the table appears in the error message, so the
table may as well be named
""see doc: do CREATE EXTENSION PLJAVA in new session""
which may serve to get the point across."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,4dbabf0149fb2e6026b50f5a897f6f7aa0b9d4da,Chapman Flack,2016-03-27T19:27:37Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T19:27:37Z,chap@anastigmatix.net,22,5,17,"Merge branch 'bug/REL1_5_STABLE/rxbacktrack' into REL1_5_STABLE

Trim the insane stack utilization that formerly required
-Xss options for builds on small-memory systems."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,4dbabf0149fb2e6026b50f5a897f6f7aa0b9d4da,Chapman Flack,2016-03-27T19:27:37Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T19:27:37Z,chap@anastigmatix.net,22,5,17,"Merge branch 'bug/REL1_5_STABLE/rxbacktrack' into REL1_5_STABLE

Trim the insane stack utilization that formerly required
-Xss options for builds on small-memory systems."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,fcde4f401a7e6445238ef7d6fe5eceaf02f4fc94,Chapman Flack,2016-03-27T19:25:23Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T19:25:23Z,chap@anastigmatix.net,22,5,17,"Limit stack depth for syntax-check regexes.

These regular expressions had non-possessive quantifiers
even though all of them are for patterns that can (and should!)
be checked without backtracking.

Full build now completes with minimum requestable stack limit
of 228 k, so should resolve the reported instances of needing
to increase -Xss on small-memory systems.

These patterns are all used with matches(), which implicitly
anchors them at both ends, so they do not need to contain anchors."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,fcde4f401a7e6445238ef7d6fe5eceaf02f4fc94,Chapman Flack,2016-03-27T19:25:23Z,chap@anastigmatix.net,Chapman Flack,2016-03-27T19:25:23Z,chap@anastigmatix.net,22,5,17,"Limit stack depth for syntax-check regexes.

These regular expressions had non-possessive quantifiers
even though all of them are for patterns that can (and should!)
be checked without backtracking.

Full build now completes with minimum requestable stack limit
of 228 k, so should resolve the reported instances of needing
to increase -Xss on small-memory systems.

These patterns are all used with matches(), which implicitly
anchors them at both ends, so they do not need to contain anchors."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/Backend.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/Function.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/InstallHelper.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/SQLInputFromChunk.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/SQLOutputToChunk.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/type/TupleDesc.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/type/Type.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/c/type/UDT.c,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/Function.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/InstallHelper.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/SQLInputFromChunk.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/SQLOutputToChunk.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/pljava.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/type/UDT.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava-so/src/main/include/pljava/type/UDT_priv.h,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,0615408b21ad57025d70f66fadc6aeb43d2e3d95,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T05:02:18Z,chap@anastigmatix.net,3385,2808,577,"Merge branch 'REL1_5_STABLE'

Sync with 1.5.0-BETA3 state."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,9bd31791943c0fc2f54a829533db626808ec8741,Chapman Flack,2016-03-20T04:03:54Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T04:03:54Z,chap@anastigmatix.net,9,7,2,Poke migration-management versions for 150b3.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-so/src/main/c/type/TupleDesc.c,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-so/src/main/c/type/Type.c,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-so/src/main/c/type/UDT.c,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-so/src/main/include/pljava/type/UDT.h,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-so/src/main/include/pljava/type/UDT_priv.h,5c285557873e559423bea536e4525a8afead60a8,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:10:56Z,chap@anastigmatix.net,96,88,8,"Merge branch 'bug/REL1_5_STABLE/tupdescleak' into REL1_5_STABLE

Eliminate TupleDesc reference leak warnings at uses of
composite UDTs; also commit a test class from an old pgFoundry
bug report 1010962 - different issue, but also TupleDesc reference
leak warnings, and it runs without any now, so in it goes as a
regression test."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/PGF1010962.java,1d76bdea4fe70aff13559172510f81bd5575e6ff,Chapman Flack,2016-03-20T03:01:04Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T03:01:04Z,chap@anastigmatix.net,66,66,0,"Add Johann Oskarsson's TupleDesc leak test.

This was in the pgFoundry bug report 1010962, a gnarly test of
a composite type holding composite types, then put in an array
to see how many TupleDesc reference leak warnings could result.

The patch by Heikki Linnakangas was described in that report as
""(at least) partial fix"". While this test does not use UDTs and
is therefore not strictly related to the UDT fixes just made in
this branch, I definitely see zero TupleDesc reference warnings
from it now, so this is as good a time as ever to get it committed
as a regression test."
,pljava-so/src/main/c/type/TupleDesc.c,99f9a580594e7c7a1b6ff0577ae1a588bbfd3aac,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,30,22,8,"Plug composite UDT TupleDesc leak.

In the composite case, UDT was keeping a reference to the type's
TupleDesc, causing PostgreSQL's reference counter to report a leak.
Not a growing, memory leak: only one TupleDesc for each type would
be kept. Of more concern would be how to invalidate it if the
underlying type is altered. More convincing to just grab it from the
type cache whenever needed. More at:

http://www.postgresql.org/message-id/flat/56DF8122.20607@anastigmatix.net"
,pljava-so/src/main/c/type/Type.c,99f9a580594e7c7a1b6ff0577ae1a588bbfd3aac,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,30,22,8,"Plug composite UDT TupleDesc leak.

In the composite case, UDT was keeping a reference to the type's
TupleDesc, causing PostgreSQL's reference counter to report a leak.
Not a growing, memory leak: only one TupleDesc for each type would
be kept. Of more concern would be how to invalidate it if the
underlying type is altered. More convincing to just grab it from the
type cache whenever needed. More at:

http://www.postgresql.org/message-id/flat/56DF8122.20607@anastigmatix.net"
,pljava-so/src/main/c/type/UDT.c,99f9a580594e7c7a1b6ff0577ae1a588bbfd3aac,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,30,22,8,"Plug composite UDT TupleDesc leak.

In the composite case, UDT was keeping a reference to the type's
TupleDesc, causing PostgreSQL's reference counter to report a leak.
Not a growing, memory leak: only one TupleDesc for each type would
be kept. Of more concern would be how to invalidate it if the
underlying type is altered. More convincing to just grab it from the
type cache whenever needed. More at:

http://www.postgresql.org/message-id/flat/56DF8122.20607@anastigmatix.net"
,pljava-so/src/main/include/pljava/type/UDT.h,99f9a580594e7c7a1b6ff0577ae1a588bbfd3aac,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,30,22,8,"Plug composite UDT TupleDesc leak.

In the composite case, UDT was keeping a reference to the type's
TupleDesc, causing PostgreSQL's reference counter to report a leak.
Not a growing, memory leak: only one TupleDesc for each type would
be kept. Of more concern would be how to invalidate it if the
underlying type is altered. More convincing to just grab it from the
type cache whenever needed. More at:

http://www.postgresql.org/message-id/flat/56DF8122.20607@anastigmatix.net"
,pljava-so/src/main/include/pljava/type/UDT_priv.h,99f9a580594e7c7a1b6ff0577ae1a588bbfd3aac,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,Chapman Flack,2016-03-20T02:48:03Z,chap@anastigmatix.net,30,22,8,"Plug composite UDT TupleDesc leak.

In the composite case, UDT was keeping a reference to the type's
TupleDesc, causing PostgreSQL's reference counter to report a leak.
Not a growing, memory leak: only one TupleDesc for each type would
be kept. Of more concern would be how to invalidate it if the
underlying type is altered. More convincing to just grab it from the
type cache whenever needed. More at:

http://www.postgresql.org/message-id/flat/56DF8122.20607@anastigmatix.net"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,f0a41359ede67335c5ef3fe73a9f10da96d71760,Chapman Flack,2016-03-19T23:47:24Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T23:47:24Z,chap@anastigmatix.net,40,29,11,"Merge branch 'bug/REL1_5_STABLE/typmapchk' into REL1_5_STABLE

Addresses CVE-2016-2192."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,a27f51704c019880178af9776e76810cf9d82b5c,Chapman Flack,2016-03-09T23:00:07Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T23:28:43Z,chap@anastigmatix.net,6,3,3,General vacuuming of Commands.java javadoc.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,3e8f1b7833cec474d9e20f3a4748d96e65c20a56,Chapman Flack,2016-03-09T22:59:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T23:28:34Z,chap@anastigmatix.net,34,26,8,Limit add/drop of type mappings.
,pljava-so/src/main/c/Backend.c,ad4e051a548a1874e2a469a6078ef7dbb18828ec,Chapman Flack,2016-03-19T22:28:24Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T22:28:24Z,chap@anastigmatix.net,4,2,2,"Merge pull request #97 from TwentyOneSolutions/REL1_5_STABLE

Clarifies init-sequence error hint about JVM library file name, which can be somewhat different between platforms."
,pljava-so/src/main/include/pljava/pljava.h,37fbcf2268ef26042e64d853aae0fc103351e212,Chapman Flack,2016-03-19T18:11:05Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T18:11:05Z,chap@anastigmatix.net,2,1,1,"Merge branch 'bug/REL1_5_STABLE/aseert' into REL1_5_STABLE

Trivial typo introduced with MinGW support, was bad for pre-9.3 builds."
,pljava-so/src/main/include/pljava/pljava.h,1df4d8a5d768b8b8466383bf789d98078f5115dc,Chapman Flack,2016-03-19T18:04:49Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T18:04:49Z,chap@anastigmatix.net,2,1,1,"Fix pre-9.3 bug introduced with MinGW fixes.

Trivial typo."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,4d73ae8cd3062fe45b99f3c05720ad51fa077b29,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,213,211,2,"Merge branch 'feature/REL1_5_STABLE/typmodprep' into REL1_5_STABLE

Not a full implementation of type modifiers (which were requested
in feature request 1011140), which would be too much to hold 1.5.0 for,
but just enough to avoid releasing a version that gets in the way later:
the SQL generator had better at least emit the three-argument forms for
input and receive function declarations, or they would later have to be
dropped and replaced, a cascading disruption. Non-default values in the
extra arguments are not yet supported; they'll just cause unsupported
feature ereports.

As it turns out, only rare corners of PostgreSQL need that support;
most application of typmods is done with the three-argument cast, which
is already expressible in PL/Java. So, unexpectedly, mostly-usable
typmod support is already here, and a new example illustrates it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,4d73ae8cd3062fe45b99f3c05720ad51fa077b29,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,213,211,2,"Merge branch 'feature/REL1_5_STABLE/typmodprep' into REL1_5_STABLE

Not a full implementation of type modifiers (which were requested
in feature request 1011140), which would be too much to hold 1.5.0 for,
but just enough to avoid releasing a version that gets in the way later:
the SQL generator had better at least emit the three-argument forms for
input and receive function declarations, or they would later have to be
dropped and replaced, a cascading disruption. Non-default values in the
extra arguments are not yet supported; they'll just cause unsupported
feature ereports.

As it turns out, only rare corners of PostgreSQL need that support;
most application of typmods is done with the three-argument cast, which
is already expressible in PL/Java. So, unexpectedly, mostly-usable
typmod support is already here, and a new example illustrates it."
,pljava-so/src/main/c/type/UDT.c,4d73ae8cd3062fe45b99f3c05720ad51fa077b29,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T03:13:00Z,chap@anastigmatix.net,213,211,2,"Merge branch 'feature/REL1_5_STABLE/typmodprep' into REL1_5_STABLE

Not a full implementation of type modifiers (which were requested
in feature request 1011140), which would be too much to hold 1.5.0 for,
but just enough to avoid releasing a version that gets in the way later:
the SQL generator had better at least emit the three-argument forms for
input and receive function declarations, or they would later have to be
dropped and replaced, a cascading disruption. Non-default values in the
extra arguments are not yet supported; they'll just cause unsupported
feature ereports.

As it turns out, only rare corners of PostgreSQL need that support;
most application of typmods is done with the three-argument cast, which
is already expressible in PL/Java. So, unexpectedly, mostly-usable
typmod support is already here, and a new example illustrates it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/Backend.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/Function.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/InstallHelper.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/SQLInputFromChunk.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/SQLOutputToChunk.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/type/Type.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/type/UDT.c,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/include/pljava/Function.h,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/include/pljava/InstallHelper.h,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/include/pljava/SQLInputFromChunk.h,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/include/pljava/SQLOutputToChunk.h,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,449a0c0923e9e7c2fbe1f5b6317b481dce29fe3f,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:22:17Z,chap@anastigmatix.net,2368,1977,391,"Merge branch 'bug/REL1_5_STABLE/udtarch' into REL1_5_STABLE

Addresses the user-defined type issues reported as #98 and #99."
,pljava-so/src/main/c/Backend.c,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/c/Function.c,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/c/InstallHelper.c,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/c/type/Type.c,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/include/pljava/Function.h,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/include/pljava/InstallHelper.h,a33184076c95524369a5144ea3c4aea39edfd8d8,Chapman Flack,2016-03-10T05:15:27Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:43Z,chap@anastigmatix.net,245,199,46,"Check for base UDT if no other type mapping found.

Addresses issue #99. The strategy of registering base UDTs on the
first call to their input/output/send/recv functions breaks down if
the first reference in a session to such a type is one that doesn't
involve calling those functions (for example, an existing table has
a column of that type, and a query wants to pass it to a Java
function accepting that type; PostgreSQL has no reason to think it
should call an I/O function in that case).

This change adds one more step to the rules in Type_fromOid. If no
previous step succeeded, and just before punting to String, take a
close look at the type to see if it could be a Base UDT.

That's a tedious check that involves following the type's input/
output/receive/send Oids via prolang back to their language Oids, and
(one could stop here by assuming the language will always be named
'java' or 'javaU', but if not) from there to the language's call
handler C function and its dynamic library path, which should match
PL/Java's. A future optimization could cache language Oids that are
found to refer to PL/Java, but it might not be needed often enough
to matter."
,pljava-so/src/main/c/SQLInputFromChunk.c,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava-so/src/main/c/SQLOutputToChunk.c,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava-so/src/main/c/type/UDT.c,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava-so/src/main/include/pljava/SQLInputFromChunk.h,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava-so/src/main/include/pljava/SQLOutputToChunk.h,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,460b25dea6aa753a9b00a01f3f38ad2a41f5a7e6,Chapman Flack,2016-03-19T02:16:55Z,chap@anastigmatix.net,Chapman Flack,2016-03-19T02:17:05Z,chap@anastigmatix.net,934,921,13,"Clunky but serviceable way to set byte order.

Addresses issue #98. There really hasn't been a document that just lays
out in detail how PL/Java's data coercions are chosen and especially how
the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered,
while documenting that, the reason Point was showing bogus values (noted
in pull request #59 comments) ... byte order ... leading to a
last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing
byte order to be selected.

(It has to be selectable, not just fixed, in case PL/Java gets updated
at a site that has a bunch of data stored under the old byte order.
A switch allows dumping with the old order, then reloading with the
new. In fact, by choosing a different byte order for each conversion
direction, it is possible ... carefully ... to update in place.)

A flag is passed to SQLInputFromChunk_create and
SQLOutputFromChunk_create to indicate whether the type is
a 'java-based scalar' (otherwise, it is a non-composite mirror),
and this allows byte order to be specified separately for scalars
and mirrors: historically, it was always bigendian regardless of
architecture. Presumably that has never mattered much for java-based
scalars (because PostgreSQL itself doesn't have any independent way
of seeing into them, so no inconsistency was visible), but for a
mirror type it is definitely broken if the hardware is not bigendian,
with PostgreSQL and Java not seeing the values the same way.

Therefore, this change leaves the scalar default (for 1.5.0 at least)
at bigendian, in case some sites may have used Java-based scalars in
the past and have tables that contain them. Also, the current UDT
implementation gives every scalar type a binary send/receive/COPY
format that can't (yet) be decoupled from its internal stored form, and
the PostgreSQL docs specify big-endian for those binary transfer formats,
so it would be premature to change the scalar byte-order default before
it is also possible to have a separate transfer format.

For mirror types, on the other hand, the default is here immediately
changed to native ... it is less likely that sites were heavily
using mirror UDTs if they were seeing bogus values, and this will
make them work right by default.

Java properties are used (set with -D in the pljava.vmoptions GUC):
org.postgresql.pljava.udt.byteorder  to set everything the same,

org.postgresql.pljava.udt.byteorder.scalar
org.postgresql.pljava.udt.byteorder.mirror  to set them separately.

The allowable values for each property are big_endian, little_endian,
and native.

Even finer-grained control is available with:
org.postgresql.pljava.udt.byteorder.scalar.p2j
org.postgresql.pljava.udt.byteorder.scalar.j2p
org.postgresql.pljava.udt.byteorder.mirror.p2j
org.postgresql.pljava.udt.byteorder.mirror.j2p

for a very special purpose, should someone wish to attempt an
UPDATE where within a session, a column with values written
in one order gets rewritten in another, a fiddly and somewhat
unnerving process that turns out to actually work, and has a
full new page documenting it now."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,699da71c901f582aa4f7b65a09b474d85a3644c7,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,213,211,2,"Lay groundwork for typmod support.

To fully support type modifiers, including the three-argument forms
of input/receive functions, will take more thought than 1.5.0 can wait
for. But to release 1.5.0 with the SQL generator emitting the
one-argument forms would invite headaches later, because CREATE OR
REPLACE FUNCTION can't change the parameter list, and DROP/reCREATE
would cause cascading disruption. So, make sure the generator already
emits the three-argument form, and just be sure to fail if a non-default
typmod is in fact passed, with more complete support to be added later.

By happy chance, it seems that PostgreSQL only very rarely passes non-
default typmods to the input/receive functions--possibly only during
COPY operations. (Those were the only way I was able to test this
change.)

In most other cases where a typmod is used, PostgreSQL relies on a
typmod application cast in a separate step, not on passing the typmod
to input/receive. PL/Java is already usable to implement typmodin,
typmodout, and cast functions, so in limited testing it seems possible
already to do types with typmods, maybe as long as COPY operations on
them are not needed. Therefore, add an example that illustrates it."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/IntWithMod.java,699da71c901f582aa4f7b65a09b474d85a3644c7,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,213,211,2,"Lay groundwork for typmod support.

To fully support type modifiers, including the three-argument forms
of input/receive functions, will take more thought than 1.5.0 can wait
for. But to release 1.5.0 with the SQL generator emitting the
one-argument forms would invite headaches later, because CREATE OR
REPLACE FUNCTION can't change the parameter list, and DROP/reCREATE
would cause cascading disruption. So, make sure the generator already
emits the three-argument form, and just be sure to fail if a non-default
typmod is in fact passed, with more complete support to be added later.

By happy chance, it seems that PostgreSQL only very rarely passes non-
default typmods to the input/receive functions--possibly only during
COPY operations. (Those were the only way I was able to test this
change.)

In most other cases where a typmod is used, PostgreSQL relies on a
typmod application cast in a separate step, not on passing the typmod
to input/receive. PL/Java is already usable to implement typmodin,
typmodout, and cast functions, so in limited testing it seems possible
already to do types with typmods, maybe as long as COPY operations on
them are not needed. Therefore, add an example that illustrates it."
,pljava-so/src/main/c/type/UDT.c,699da71c901f582aa4f7b65a09b474d85a3644c7,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,Chapman Flack,2016-03-18T23:48:10Z,chap@anastigmatix.net,213,211,2,"Lay groundwork for typmod support.

To fully support type modifiers, including the three-argument forms
of input/receive functions, will take more thought than 1.5.0 can wait
for. But to release 1.5.0 with the SQL generator emitting the
one-argument forms would invite headaches later, because CREATE OR
REPLACE FUNCTION can't change the parameter list, and DROP/reCREATE
would cause cascading disruption. So, make sure the generator already
emits the three-argument form, and just be sure to fail if a non-default
typmod is in fact passed, with more complete support to be added later.

By happy chance, it seems that PostgreSQL only very rarely passes non-
default typmods to the input/receive functions--possibly only during
COPY operations. (Those were the only way I was able to test this
change.)

In most other cases where a typmod is used, PostgreSQL relies on a
typmod application cast in a separate step, not on passing the typmod
to input/receive. PL/Java is already usable to implement typmodin,
typmodout, and cast functions, so in limited testing it seems possible
already to do types with typmods, maybe as long as COPY operations on
them are not needed. Therefore, add an example that illustrates it."
,pljava-so/src/main/c/SQLOutputToChunk.c,da80844fc51cc74ab62d0171fdda2a58fdcfe8a2,Chapman Flack,2016-03-06T04:14:50Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,460,316,144,"Rework SQLOutputToChunk using direct bytebuffers.

This will allow accommodating different byte orders using the provisions
built into ByteBuffer."
,pljava-so/src/main/c/type/UDT.c,da80844fc51cc74ab62d0171fdda2a58fdcfe8a2,Chapman Flack,2016-03-06T04:14:50Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,460,316,144,"Rework SQLOutputToChunk using direct bytebuffers.

This will allow accommodating different byte orders using the provisions
built into ByteBuffer."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,da80844fc51cc74ab62d0171fdda2a58fdcfe8a2,Chapman Flack,2016-03-06T04:14:50Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,460,316,144,"Rework SQLOutputToChunk using direct bytebuffers.

This will allow accommodating different byte orders using the provisions
built into ByteBuffer."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,45c9a113cfc055ee71754bae25a388dce2e4e0cf,Chapman Flack,2016-03-06T01:40:41Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,362,175,187,"Rework SQLInputFromChunk using direct bytebuffers.

This will allow accommodating different byte orders, using the
provisions built into ByteBuffer."
,pljava-so/src/main/c/SQLInputFromChunk.c,45c9a113cfc055ee71754bae25a388dce2e4e0cf,Chapman Flack,2016-03-06T01:40:41Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,362,175,187,"Rework SQLInputFromChunk using direct bytebuffers.

This will allow accommodating different byte orders, using the
provisions built into ByteBuffer."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,45c9a113cfc055ee71754bae25a388dce2e4e0cf,Chapman Flack,2016-03-06T01:40:41Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,362,175,187,"Rework SQLInputFromChunk using direct bytebuffers.

This will allow accommodating different byte orders, using the
provisions built into ByteBuffer."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,aa625a1cc8f56e243aea9d0d1580357bb8d3ae15,Chapman Flack,2016-03-09T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,383,374,9,"Add tests for UDTs and SQLInput/SQLOutput.

Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point
example classes, as rough tests that these three forms of UDT (scalar,
composite, ""mirrored"") work. As a more thorough test, add
UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput
method for scalar (or mirrored, noncomposite) types.

At first Point is expected to fail on little-endian hardware."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,aa625a1cc8f56e243aea9d0d1580357bb8d3ae15,Chapman Flack,2016-03-09T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,383,374,9,"Add tests for UDTs and SQLInput/SQLOutput.

Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point
example classes, as rough tests that these three forms of UDT (scalar,
composite, ""mirrored"") work. As a more thorough test, add
UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput
method for scalar (or mirrored, noncomposite) types.

At first Point is expected to fail on little-endian hardware."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,aa625a1cc8f56e243aea9d0d1580357bb8d3ae15,Chapman Flack,2016-03-09T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,383,374,9,"Add tests for UDTs and SQLInput/SQLOutput.

Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point
example classes, as rough tests that these three forms of UDT (scalar,
composite, ""mirrored"") work. As a more thorough test, add
UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput
method for scalar (or mirrored, noncomposite) types.

At first Point is expected to fail on little-endian hardware."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UDTScalarIOTest.java,aa625a1cc8f56e243aea9d0d1580357bb8d3ae15,Chapman Flack,2016-03-09T00:13:04Z,chap@anastigmatix.net,Chapman Flack,2016-03-14T01:03:08Z,chap@anastigmatix.net,383,374,9,"Add tests for UDTs and SQLInput/SQLOutput.

Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point
example classes, as rough tests that these three forms of UDT (scalar,
composite, ""mirrored"") work. As a more thorough test, add
UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput
method for scalar (or mirrored, noncomposite) types.

At first Point is expected to fail on little-endian hardware."
,pljava-so/src/main/c/Backend.c,1cf82fb64b39259a4af23958e6a3a0a87ccd059f,Igal Sapir,2016-03-06T00:13:52Z,dev@21solutions.net,Igal Sapir,2016-03-06T00:13:52Z,dev@21solutions.net,4,2,2,updated message to reflect correct filename in Windows
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,9855f7a78129f9bf29d800323e612afba3061b54,Chapman Flack,2016-02-23T01:01:25Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T01:01:25Z,chap@anastigmatix.net,5,3,2,"Merge branch 'chore/REL1_5_STABLE-BASE/schemaver'

Conflict-y because doing these syncs on a separate -BASE branch
was a good idea that should have been had earlier. The pain now
should let the next one go smoothly."
,pljava-so/src/main/c/Backend.c,63b8b4b8fa3ca4b4bcba97fa9509bee299ae192b,Chapman Flack,2016-02-23T00:59:04Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:59:04Z,chap@anastigmatix.net,156,137,19,"Merge branch 'port/REL1_5_STABLE-BASE/mingw64'

Thanks to Igal Sapir for help nailing down the MinGW-w64 support."
,pljava-so/src/main/include/pljava/pljava.h,63b8b4b8fa3ca4b4bcba97fa9509bee299ae192b,Chapman Flack,2016-02-23T00:59:04Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:59:04Z,chap@anastigmatix.net,156,137,19,"Merge branch 'port/REL1_5_STABLE-BASE/mingw64'

Thanks to Igal Sapir for help nailing down the MinGW-w64 support."
,pljava-packaging/src/main/resources/pljava.control,2cc22fec1bddf6350996d7767fac94317995c814,Chapman Flack,2016-02-23T00:58:07Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:58:07Z,chap@anastigmatix.net,143,116,27,"Merge branch 'feature/REL1_5_STABLE-BASE/extupgrade'

1.5.0-BETA2 will be the second extension-installable named release,
requiring a bit more work on the extension shims so they can
actually support ALTER EXTENSION ... UPDATE."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,2cc22fec1bddf6350996d7767fac94317995c814,Chapman Flack,2016-02-23T00:58:07Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:58:07Z,chap@anastigmatix.net,143,116,27,"Merge branch 'feature/REL1_5_STABLE-BASE/extupgrade'

1.5.0-BETA2 will be the second extension-installable named release,
requiring a bit more work on the extension shims so they can
actually support ALTER EXTENSION ... UPDATE."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,243c33620c60407a2248e7f8125af507c54995a4,Chapman Flack,2016-02-23T00:35:10Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:35:10Z,chap@anastigmatix.net,5,3,2,"Merge branch 'chore/REL1_5_STABLE-BASE/schemaver' into REL1_5_STABLE

Conflict-y because doing these syncs on a separate -BASE branch
was a good idea that should have been had earlier. The pain now
should let the next one go smoothly."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,823b6f498126d4c99f6b2404d6d2bfe109a32f09,Chapman Flack,2016-02-23T00:26:37Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:30:25Z,chap@anastigmatix.net,7,5,2,"Sync schema-version detection.

This should have been started as a branch of its own
exactly when REL1_5_STABLE split from master. It wasn't.
Merging into REL1_5_STABLE and master may be messy.
Something to remember for next release branch."
,pljava-so/src/main/c/Backend.c,56858e7b19081dd83a4179f959ea25f827fde91e,Chapman Flack,2016-02-23T00:02:31Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:02:31Z,chap@anastigmatix.net,156,137,19,"Merge branch 'port/REL1_5_STABLE-BASE/mingw64' into REL1_5_STABLE

Thanks to Igal Sapir for help nailing down the MinGW-w64 support."
,pljava-so/src/main/include/pljava/pljava.h,56858e7b19081dd83a4179f959ea25f827fde91e,Chapman Flack,2016-02-23T00:02:31Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:02:31Z,chap@anastigmatix.net,156,137,19,"Merge branch 'port/REL1_5_STABLE-BASE/mingw64' into REL1_5_STABLE

Thanks to Igal Sapir for help nailing down the MinGW-w64 support."
,pljava-packaging/src/main/resources/pljava.control,6f951ca74eafb26f7bbffe0390be956e612a5b8c,Chapman Flack,2016-02-23T00:00:23Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:00:23Z,chap@anastigmatix.net,143,116,27,"Merge branch 'feature/REL1_5_STABLE-BASE/extupgrade' into REL1_5_STABLE

1.5.0-BETA2 will be the second extension-installable named release,
requiring a bit more work on the extension shims so they can
actually support ALTER EXTENSION ... UPDATE."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,6f951ca74eafb26f7bbffe0390be956e612a5b8c,Chapman Flack,2016-02-23T00:00:23Z,chap@anastigmatix.net,Chapman Flack,2016-02-23T00:00:23Z,chap@anastigmatix.net,143,116,27,"Merge branch 'feature/REL1_5_STABLE-BASE/extupgrade' into REL1_5_STABLE

1.5.0-BETA2 will be the second extension-installable named release,
requiring a bit more work on the extension shims so they can
actually support ALTER EXTENSION ... UPDATE."
,pljava-packaging/src/main/resources/pljava.control,324b00e0db6d732117d2c0220d57e79aa56163f2,Chapman Flack,2016-02-22T04:36:03Z,chap@anastigmatix.net,Chapman Flack,2016-02-22T04:36:03Z,chap@anastigmatix.net,9,4,5,"Give up on MODULE_PATHNAME.

The current extension framework has some potential to do
what you don't expect if you can ask CREATE EXTENSION for
different versions but MODULE_PATHNAME is only defined in
one place.

Background at http://www.postgresql.org/message-id/flat/56C3E65E.4020005@anastigmatix.net"
,pljava-so/src/main/c/Backend.c,4ede5fe3ffd123ced5453d730ceb33c8b0a042ca,Chapman Flack,2016-02-20T03:41:56Z,chap@anastigmatix.net,Chapman Flack,2016-02-20T03:41:56Z,chap@anastigmatix.net,21,14,7,"Skip signal handler fwd decls on Windows.

The handlers do not get defined on Windows, but they were still
being forward-declared. The gcc compiler in mingw notices these things.

Removed the comment I added earlier claiming that _destroyJavaVM
undoes the signal handlers. I do not know why I thought that, but if
I was right, I should have jotted down why. At the moment I don't see
that anything ever does or did undo them."
,pljava-so/src/main/c/Backend.c,124655b5c6e30efc98624c7ebda14750cf9315af,Chapman Flack,2016-02-20T03:07:20Z,chap@anastigmatix.net,Chapman Flack,2016-02-20T03:07:20Z,chap@anastigmatix.net,19,14,5,"Accommodate Windowsish printf format differences.

Windows sets int = long = int32, int64 = ""long long"". jni_md.h
on Windows defines jint as long, jlong as long long. The gcc
printf format checker in mingw notices these things. To keep it
quiet, cast to known types and use corresponding formats.

The debug messages are elogs, not ereports, hence not candidates for
localization, so the format macro can be used directly. If localization
were needed, the formats would need %s with the number-to-string
conversion done in a separate step."
,pljava-so/src/main/include/pljava/pljava.h,124655b5c6e30efc98624c7ebda14750cf9315af,Chapman Flack,2016-02-20T03:07:20Z,chap@anastigmatix.net,Chapman Flack,2016-02-20T03:07:20Z,chap@anastigmatix.net,19,14,5,"Accommodate Windowsish printf format differences.

Windows sets int = long = int32, int64 = ""long long"". jni_md.h
on Windows defines jint as long, jlong as long long. The gcc
printf format checker in mingw notices these things. To keep it
quiet, cast to known types and use corresponding formats.

The debug messages are elogs, not ereports, hence not candidates for
localization, so the format macro can be used directly. If localization
were needed, the formats would need %s with the number-to-string
conversion done in a separate step."
,pljava-so/src/main/c/Backend.c,4c0f79f0af09a34118dbf8f91fa41819b542d496,Chapman Flack,2016-02-20T01:41:28Z,chap@anastigmatix.net,Chapman Flack,2016-02-20T01:41:28Z,chap@anastigmatix.net,22,16,6,"The link option did the trick; now explain it.

Of the two approaches MinGW can support (export only explicitly
annotated symbols, as for MSVC, or --export-all-symbols), we are
forced to the latter by PostgreSQL's own choice to have PGDLLEXPORT
expand to nothing for MinGW. That determines how PG_MODULE_MAGIC is
declared, requiring --export-all-symbols for it to be visible, and
of course that takes care of PL/Java's other exported symbols too."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,754762e9af51ebad24ec751bec65190b6fe18d1a,Chapman Flack,2016-02-16T03:46:02Z,chap@anastigmatix.net,Chapman Flack,2016-02-16T03:46:35Z,chap@anastigmatix.net,51,30,21,"Rework extension wrappers slightly.

Instead of different ad-hoc ways of detecting the already-LOADed
no-op issue for different CREATE EXTENSION cases, have the LOAD-
invoked code always drop the loadpath table, so all extension scripts
can use the same approach to force an error if it didn't happen."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,00bc81d92be6bcfef5b4028e72b52d1e8d8e3c1b,Chapman Flack,2016-02-09T04:25:03Z,chap@anastigmatix.net,Chapman Flack,2016-02-09T04:25:03Z,chap@anastigmatix.net,134,104,30,"Merge issue #95 fix.

Certain later-detected annotation errors were being output with no
source location info, probably because of that javac (new with 7?
see also #39) habit of throwing away symbol tables between rounds.

Merge branch 'workaround/REL1_5_STABLE-BASE/sourcelocs'"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,f95900fd856a1183e0989483e4d644ee53f96f8a,Chapman Flack,2016-02-09T04:21:21Z,chap@anastigmatix.net,Chapman Flack,2016-02-09T04:21:21Z,chap@anastigmatix.net,134,104,30,"Merge issue #95 fix.

Certain later-detected annotation errors were being output with no
source location info, probably because of that javac (new with 7?
see also #39) habit of throwing away symbol tables between rounds.

Merge branch 'workaround/REL1_5_STABLE-BASE/sourcelocs' into REL1_5_STABLE."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,da56d6df409aded3b30295ce2a1f54da1668943c,Chapman Flack,2016-02-09T02:27:42Z,chap@anastigmatix.net,Chapman Flack,2016-02-09T03:08:04Z,chap@anastigmatix.net,30,27,3,"Catch compiler-caused classcast confusion.

When the compiler hasn't made sense of an annotated element because
of some error in the source, it may pass the annotation processor an
element of an unexpected type. The right response seems
to be to silently return (before anything that risks a class cast
exception), as the compiler will produce its own messages about what
the true problem was."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,c7e758234095fcaa7bb64fc4c19019f3bceadeb7,Chapman Flack,2016-02-08T05:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-02-09T03:08:04Z,chap@anastigmatix.net,11,11,0,"Call getSQLType earlier for errors' sake.

Unmappable types can be discovered when building the deployStrings
for a function, which normally happens too late for good error
messages if javac throws stuff away between rounds. So, just make
the messages, if any, happen early, by having FunctionImpl call its
deployStrings from characterize."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,63ccd3831f85833e3aa155456551613daef29082,Chapman Flack,2016-02-08T05:20:05Z,chap@anastigmatix.net,Chapman Flack,2016-02-09T03:08:04Z,chap@anastigmatix.net,93,66,27,"Invoke characterize methods earlier.

When this step was done as part of generateDescriptor (which only runs
once in the final round), any errors reported by characterize() were
being shown with no source location info ... apparently because javac
(since 7?) throws symbol tables away between rounds."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,8711d2a393fdbc52b6267ad537a00b89e91a28c5,Chapman Flack,2016-02-08T00:48:14Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:48:14Z,chap@anastigmatix.net,31,20,11,Merge branch 'bug/REL1_5_STABLE-BASE/issue92' into REL1_5_STABLE
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,8711d2a393fdbc52b6267ad537a00b89e91a28c5,Chapman Flack,2016-02-08T00:48:14Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:48:14Z,chap@anastigmatix.net,31,20,11,Merge branch 'bug/REL1_5_STABLE-BASE/issue92' into REL1_5_STABLE
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,84050829751715bae1d5b34044fcfecc891fcfb2,Chapman Flack,2016-02-08T00:45:59Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:45:59Z,chap@anastigmatix.net,31,20,11,Merge branch 'bug/REL1_5_STABLE-BASE/issue92'
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,84050829751715bae1d5b34044fcfecc891fcfb2,Chapman Flack,2016-02-08T00:45:59Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:45:59Z,chap@anastigmatix.net,31,20,11,Merge branch 'bug/REL1_5_STABLE-BASE/issue92'
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,dbee67e3f8242f0aafdeb80688cdfaeddd738a44,Chapman Flack,2016-02-08T00:20:19Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:40:01Z,chap@anastigmatix.net,2,1,1,Now passes issue 92 test.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,22f6c7df98b704c62cf2d3cde6a82122aa77ac32,Chapman Flack,2016-02-08T00:02:02Z,chap@anastigmatix.net,Chapman Flack,2016-02-08T00:40:01Z,chap@anastigmatix.net,29,19,10,Add test detecting issue 92.
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,0a072dd07b29b1bf4a894deec68633f6c429d049,Chapman Flack,2016-02-01T05:19:13Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T05:19:13Z,chap@anastigmatix.net,22,12,10,Advance version to 1.6.0-SNAPSHOT.
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,77197157029fa8e46193a696cec1c2f79470ea48,Chapman Flack,2016-02-01T03:35:21Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T03:35:21Z,chap@anastigmatix.net,6,4,2,"Track sqlj schema by release.

Add a static final alias for past name used for the schema layout."
,pljava-so/src/main/c/type/LargeObject.c,b08187345293f8e876a81bde4be8ced44edfaa51,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,149,138,11,"Merge pull request #91 from tada/trackpg/master/lotrunc64

Merging expeditiously ... was just waiting for the number assignment."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,b08187345293f8e876a81bde4be8ced44edfaa51,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,149,138,11,"Merge pull request #91 from tada/trackpg/master/lotrunc64

Merging expeditiously ... was just waiting for the number assignment."
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,b08187345293f8e876a81bde4be8ced44edfaa51,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T03:08:50Z,chap@anastigmatix.net,149,138,11,"Merge pull request #91 from tada/trackpg/master/lotrunc64

Merging expeditiously ... was just waiting for the number assignment."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,675254b0f17b76f05e72cba2e3b8d3e548ae7a43,Chapman Flack,2016-01-24T03:54:18Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T02:53:18Z,chap@anastigmatix.net,65,65,0,"Change default USAGE grant for 'java'.

Ok, it seems that another change to the PostgreSQL large object APIs
happened in PG 9.0: large objects got ACLs. Before that, anybody could
access them. In PL/Java, anybody still can. :(

The ideal accommodation on PL/Java's side will be to retarget PL/Java's
LargeObject code from the PG inv_api.c layer to the be-fsstubs.c layer
(if something doesn't make that prohibitively difficult), because that's
where the 9.0+ access checks happen. Otherwise, the checking code needs
to be duplicated in PL/Java.

The fsstubs layer has only-good-within-one-transaction semantics.
Happily, that's all that's expected for the JDBC *LOB interfaces,
which presumably are the public API this stuff should ultimately have.

Too involved for 1.5.0. However, this is a good argument for a least-
privilege, no-public-by-default installation of the 'java' language,
documenting how GRANT USAGE can then be used to allow specific
users/roles to make PL/Java functions.

Moral: this wasn't a problem before 9.0, when everybody knew LOBs had
no access controls. It became a problem when PG added access controls
for them, and PL/Java didn't follow suit. What's a trusted language
today could need adjustments tomorrow, so no-public-usage-by-default
really seems like the best posture; the user/installer should always be
encouraged to follow the least privilege principle."
,pljava-so/src/main/c/type/LargeObject.c,d2f6ef84e46765822f92cd8f403a7e4c1f8bb198,Chapman Flack,2016-01-24T02:15:46Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T02:00:09Z,chap@anastigmatix.net,84,73,11,"Add large object truncate and 64-bit offsets.

PG 8.3 introduced inv_truncate, and 9.3 made offsets/lengths 64 bit.

What's nice is that the Java and JNI method signatures have
always been 64-bit ready; now just stop downcasting to 32 on
9.3+ PostgreSQLs where 64 bit offsets are really accepted."
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,d2f6ef84e46765822f92cd8f403a7e4c1f8bb198,Chapman Flack,2016-01-24T02:15:46Z,chap@anastigmatix.net,Chapman Flack,2016-02-01T02:00:09Z,chap@anastigmatix.net,84,73,11,"Add large object truncate and 64-bit offsets.

PG 8.3 introduced inv_truncate, and 9.3 made offsets/lengths 64 bit.

What's nice is that the Java and JNI method signatures have
always been 64-bit ready; now just stop downcasting to 32 on
9.3+ PostgreSQLs where 64 bit offsets are really accepted."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,439f6947a62a6149cfe9813ca7424b72838d76cd,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:44:29Z,chap@anastigmatix.net,235,199,36,"Merge pull request #90 from tada/feature/master/ddrcomment

SQL comments on PL/Java's own DB objects, and user generated ones.

Bit of a luxury perhaps, but the last thing left on the list I sent around on December 18th."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,d3b77a98fcd05094aa8b13939b83830cfca81a7e,Chapman Flack,2016-01-26T05:38:30Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:38:30Z,chap@anastigmatix.net,4,2,2,One more javadoc straggler.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,83e9cda11af23505e0d794de62d623750fab9969,Chapman Flack,2016-01-26T05:33:14Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:33:14Z,chap@anastigmatix.net,6,3,3,"Fix two javadoc links.

While on javadocs, fix two links overlooked in the
annotation keyword revisions."
,pljava-so/src/main/c/Backend.c,3031b776f626b13e6513fb7eaa557137bc2b9654,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,40,20,20,"Merge pull request #89 from tada/chore/master/debuglevels

Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Exception.c,3031b776f626b13e6513fb7eaa557137bc2b9654,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,40,20,20,"Merge pull request #89 from tada/chore/master/debuglevels

Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Function.c,3031b776f626b13e6513fb7eaa557137bc2b9654,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,40,20,20,"Merge pull request #89 from tada/chore/master/debuglevels

Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/InstallHelper.c,3031b776f626b13e6513fb7eaa557137bc2b9654,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,40,20,20,"Merge pull request #89 from tada/chore/master/debuglevels

Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/include/pljava/pljava.h,3031b776f626b13e6513fb7eaa557137bc2b9654,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T05:06:02Z,chap@anastigmatix.net,40,20,20,"Merge pull request #89 from tada/chore/master/debuglevels

Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Backend.c,741940e0015402da1a0499b9f33e84e8b73f6902,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,73,54,19,"Merge pull request #88 from tada/feature/master/props+jmx

Cluster name as property and in jps title."
,pljava-so/src/main/c/InstallHelper.c,741940e0015402da1a0499b9f33e84e8b73f6902,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,73,54,19,"Merge pull request #88 from tada/feature/master/props+jmx

Cluster name as property and in jps title."
,pljava-so/src/main/include/pljava/InstallHelper.h,741940e0015402da1a0499b9f33e84e8b73f6902,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,73,54,19,"Merge pull request #88 from tada/feature/master/props+jmx

Cluster name as property and in jps title."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,741940e0015402da1a0499b9f33e84e8b73f6902,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T04:57:04Z,chap@anastigmatix.net,73,54,19,"Merge pull request #88 from tada/feature/master/props+jmx

Cluster name as property and in jps title."
,pljava-so/src/main/c/InstallHelper.c,114c866fd567ba6c859a7aaa11b392ddb689a861,Chapman Flack,2016-01-26T04:53:24Z,chap@anastigmatix.net,Chapman Flack,2016-01-26T04:53:24Z,chap@anastigmatix.net,2,2,0,"Don't leak a local ref.

JNI cleans 'em up automatically on returning to Java, but that
won't happen here because this is *outside* Java calling *in*."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,144a826e8d016b20a8b79c39f6a072135b4a1df8,Chapman Flack,2016-01-25T04:46:30Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T04:46:30Z,chap@anastigmatix.net,34,26,8,Let pre-existing call-handler comments be.
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,cd8b61b108e3673b3aa9fb26b70d8be8128392ad,Chapman Flack,2016-01-25T04:20:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T04:20:02Z,chap@anastigmatix.net,21,21,0,Comments for the objects InstallHelper makes.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,7baa6d76732fa821faba9eaade7b8721f9d4bb79,Chapman Flack,2016-01-25T03:54:23Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T03:54:23Z,chap@anastigmatix.net,14,14,0,Add comments on sqlj.* tables.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,b8d0c7de2982d1f3034324e80c783f378b8bf112,Chapman Flack,2016-01-25T03:33:08Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T03:33:08Z,chap@anastigmatix.net,42,21,21,"Reformat Commands.java javadocs.

Tweak the markup slightly to look less awkward when carried
automatically into SQL comments."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,aa95cc3ccf0f1696303ce61ddc5a06a6f217ea6c,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,130,120,10,Comments on SQL-generated objects.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,aa95cc3ccf0f1696303ce61ddc5a06a6f217ea6c,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,130,120,10,Comments on SQL-generated objects.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,aa95cc3ccf0f1696303ce61ddc5a06a6f217ea6c,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,130,120,10,Comments on SQL-generated objects.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,aa95cc3ccf0f1696303ce61ddc5a06a6f217ea6c,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,130,120,10,Comments on SQL-generated objects.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,aa95cc3ccf0f1696303ce61ddc5a06a6f217ea6c,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-25T02:45:13Z,chap@anastigmatix.net,130,120,10,Comments on SQL-generated objects.
,pljava-so/src/main/c/Backend.c,1eb3bd8d74b827f92b3e2cad06f8e010751446a0,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,40,20,20,"Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Exception.c,1eb3bd8d74b827f92b3e2cad06f8e010751446a0,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,40,20,20,"Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Function.c,1eb3bd8d74b827f92b3e2cad06f8e010751446a0,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,40,20,20,"Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/InstallHelper.c,1eb3bd8d74b827f92b3e2cad06f8e010751446a0,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,40,20,20,"Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/include/pljava/pljava.h,1eb3bd8d74b827f92b3e2cad06f8e010751446a0,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T22:21:49Z,chap@anastigmatix.net,40,20,20,"Make DEBUG1 quieter.

Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the
initial load message that identifies PL/Java and JVM versions.
(This is NOTICE if PL/Java is explicitly LOADed, so it's seen
by default, but in other cases you can now see it by enabling
DEBUG1, and not mixed in with a lot of other stuff.)"
,pljava-so/src/main/c/Backend.c,e8e2c714078c55de9dfdfdb44ca487d264f0df39,Chapman Flack,2016-01-24T20:36:42Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T21:07:27Z,chap@anastigmatix.net,71,52,19,"Cluster name as property and in jps title.

Make the cluster name easily available if it is set (to a
nonempty string, in PostgreSQL versions where it is available),
as a java system property and in the title visible to jps
and jvisualvm.

In passing, lose the default vmoption to lock out jvisualvm local
connections. Noah Misch persuades me that PostgreSQL itself doesn't
make special efforts to prevent things that already require access
as the postgres user on the server host, and it would be unpostgresy
to do so here. Instead, simply document how to disable attachment,
if the admin so desires."
,pljava-so/src/main/c/InstallHelper.c,e8e2c714078c55de9dfdfdb44ca487d264f0df39,Chapman Flack,2016-01-24T20:36:42Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T21:07:27Z,chap@anastigmatix.net,71,52,19,"Cluster name as property and in jps title.

Make the cluster name easily available if it is set (to a
nonempty string, in PostgreSQL versions where it is available),
as a java system property and in the title visible to jps
and jvisualvm.

In passing, lose the default vmoption to lock out jvisualvm local
connections. Noah Misch persuades me that PostgreSQL itself doesn't
make special efforts to prevent things that already require access
as the postgres user on the server host, and it would be unpostgresy
to do so here. Instead, simply document how to disable attachment,
if the admin so desires."
,pljava-so/src/main/include/pljava/InstallHelper.h,e8e2c714078c55de9dfdfdb44ca487d264f0df39,Chapman Flack,2016-01-24T20:36:42Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T21:07:27Z,chap@anastigmatix.net,71,52,19,"Cluster name as property and in jps title.

Make the cluster name easily available if it is set (to a
nonempty string, in PostgreSQL versions where it is available),
as a java system property and in the title visible to jps
and jvisualvm.

In passing, lose the default vmoption to lock out jvisualvm local
connections. Noah Misch persuades me that PostgreSQL itself doesn't
make special efforts to prevent things that already require access
as the postgres user on the server host, and it would be unpostgresy
to do so here. Instead, simply document how to disable attachment,
if the admin so desires."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,e8e2c714078c55de9dfdfdb44ca487d264f0df39,Chapman Flack,2016-01-24T20:36:42Z,chap@anastigmatix.net,Chapman Flack,2016-01-24T21:07:27Z,chap@anastigmatix.net,71,52,19,"Cluster name as property and in jps title.

Make the cluster name easily available if it is set (to a
nonempty string, in PostgreSQL versions where it is available),
as a java system property and in the title visible to jps
and jvisualvm.

In passing, lose the default vmoption to lock out jvisualvm local
connections. Noah Misch persuades me that PostgreSQL itself doesn't
make special efforts to prevent things that already require access
as the postgres user on the server host, and it would be unpostgresy
to do so here. Instead, simply document how to disable attachment,
if the admin so desires."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,cee53881d01ac9ed02581b8d4f3098e669be71c2,Chapman Flack,2016-01-23T21:07:09Z,chap@anastigmatix.net,Chapman Flack,2016-01-23T21:07:09Z,chap@anastigmatix.net,49,46,3,"Merge pull request #86 from tada/workaround/master/modelerrors

Improve message in strange javac error case."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,083742658cc92366a7cc5520943ab5878bd08e41,Chapman Flack,2016-01-23T21:04:12Z,chap@anastigmatix.net,Chapman Flack,2016-01-23T21:04:12Z,chap@anastigmatix.net,14,13,1,"Cover other possible javac-error case.

Another case was possible that wouldn't have created a message.
I still can't test this now, because javac won't mess up when
it knows I'm looking."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,da13b65ebe931ac45f60e059840ab77a993fe84d,Chapman Flack,2016-01-16T01:44:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-16T01:44:02Z,chap@anastigmatix.net,8,5,3,"Run unicode roundtrip test only on UTF8 server.

PostgreSQL's different definition of chr() for every encoding
other than UTF8 leads to spurious test failure for other
encodings.

Pushing directly - trivial change."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,82ad1da608df5af9c708ff7015f4c4a13d8c977d,Chapman Flack,2016-01-15T03:12:06Z,chap@anastigmatix.net,Chapman Flack,2016-01-15T03:12:06Z,chap@anastigmatix.net,35,33,2,"Improve message in strange javac error case.

Earlier in the week I saw truly perplexing errors that stemmed
from a simple missing or misspelled import, but javac, instead
of reporting the error, would supply DDRProcessor with an instance
of an internal Error class where the unresolvable value should have
been. So now, at least recognize that Error class and produce a more
helpful message. Now, of course, I am unable to test the change,
because javac (same version! same machine!) is now doing the right
thing every time. At least with this change, if the right conditions
are ever hit again for javac to misbehave as it was earlier, the
message should be more helpful."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,75927466668d4b386c711a89c27b35c6ff7e0a76,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,Chapman Flack,2016-01-12T02:11:43Z,chap@anastigmatix.net,180,122,58,"Merge pull request #85 from tada/api/master/annokwds

Change annotation keywords discussed on -dev.

May require alterations to code that has used the annotations as they have existed since 2013, but as there has not been a numbered release in that time, and anyone reliant on packaged distributions from numbered versions won't have had the feature yet, there will probably never be a better time to improve the keywords."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,c6805e532ed2853a5c329803aae79b86375b4dca,Chapman Flack,2016-01-05T04:59:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:49:29Z,chap@anastigmatix.net,176,120,56,"Change annotation keywords discussed on -dev.

@Function(type=  ->  effects=
@Function(complexType= -> type=
@Function(trust=RESTRICTED|UNRESTRICTED -> SANDBOXED|UNSANDBOXED

@Trigger(when= -> called=
@Trigger(when='a boolean condition' new tracks PG9.0+

Also added called=INSTEAD_OF and columns={} to track PG.
That is, the SQL generator can recognize them and generate
the DDR; nothing is changed in PL/Java runtime yet."
,pljava-packaging/src/main/java/JarX.java,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava-packaging/src/main/resources/pljava.control,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava-so/src/main/c/Backend.c,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava-so/src/main/c/InstallHelper.c,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava-so/src/main/include/pljava/InstallHelper.h,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,03c8365a26287c389c454708c4574823a2e8450c,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-11T04:45:48Z,chap@anastigmatix.net,2644,2392,252,"Merge pull request #82 from tada/feature/master/extension

CREATE EXTENSION support.

Changes the jar produced by pljava-packaging to be self-extracting, check pg_config and extract files to the proper places, therefore closes #6."
,pljava-so/src/main/include/pljava/Exception.h,29829e1c7ab7fa94570d1567f8400dc04de5f8b0,Chapman Flack,2016-01-08T03:32:23Z,chap@anastigmatix.net,Chapman Flack,2016-01-08T03:32:23Z,chap@anastigmatix.net,12,10,2,"Merge pull request #83 from tada/trackpg/master/pgattribute

Track PG9.5 change re compiler attributes."
,pljava-so/src/main/c/Session.c,a57ff5d1be7ed2a5bf45b842d925e8b6b30d3b9c,Chapman Flack,2016-01-08T03:31:45Z,chap@anastigmatix.net,Chapman Flack,2016-01-08T03:31:45Z,chap@anastigmatix.net,21,19,2,"Merge pull request #81 from tada/trackpg/master/uidsecctx

Track newer PG get/set user API."
,pljava-so/src/main/c/InstallHelper.c,893b5ce5e0b3362b81eb69e74b76df46fd7fe19c,Chapman Flack,2016-01-08T03:23:45Z,chap@anastigmatix.net,Chapman Flack,2016-01-08T03:23:45Z,chap@anastigmatix.net,83,66,17,"Fail CREATE EXTENSION on nonempty schema.

Otherwise, someone might say CREATE EXTENSION meaning
CREATE EXTENSION FROM unpackaged, and have it appear to
succeed but without packaging any of the objects."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,893b5ce5e0b3362b81eb69e74b76df46fd7fe19c,Chapman Flack,2016-01-08T03:23:45Z,chap@anastigmatix.net,Chapman Flack,2016-01-08T03:23:45Z,chap@anastigmatix.net,83,66,17,"Fail CREATE EXTENSION on nonempty schema.

Otherwise, someone might say CREATE EXTENSION meaning
CREATE EXTENSION FROM unpackaged, and have it appear to
succeed but without packaging any of the objects."
,pljava-so/src/main/c/Backend.c,6e3deec8c8eb4ba2895f230ceb3b371bf5844678,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,36,36,0,"Shortcircuit assign hooks during abort.

Make sure assign hooks won't do things that could throw errors
during transaction abort."
,pljava-so/src/main/c/InstallHelper.c,6e3deec8c8eb4ba2895f230ceb3b371bf5844678,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,36,36,0,"Shortcircuit assign hooks during abort.

Make sure assign hooks won't do things that could throw errors
during transaction abort."
,pljava-so/src/main/include/pljava/InstallHelper.h,6e3deec8c8eb4ba2895f230ceb3b371bf5844678,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,Chapman Flack,2016-01-07T03:30:34Z,chap@anastigmatix.net,36,36,0,"Shortcircuit assign hooks during abort.

Make sure assign hooks won't do things that could throw errors
during transaction abort."
,pljava-so/src/main/c/Backend.c,74cc1dab78fec84160eb7c6622ecb53cd8c880a9,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,118,99,19,"Workaround Windows creating_extension visibility.

Should now detect (in most cases?) when an extension is
being created, even in versions where creating_extension
isn't visible in Windows. Test depends on seeing the command
in ActivePortal; I am not sure what contexts could be contrived
where that wouldn't work right, but ordinary foreseeable cases
seem to work.

Got rid of pljavaInExtension: the idea that two cases have to be
distinguished (loading PL/Java itself as an extension, or using it
in the creation of some other extension) was sound, but the second
case isn't something that can be checked once at load time; it needs
a backend function that sqlj.install_jar can invoke whenever needed."
,pljava-so/src/main/c/InstallHelper.c,74cc1dab78fec84160eb7c6622ecb53cd8c880a9,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,118,99,19,"Workaround Windows creating_extension visibility.

Should now detect (in most cases?) when an extension is
being created, even in versions where creating_extension
isn't visible in Windows. Test depends on seeing the command
in ActivePortal; I am not sure what contexts could be contrived
where that wouldn't work right, but ordinary foreseeable cases
seem to work.

Got rid of pljavaInExtension: the idea that two cases have to be
distinguished (loading PL/Java itself as an extension, or using it
in the creation of some other extension) was sound, but the second
case isn't something that can be checked once at load time; it needs
a backend function that sqlj.install_jar can invoke whenever needed."
,pljava-so/src/main/include/pljava/InstallHelper.h,74cc1dab78fec84160eb7c6622ecb53cd8c880a9,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,118,99,19,"Workaround Windows creating_extension visibility.

Should now detect (in most cases?) when an extension is
being created, even in versions where creating_extension
isn't visible in Windows. Test depends on seeing the command
in ActivePortal; I am not sure what contexts could be contrived
where that wouldn't work right, but ordinary foreseeable cases
seem to work.

Got rid of pljavaInExtension: the idea that two cases have to be
distinguished (loading PL/Java itself as an extension, or using it
in the creation of some other extension) was sound, but the second
case isn't something that can be checked once at load time; it needs
a backend function that sqlj.install_jar can invoke whenever needed."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,74cc1dab78fec84160eb7c6622ecb53cd8c880a9,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,118,99,19,"Workaround Windows creating_extension visibility.

Should now detect (in most cases?) when an extension is
being created, even in versions where creating_extension
isn't visible in Windows. Test depends on seeing the command
in ActivePortal; I am not sure what contexts could be contrived
where that wouldn't work right, but ordinary foreseeable cases
seem to work.

Got rid of pljavaInExtension: the idea that two cases have to be
distinguished (loading PL/Java itself as an extension, or using it
in the creation of some other extension) was sound, but the second
case isn't something that can be checked once at load time; it needs
a backend function that sqlj.install_jar can invoke whenever needed."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,74cc1dab78fec84160eb7c6622ecb53cd8c880a9,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,Chapman Flack,2016-01-04T01:22:54Z,chap@anastigmatix.net,118,99,19,"Workaround Windows creating_extension visibility.

Should now detect (in most cases?) when an extension is
being created, even in versions where creating_extension
isn't visible in Windows. Test depends on seeing the command
in ActivePortal; I am not sure what contexts could be contrived
where that wouldn't work right, but ordinary foreseeable cases
seem to work.

Got rid of pljavaInExtension: the idea that two cases have to be
distinguished (loading PL/Java itself as an extension, or using it
in the creation of some other extension) was sound, but the second
case isn't something that can be checked once at load time; it needs
a backend function that sqlj.install_jar can invoke whenever needed."
,pljava-packaging/src/main/java/JarX.java,c3748d432ad10b0e63654a58d79f655482f8721c,Chapman Flack,2016-01-03T22:44:46Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T22:44:46Z,chap@anastigmatix.net,1282,1282,0,"Merge in a self-extracting jar tool.

Bring in a single-Java-class jar-self-extractor I wrote
about 16 years ago, given a slight facelift for 2016 by
dropping pre-Java-1.2 workarounds, and adding the ability
to call a Java-1.6+ script engine to rewrite extracted paths,
for example by running pg_config at extraction time, from a
suitable script embedded in the jar.

https://github.com/jcflack/cuspy/tree/JarXscripted is the
repo and branch where the original can be found."
,pljava-packaging/src/main/resources/pljava.control,4989916c37d60f3eb108f212adb71115e4c90446,Chapman Flack,2015-12-24T05:23:38Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T22:21:04Z,chap@anastigmatix.net,339,311,28,"PL/Java as a PostgreSQL 9.1+ extension.

Because PL/Java installation is already touched off by a simple
library LOAD (even on pre-9.1 databases without the extension
framework), extension support is largely a matter of having
extension scripts that touch off a LOAD. But the library does need
to detect that case and change some behaviors slightly. When LOAD
is used directly and something fails because the settings aren't
right, Backend reports a WARNING rather than an ERROR, to make it
as easy as possible to keep explore settings and eventually get them
right, without forcing a rollback. However, under CREATE EXTENSION,
it must be reported as an error, or the extension machinery will
think all is well.

Also, playing with the settings after CREATE EXTENSION failed can
result in getting PL/Java successfully installed but not as an
extension--easily remedied with CREATE EXTENSION FROM UNPACKAGED,
so a NOTICE suggesting that is reported in that case.

The method of finding the module pathname from the LOAD argument
doesn't work under CREATE EXTENSION (ActivePortal still refers to
the CREATE EXTENSION command itself, not the LOAD command in the
script), so as a workaround the script creates a temporary table
with the module pathname in it. This turns out to be useful anyway,
because it allows distinguishing the case of PL/Java itself being
installed by CREATE EXTENSION from the case where PL/Java is already
installed and its library is getting loaded in passing during
CREATE EXTENSION for something that depends on it. (Actual support
for PL/Java-managed extensions will have to come later, but the
case needs to be recognized even to say ""you can't do that yet."")

Reorganized the archives created by pljava-packaging so files are
at directory prefixes like pljava/pkglibdir, pljava/sharedir, etc.
That makes it easy to know where things should go in a manual
installation, but also opens the possibility of a self-extracting
archive that will use pg_config to look up the corresponding paths
at extraction time."
,pljava-so/src/main/c/Backend.c,4989916c37d60f3eb108f212adb71115e4c90446,Chapman Flack,2015-12-24T05:23:38Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T22:21:04Z,chap@anastigmatix.net,339,311,28,"PL/Java as a PostgreSQL 9.1+ extension.

Because PL/Java installation is already touched off by a simple
library LOAD (even on pre-9.1 databases without the extension
framework), extension support is largely a matter of having
extension scripts that touch off a LOAD. But the library does need
to detect that case and change some behaviors slightly. When LOAD
is used directly and something fails because the settings aren't
right, Backend reports a WARNING rather than an ERROR, to make it
as easy as possible to keep explore settings and eventually get them
right, without forcing a rollback. However, under CREATE EXTENSION,
it must be reported as an error, or the extension machinery will
think all is well.

Also, playing with the settings after CREATE EXTENSION failed can
result in getting PL/Java successfully installed but not as an
extension--easily remedied with CREATE EXTENSION FROM UNPACKAGED,
so a NOTICE suggesting that is reported in that case.

The method of finding the module pathname from the LOAD argument
doesn't work under CREATE EXTENSION (ActivePortal still refers to
the CREATE EXTENSION command itself, not the LOAD command in the
script), so as a workaround the script creates a temporary table
with the module pathname in it. This turns out to be useful anyway,
because it allows distinguishing the case of PL/Java itself being
installed by CREATE EXTENSION from the case where PL/Java is already
installed and its library is getting loaded in passing during
CREATE EXTENSION for something that depends on it. (Actual support
for PL/Java-managed extensions will have to come later, but the
case needs to be recognized even to say ""you can't do that yet."")

Reorganized the archives created by pljava-packaging so files are
at directory prefixes like pljava/pkglibdir, pljava/sharedir, etc.
That makes it easy to know where things should go in a manual
installation, but also opens the possibility of a self-extracting
archive that will use pg_config to look up the corresponding paths
at extraction time."
,pljava-so/src/main/c/InstallHelper.c,4989916c37d60f3eb108f212adb71115e4c90446,Chapman Flack,2015-12-24T05:23:38Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T22:21:04Z,chap@anastigmatix.net,339,311,28,"PL/Java as a PostgreSQL 9.1+ extension.

Because PL/Java installation is already touched off by a simple
library LOAD (even on pre-9.1 databases without the extension
framework), extension support is largely a matter of having
extension scripts that touch off a LOAD. But the library does need
to detect that case and change some behaviors slightly. When LOAD
is used directly and something fails because the settings aren't
right, Backend reports a WARNING rather than an ERROR, to make it
as easy as possible to keep explore settings and eventually get them
right, without forcing a rollback. However, under CREATE EXTENSION,
it must be reported as an error, or the extension machinery will
think all is well.

Also, playing with the settings after CREATE EXTENSION failed can
result in getting PL/Java successfully installed but not as an
extension--easily remedied with CREATE EXTENSION FROM UNPACKAGED,
so a NOTICE suggesting that is reported in that case.

The method of finding the module pathname from the LOAD argument
doesn't work under CREATE EXTENSION (ActivePortal still refers to
the CREATE EXTENSION command itself, not the LOAD command in the
script), so as a workaround the script creates a temporary table
with the module pathname in it. This turns out to be useful anyway,
because it allows distinguishing the case of PL/Java itself being
installed by CREATE EXTENSION from the case where PL/Java is already
installed and its library is getting loaded in passing during
CREATE EXTENSION for something that depends on it. (Actual support
for PL/Java-managed extensions will have to come later, but the
case needs to be recognized even to say ""you can't do that yet."")

Reorganized the archives created by pljava-packaging so files are
at directory prefixes like pljava/pkglibdir, pljava/sharedir, etc.
That makes it easy to know where things should go in a manual
installation, but also opens the possibility of a self-extracting
archive that will use pg_config to look up the corresponding paths
at extraction time."
,pljava-so/src/main/include/pljava/InstallHelper.h,4989916c37d60f3eb108f212adb71115e4c90446,Chapman Flack,2015-12-24T05:23:38Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T22:21:04Z,chap@anastigmatix.net,339,311,28,"PL/Java as a PostgreSQL 9.1+ extension.

Because PL/Java installation is already touched off by a simple
library LOAD (even on pre-9.1 databases without the extension
framework), extension support is largely a matter of having
extension scripts that touch off a LOAD. But the library does need
to detect that case and change some behaviors slightly. When LOAD
is used directly and something fails because the settings aren't
right, Backend reports a WARNING rather than an ERROR, to make it
as easy as possible to keep explore settings and eventually get them
right, without forcing a rollback. However, under CREATE EXTENSION,
it must be reported as an error, or the extension machinery will
think all is well.

Also, playing with the settings after CREATE EXTENSION failed can
result in getting PL/Java successfully installed but not as an
extension--easily remedied with CREATE EXTENSION FROM UNPACKAGED,
so a NOTICE suggesting that is reported in that case.

The method of finding the module pathname from the LOAD argument
doesn't work under CREATE EXTENSION (ActivePortal still refers to
the CREATE EXTENSION command itself, not the LOAD command in the
script), so as a workaround the script creates a temporary table
with the module pathname in it. This turns out to be useful anyway,
because it allows distinguishing the case of PL/Java itself being
installed by CREATE EXTENSION from the case where PL/Java is already
installed and its library is getting loaded in passing during
CREATE EXTENSION for something that depends on it. (Actual support
for PL/Java-managed extensions will have to come later, but the
case needs to be recognized even to say ""you can't do that yet."")

Reorganized the archives created by pljava-packaging so files are
at directory prefixes like pljava/pkglibdir, pljava/sharedir, etc.
That makes it easy to know where things should go in a manual
installation, but also opens the possibility of a self-extracting
archive that will use pg_config to look up the corresponding paths
at extraction time."
,pljava-packaging/src/main/java/JarX.java,6b4331aab884e521c264c3ade98dc2b9cb036e8b,Chapman Flack,2016-01-03T21:01:31Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T21:01:31Z,chap@anastigmatix.net,0,0,0,Relocate file for use in PL/Java.
,org/gjt/cuspy/JarX.java,290732e136d468307448fc9249af8cb3be89ed95,Chapman Flack,2016-01-03T16:53:29Z,chap@anastigmatix.net,Chapman Flack,2016-01-03T16:53:29Z,chap@anastigmatix.net,24,18,6,Loosen access mods for easier embedding.
,pljava-so/src/main/c/Session.c,71b4a1b281ce56204573065225410d04dbba87c7,Chapman Flack,2016-01-02T22:16:56Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T22:16:56Z,chap@anastigmatix.net,21,19,2,"Track newer PG get/set user API.

Use, where present, the newer API introduced in PostgreSQL 9.0,
8.4.2, 8.3.9, and 8.2.15, eventually allowing removal of the
old API described in code comments as ""only provided for ...
pljava"" for a while now, and more recently requested by Noah Misch."
,pljava-so/src/main/c/Backend.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/Exception.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/Function.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/InstallHelper.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/SPI.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/Session.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/XactListener.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/backports.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/AclId.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Array.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Boolean.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Byte.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Composite.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Double.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Float.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Integer.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/LargeObject.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Long.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Oid.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Short.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/String.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Time.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Timestamp.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/TupleTable.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/Type.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/UDT.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/type/byte_array.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/Backend.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/SPI.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/backports.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/pljava.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/type/AclId.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/include/pljava/type/Array.h,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,src/C/pljava/type/String.c,d1f50eec8665fc334c1d280e9b96305869fccc50,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:17:07Z,chap@anastigmatix.net,805,61,744,"Merge pull request #80 from tada/chore/master/pgversionnum

Simplify and prune PG version conditionals."
,pljava-so/src/main/c/Session.c,3d6e0dfbc3a06046b7dfe3d9f81eb381f6e9367b,Chapman Flack,2016-01-02T20:13:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:13:13Z,chap@anastigmatix.net,8,5,3,"Correct two converted conditions.

While making everything as simple as possible, avoid making it
simpler...."
,pljava-so/src/main/include/pljava/pljava.h,3d6e0dfbc3a06046b7dfe3d9f81eb381f6e9367b,Chapman Flack,2016-01-02T20:13:13Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T20:13:13Z,chap@anastigmatix.net,8,5,3,"Correct two converted conditions.

While making everything as simple as possible, avoid making it
simpler...."
,org/gjt/cuspy/JarX.java,59d9937b89ff83d8888ae1d6cb6e7eeca1930bb2,Chapman Flack,2016-01-02T17:51:01Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T17:51:01Z,chap@anastigmatix.net,112,105,7,"Now can include a path-resolver script.

A JSR 223 script can be supplied in the manifest to compute
the actual pathnames during extraction."
,org/gjt/cuspy/JarX.java,71f35a81fe2a1d4b1c24654ec785d74fe5c5ded3,Chapman Flack,2016-01-02T16:41:28Z,chap@anastigmatix.net,Chapman Flack,2016-01-02T16:41:28Z,chap@anastigmatix.net,97,82,15,"Javadoc polishing.

Some LONG overdue...."
,org/gjt/cuspy/JarX.java,7c58ef2fd10353ad82904122a0e9a34d05408596,Chapman Flack,2016-01-01T23:57:02Z,chap@anastigmatix.net,Chapman Flack,2016-01-01T23:57:02Z,chap@anastigmatix.net,188,162,26,"Now can set permissions.

Only the lowest common denominator, Java SE 6 kind."
,org/gjt/cuspy/JarX.java,c38deefb9e99f95a3be3582cac587297d50641bb,Chapman Flack,2016-01-01T05:54:48Z,chap@anastigmatix.net,Chapman Flack,2016-01-01T22:36:59Z,chap@anastigmatix.net,613,317,296,"Update to use Manifest/Attributes, new keys.

Will still honor charset= on content-type, but the Java
powers-that-be didn't go for that on bug 4310708, so there
needs to be a dedicated key to mean the same thing:
_JarX_CharsetInArchive
and there is also _JarX_CharsetWhenUnpacked to override
the platform default encoding for any given entry. Both can have
defaults in the main attributes.

Instead of opening the jar twice, just goes linearly through
a JarInputStream ... this requires the manifest to appear before
any entry to be extracted, but that does not seem too much to ask.
I did verify that it doesn't fail if a separate directory entry
for META-INF/ precedes the manifest."
,org/gjt/cuspy/JarX.java,7ab83e431c364487bc30046090af62b3702f8eef,Chapman Flack,2015-12-31T19:39:48Z,chap@anastigmatix.net,Chapman Flack,2015-12-31T19:39:48Z,chap@anastigmatix.net,52,25,27,Update to Collections and Generics.
,org/gjt/cuspy/JarX.java,5b1120f942293267e3a07dab9d35212c1aa0cfab,Chapman Flack,2015-12-31T05:54:30Z,chap@anastigmatix.net,Chapman Flack,2015-12-31T05:54:30Z,chap@anastigmatix.net,210,56,154,"Compiles, with nio Charset coders."
,pljava-so/src/main/c/XactListener.c,9f97947f3ef296a6d39979302e34e7c2cd2a47cc,Chapman Flack,2015-12-24T03:34:43Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:34:43Z,chap@anastigmatix.net,7,0,7,"Vacuum HAS_2PC.

Removing the PG < 8.2 branches left it trivially true."
,pljava-so/src/main/c/Function.c,73a703a15fb87863cf63f8743b52b153cd62c774,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,36,1,35,"Vacuum backports.{c,h}.

Eliminating the PG < 8.2 branches left nothing
besides #include <funcapi.h> which, amusingly enough, was
already in a couple of the files that were including backports."
,pljava-so/src/main/c/SPI.c,73a703a15fb87863cf63f8743b52b153cd62c774,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,36,1,35,"Vacuum backports.{c,h}.

Eliminating the PG < 8.2 branches left nothing
besides #include <funcapi.h> which, amusingly enough, was
already in a couple of the files that were including backports."
,pljava-so/src/main/c/backports.c,73a703a15fb87863cf63f8743b52b153cd62c774,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,36,1,35,"Vacuum backports.{c,h}.

Eliminating the PG < 8.2 branches left nothing
besides #include <funcapi.h> which, amusingly enough, was
already in a couple of the files that were including backports."
,pljava-so/src/main/c/type/Composite.c,73a703a15fb87863cf63f8743b52b153cd62c774,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,36,1,35,"Vacuum backports.{c,h}.

Eliminating the PG < 8.2 branches left nothing
besides #include <funcapi.h> which, amusingly enough, was
already in a couple of the files that were including backports."
,pljava-so/src/main/include/pljava/backports.h,73a703a15fb87863cf63f8743b52b153cd62c774,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:32:19Z,chap@anastigmatix.net,36,1,35,"Vacuum backports.{c,h}.

Eliminating the PG < 8.2 branches left nothing
besides #include <funcapi.h> which, amusingly enough, was
already in a couple of the files that were including backports."
,src/C/pljava/type/String.c,e0ef2e3a13f3bf24f7b7b2b16b8c9ada1d5476bb,Chapman Flack,2015-12-24T03:22:40Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:22:40Z,chap@anastigmatix.net,232,0,232,"Remove one stray source file.

It has been there since pull request #5 was merged after the real
file had been relocated, so the PR recreated it in the old place."
,pljava-so/src/main/c/Backend.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/Exception.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/Function.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/InstallHelper.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/SPI.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/Session.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/XactListener.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/backports.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/AclId.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Array.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Boolean.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Byte.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Composite.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Double.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Float.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Integer.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/LargeObject.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Long.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Oid.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Short.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/String.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Time.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Timestamp.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/TupleTable.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Type.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/UDT.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/byte_array.c,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/Backend.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/SPI.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/backports.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/pljava.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/type/AclId.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/include/pljava/type/Array.h,f7c5d64a6ffc96d57325c1f8b1e9b8862baf9b2b,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-24T03:18:58Z,chap@anastigmatix.net,528,58,470,"Rototill C source for PG_VERSION_NUM.

Having committed to PG 8.2 as a minimum version, simplify all
PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use
PG_VERSION_NUM (which appeared in 8.2), and completely eliminate
the branches for PG < 8.2."
,pljava-so/src/main/c/type/Type.c,4094e15fc826b67f5120d7087d722bb011ecc844,Chapman Flack,2015-12-23T04:16:21Z,chap@anastigmatix.net,Chapman Flack,2015-12-23T04:16:21Z,chap@anastigmatix.net,116,73,43,"Merge pull request #79 from tada/trackpg/master/issue65

Track PG8.3 change to find_coercion_pathway API.

Closes #65."
,docs/index.html,755edb0e584a87fd56da87993620cb7c1c39fe5e,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,186,99,87,"Merge pull request #78 from tada/chore/master/pre150

Five smaller of the pre-1.5.0 to-do items."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,755edb0e584a87fd56da87993620cb7c1c39fe5e,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,186,99,87,"Merge pull request #78 from tada/chore/master/pre150

Five smaller of the pre-1.5.0 to-do items."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,755edb0e584a87fd56da87993620cb7c1c39fe5e,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-23T03:58:37Z,chap@anastigmatix.net,186,99,87,"Merge pull request #78 from tada/chore/master/pre150

Five smaller of the pre-1.5.0 to-do items."
,docs/index.html,c07f366ae50045f70704377a4afb5fedaafe89cc,Chapman Flack,2015-12-21T06:18:12Z,chap@anastigmatix.net,Chapman Flack,2015-12-21T06:18:12Z,chap@anastigmatix.net,75,67,8,"Note historical nature of files in docs/.

All of that information is present in more current versions on the
project site and/or wiki. These old files are interesting, but only
if there's no risk of mistaking them for the current documentation.

Handled by adding an index.html that clearly describes them as
historical. It also makes no sense to have pljava-packaging continue
to zip them up in the package archive as if they were really the docs.

Whether it should put anything else their in place of these files is
an open question. Maybe the install process should just COMMENT ON
the sqlj schema and language entries, and mention the online doc URL
there."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,0d58ecacac2c82c50d2a12e328c5f33421034964,Chapman Flack,2015-12-21T04:40:31Z,chap@anastigmatix.net,Chapman Flack,2015-12-21T04:40:31Z,chap@anastigmatix.net,25,23,2,Add notes of Deployer/install.sql obsolescence.
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,0d58ecacac2c82c50d2a12e328c5f33421034964,Chapman Flack,2015-12-21T04:40:31Z,chap@anastigmatix.net,Chapman Flack,2015-12-21T04:40:31Z,chap@anastigmatix.net,25,23,2,Add notes of Deployer/install.sql obsolescence.
,pljava-so/src/main/c/type/Type.c,46ee44b019616afa229a0267bb7ccc01c02ec729,Chapman Flack,2015-12-21T02:19:10Z,chap@anastigmatix.net,Chapman Flack,2015-12-21T02:19:10Z,chap@anastigmatix.net,60,55,5,"Use PG 8.3 find_coercion_pathway API.

Ok, this compiles and doesn't break any -examples tests (and will give
errors for unhandled return cases, or a warning when disregarding
domain constraints). The reason it went unnoticed so long is that
Type_getCoerce{In,Out} are really very seldom called. They are almost
dead code--fairly contrived function declarations are needed even to
force them to be called for test purposes.

That seems to be mostly because Type_getCoerce{In,Out} won't be
called if Type_canReplaceType returns true, which it very often does,
because (a) Type_fromOid silently replaces domains with their base
types, and (b) Function builds the method signature by mapping the
SQL return type to a Java type and looking for a matching method, failing
if none is found, rather than looking for a method by its name and
parameter signature only, then validating its return type. So, essentially
by construction, coercion of the return type can't ever turn out to be
necessary.

It could, however, if the AS string gives the Java return type explicitly,
and it requires coercion to the (base type of the) SQL type. SQL/JRT has
no syntax to specify the Java return type, but as an extension it seems
PL/Java does: ""Function mapping"" in the wiki gives an example where it
precedes class.method, separated by a space. Only the example doesn't
work. That's because the getAS code accepts the syntax only when the
return type is purely alphanumeric (no dots, so non-package-qualified).
Not a recent change, has been that way since 2006. An = is also accepted,
though, even after a package-qualified return type. The example works if
retried with an =.

SQL/JRT, it seems to me, specifies the other approach to method
resolution, that is, find the method by name and parameter signature,
then work out what to do with its return type, but that would be a change
to current PL/Java behavior.

The unimplemented warning for RELABELTYPE to a domain type essentially
can't be triggered, because of the way any domain is replaced by its base
type before consulting canReplaceType. That's harmless for IN parameters.
For the return type, it's a type-safety hole: a PL/Java function can
return a value that isn't valid for its declared result domain. Fixing
that should be possible, but beyond the scope of this issue.

The not-implemented errors for COERCEVIAIO and ARRAYCOERCE can be
triggered, just by constructing exactly the sort of function declarations
where you would expect those things to happen. They would still be
arguably contrived cases, where the AS string specifies a method with
different types than would naturally correspond to the SQL ones.
Nevertheless, the ""Function mappping"" wiki page says ""PL/Java will use
a standard PostgreSQL explicit cast when the SQL type of the parameter
or return value does not correspond..."" and that's not completely true
at the moment, as long as some features available in standard PostgreSQL
explicit casts, like array or I/O coercion, aren't yet implemented.
Again, beyond the scope of issue 65. At least those cases now give clear
errors, instead of crashes or Krueger numbers as I just confirmed in a
build without this change, so this does in fact fix a latent bug.

Note that the single-row result set writers used for functions that
return composite or set-of-composite results have their own coercion
logic completely unrelated to this, and implemented in SPIConnection.java.
There are more moving parts here than I had hoped...."
,pljava-so/src/main/c/type/Type.c,d0fdb5d4967f8a85c9ba6339c6afb51bcdfd2db3,Chapman Flack,2015-12-19T23:26:24Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T23:26:24Z,chap@anastigmatix.net,56,18,38,Bit of refactoring.
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/Backend.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/Function.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/InstallHelper.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/JNICalls.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/Session.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/type/AclId.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/type/Timestamp.c,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/include/fallback/win32/dynloader.h,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/include/pljava/Backend.h,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/include/pljava/Function.h,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/include/pljava/InstallHelper.h,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/include/pljava/JNICalls.h,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,7b3ff7a7bc19505fefe7e48e0633bf1dea59cfef,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,Chapman Flack,2015-12-19T03:45:06Z,chap@anastigmatix.net,4005,3644,361,"Merge pull request #76 from tada/feature/master/installhelprb2

The long-in-coming install-procedure update.

There appearing no objection, I am pushing this big green ""confirm merge"" button."
,pljava-so/src/main/c/Backend.c,ea8223e54a3ec0c3e1d01acd45f72bc23d915952,Chapman Flack,2015-12-17T02:47:32Z,chap@anastigmatix.net,Chapman Flack,2015-12-17T02:47:32Z,chap@anastigmatix.net,14,10,4,"TWO more omissions caught late.

Supply one missing C prototype for completeness.

Can't claim a goal of not breaking PG 8.2 without providing
a CppAsString2 macro."
,pljava-so/src/main/c/InstallHelper.c,ea8223e54a3ec0c3e1d01acd45f72bc23d915952,Chapman Flack,2015-12-17T02:47:32Z,chap@anastigmatix.net,Chapman Flack,2015-12-17T02:47:32Z,chap@anastigmatix.net,14,10,4,"TWO more omissions caught late.

Supply one missing C prototype for completeness.

Can't claim a goal of not breaking PG 8.2 without providing
a CppAsString2 macro."
,pljava-so/src/main/c/Backend.c,a0f17a59b1709b4510ba84de9e86bb04ab52fa93,Chapman Flack,2015-12-16T03:43:53Z,chap@anastigmatix.net,Chapman Flack,2015-12-16T03:43:53Z,chap@anastigmatix.net,2,1,1,One cut/paste error caught late.
,pljava-so/src/main/include/pljava/InstallHelper.h,c572b1f318aa7a687eab723246830ff0612352b7,Chapman Flack,2015-12-15T23:28:38Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T23:28:38Z,chap@anastigmatix.net,24,13,11,Last-minute documentation tweaks.
,pljava-so/src/main/c/Backend.c,aca77cb11e88e92becdba35b1f3e997a53347073,Chapman Flack,2015-12-14T03:42:58Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,15,10,5,"Quiet gcc warnings remaining in Backend.c.

At the terminationTimeoutHandler was a tiny bit of unfinished business
from commit d5c603e."
,pljava-so/src/main/c/Backend.c,b17aa8cae8d493a94262a373a117496a05737310,Chapman Flack,2015-12-14T03:01:07Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,43,41,2,"Proclaim a default for pljava.classpath.

There may as well be an understood place to put the jar file so
the variable need not always be set."
,pljava-so/src/main/c/InstallHelper.c,b17aa8cae8d493a94262a373a117496a05737310,Chapman Flack,2015-12-14T03:01:07Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,43,41,2,"Proclaim a default for pljava.classpath.

There may as well be an understood place to put the jar file so
the variable need not always be set."
,pljava-so/src/main/include/pljava/InstallHelper.h,b17aa8cae8d493a94262a373a117496a05737310,Chapman Flack,2015-12-14T03:01:07Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,43,41,2,"Proclaim a default for pljava.classpath.

There may as well be an understood place to put the jar file so
the variable need not always be set."
,pljava-so/src/main/c/Backend.c,388bbb9ec716b230d3115dfd2eb438a7b9233a87,Chapman Flack,2015-12-14T01:33:27Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,157,144,13,"Add some JMX awareness.

The Java Management Extension tools are fabulous, but let's just keep
the attachment mechanism disabled by default. At the same time, may as
well let VisualVM see a nicer name than (Local application nnnnn).

The attachment option needed to be documented in the configuration
variables reference page, which didn't exist, so now it does."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,388bbb9ec716b230d3115dfd2eb438a7b9233a87,Chapman Flack,2015-12-14T01:33:27Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,157,144,13,"Add some JMX awareness.

The Java Management Extension tools are fabulous, but let's just keep
the attachment mechanism disabled by default. At the same time, may as
well let VisualVM see a nicer name than (Local application nnnnn).

The attachment option needed to be documented in the configuration
variables reference page, which didn't exist, so now it does."
,pljava-so/src/main/c/Backend.c,c8c4be9c6fb97e7b3b3c5d2cfe404ba7dcfa6776,Chapman Flack,2015-12-12T04:19:12Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,331,233,98,"More documentation refinement.

Update minimum PostgreSQL version; the reliance on PG_VERSION_NUM
implies >= 8.2.

Explaining any difference between Maven `package` and `install`
was more trouble than it's worth.

Correct a few typos (including a couple in diagnostic messages from
Backend.c).  Add Mac OS X and FreeBSD notes."
,pljava-so/src/main/c/Backend.c,0993bd069d81877f1940e4cad2413b48718c9620,Chapman Flack,2015-11-29T15:00:39Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,17,11,6,"More MSVC strictness.

MSVC2010's just not C99 no matter how often I try."
,pljava-so/src/main/c/Backend.c,1f1e8fed84f7841755278146e755e5af68b8d311,Chapman Flack,2015-11-26T05:01:41Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,78,32,46,"Work around symbols MSVC can't link to.

The long pgsql-hackers thread in 2014 discovering that MSVC could
silently link global variables to the wrong stuff if not properly
decorated in PG's .h files documents how the problem of silently
succeeding was solved by making such cases fail instead. That's
great, only now they fail.

These patches make the pessimistic assumption that no working way
to access the global variables will be found. That might not be the
case, because there's a recent new pgsql-hackers thread

http://www.postgresql.org/message-id/CAFj8pRAEj9vCj6kn0Vh7o1xRKty=zTmSSTrc1e2uSRMOq8cCVw@mail.gmail.com

that has rekindled some interest in finding a better solution to the
problem. Anyway, until that day, these workarounds should achieve the
correct behavior under MSVC."
,pljava-so/src/main/c/JNICalls.c,1f1e8fed84f7841755278146e755e5af68b8d311,Chapman Flack,2015-11-26T05:01:41Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,78,32,46,"Work around symbols MSVC can't link to.

The long pgsql-hackers thread in 2014 discovering that MSVC could
silently link global variables to the wrong stuff if not properly
decorated in PG's .h files documents how the problem of silently
succeeding was solved by making such cases fail instead. That's
great, only now they fail.

These patches make the pessimistic assumption that no working way
to access the global variables will be found. That might not be the
case, because there's a recent new pgsql-hackers thread

http://www.postgresql.org/message-id/CAFj8pRAEj9vCj6kn0Vh7o1xRKty=zTmSSTrc1e2uSRMOq8cCVw@mail.gmail.com

that has rekindled some interest in finding a better solution to the
problem. Anyway, until that day, these workarounds should achieve the
correct behavior under MSVC."
,pljava-so/src/main/c/type/Timestamp.c,1f1e8fed84f7841755278146e755e5af68b8d311,Chapman Flack,2015-11-26T05:01:41Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,78,32,46,"Work around symbols MSVC can't link to.

The long pgsql-hackers thread in 2014 discovering that MSVC could
silently link global variables to the wrong stuff if not properly
decorated in PG's .h files documents how the problem of silently
succeeding was solved by making such cases fail instead. That's
great, only now they fail.

These patches make the pessimistic assumption that no working way
to access the global variables will be found. That might not be the
case, because there's a recent new pgsql-hackers thread

http://www.postgresql.org/message-id/CAFj8pRAEj9vCj6kn0Vh7o1xRKty=zTmSSTrc1e2uSRMOq8cCVw@mail.gmail.com

that has rekindled some interest in finding a better solution to the
problem. Anyway, until that day, these workarounds should achieve the
correct behavior under MSVC."
,pljava-so/src/main/include/pljava/Backend.h,1f1e8fed84f7841755278146e755e5af68b8d311,Chapman Flack,2015-11-26T05:01:41Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,78,32,46,"Work around symbols MSVC can't link to.

The long pgsql-hackers thread in 2014 discovering that MSVC could
silently link global variables to the wrong stuff if not properly
decorated in PG's .h files documents how the problem of silently
succeeding was solved by making such cases fail instead. That's
great, only now they fail.

These patches make the pessimistic assumption that no working way
to access the global variables will be found. That might not be the
case, because there's a recent new pgsql-hackers thread

http://www.postgresql.org/message-id/CAFj8pRAEj9vCj6kn0Vh7o1xRKty=zTmSSTrc1e2uSRMOq8cCVw@mail.gmail.com

that has rekindled some interest in finding a better solution to the
problem. Anyway, until that day, these workarounds should achieve the
correct behavior under MSVC."
,pljava-so/src/main/include/fallback/win32/dynloader.h,c9f96eeee3b30b53c586d1892aaec9a152ab58f7,Chapman Flack,2015-11-24T03:08:11Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,21,21,0,"Work around PG's missing dynloader.h for MSVC.

For some reason, Windows builds seem to end up missing dynloader.h
(which should have been copied from src/backend/port/dynloader/win32.h
as happens for other platforms).

Some discussion at
http://www.postgresql.org/message-id/5647BDDB.7010705@anastigmatix.net
but nothing concluded yet."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,33da444db1034459beb2d6d5c81911c9db84d10e,Chapman Flack,2015-11-22T01:31:17Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,53,34,19,"Don't fail in remove_jar if schema dropped.

The pljava-examples jar has long had an annoying behavior because
its remove actions drop its schema, and if deployRemove had changed
the schema's classpath to include the jar, it would fail upon trying
to restore the original classpath on the now-nonexistent schema.

Resolved by telling deployRemove it's ok for the classpath restoration
to fail if the reason is the schema's gone. All references to the removed
jar will be gone from classpath_entry anyway; referential integrity
sees to that."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava-so/src/main/c/type/AclId.c,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,373a80d7ef1d4c84f2efc927baa194390a162bd0,Chapman Flack,2015-11-21T22:45:44Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,215,166,49,"Handle PostgreSQL 8.1+ roles correctly.

At least, cover the cases that obviously mess up in execution of
deployment descriptors.

This represents an executive decision that PG < 8.1 is no longer
supported."
,pljava-so/src/main/c/Session.c,10ea1e50ab26d8e5d36abbf569471a8775a627c1,Chapman Flack,2015-11-21T19:30:07Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,26,18,8,"Don't leave SET ROLE broken after DDR execution.

Comments in miscinit.c suggest the PostgreSQL team considers
{Get,Set}UserIdAndContext to be obsolete API kept around only
for PL/Java, with {Get,Set}UserIdAndSecContext being the preferred
newer API. Something for another day...."
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,10ea1e50ab26d8e5d36abbf569471a8775a627c1,Chapman Flack,2015-11-21T19:30:07Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,26,18,8,"Don't leave SET ROLE broken after DDR execution.

Comments in miscinit.c suggest the PostgreSQL team considers
{Get,Set}UserIdAndContext to be obsolete API kept around only
for PL/Java, with {Get,Set}UserIdAndSecContext being the preferred
newer API. Something for another day...."
,pljava-so/src/main/c/Backend.c,f11bbf039467fa518be9500ade53d503b675270b,Chapman Flack,2015-12-15T02:22:20Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:59Z,chap@anastigmatix.net,1398,1375,23,"Begin new build and installation instructions.

Also document the existing examples, and add a new one, a fully worked
hello, world to demonstrate building, install_jar, and set_classpath.

Also add pljava.enable to simplify <9.2 installs, as explained in the
docs.

Alter the errhint for saving the settings in the <9.2 case.
Saving the settings with ALTER DATABASE ... SET won't work there, they
have to go in postgresql.conf.

Also masks the exact postgresql.conf path if the user isn't superuser.
I'm fairly sure there's no code path to produce this message if the user
isn't superuser, but a simple check is more readable than a proof."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,f05c3d7d24c1f449a3fb69edf9901098ba8eff73,Chapman Flack,2015-11-20T02:47:38Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,170,170,0,"Part of issue #12, schema migration.

Add a naming system for schema variants that have existed
during PL/Java's VCS history. A quick check looks at the existing
tables, if any, to infer what schema is there.

This allows a second or subsequent LOAD to succeed without trying
to recreate tables, if a quick check suggests the existing tables
are as the code expects. If an earlier PL/Java schema is recognized,
and a recipe for migrating from it is available, the schema is
migrated. (Recommendation: do PL/Java upgrade in a transaction, so
schema changes can be rolled back if something is unsatisfactory.)

The two supplied recipes handle schemas as far back as 2006-02-26,
anyway."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,f05c3d7d24c1f449a3fb69edf9901098ba8eff73,Chapman Flack,2015-11-20T02:47:38Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,170,170,0,"Part of issue #12, schema migration.

Add a naming system for schema variants that have existed
during PL/Java's VCS history. A quick check looks at the existing
tables, if any, to infer what schema is there.

This allows a second or subsequent LOAD to succeed without trying
to recreate tables, if a quick check suggests the existing tables
are as the code expects. If an earlier PL/Java schema is recognized,
and a recipe for migrating from it is available, the schema is
migrated. (Recommendation: do PL/Java upgrade in a transaction, so
schema changes can be rolled back if something is unsatisfactory.)

The two supplied recipes handle schemas as far back as 2006-02-26,
anyway."
,pljava-so/src/main/c/Backend.c,6498b9e9b5b55bae412eaadd4f63446d65d172be,Chapman Flack,2015-12-15T02:18:39Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,73,48,25,Thanks to Ken Olson reporting MSVC2010 complaints.
,pljava-so/src/main/c/InstallHelper.c,6498b9e9b5b55bae412eaadd4f63446d65d172be,Chapman Flack,2015-12-15T02:18:39Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,73,48,25,Thanks to Ken Olson reporting MSVC2010 complaints.
,pljava-so/src/main/c/JNICalls.c,6498b9e9b5b55bae412eaadd4f63446d65d172be,Chapman Flack,2015-12-15T02:18:39Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,73,48,25,Thanks to Ken Olson reporting MSVC2010 complaints.
,pljava-so/src/main/include/pljava/JNICalls.h,6498b9e9b5b55bae412eaadd4f63446d65d172be,Chapman Flack,2015-12-15T02:18:39Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,73,48,25,Thanks to Ken Olson reporting MSVC2010 complaints.
,pljava-so/src/main/c/InstallHelper.c,5f250066a839dad68e8d30d3138607f07907dc75,Chapman Flack,2015-11-13T05:34:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,4,3,1,"Work around Windows symbol visibility.

Ken Olson reports the MSVC linker can't see the global pkglib_path,
even though it can see the function get_pkglib_path.

Dutifully working around that here, though I suspect in this branch
that's going to be the tip of the iceberg."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/c/Backend.c,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/c/Function.c,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/c/InstallHelper.c,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/include/pljava/Function.h,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/include/pljava/InstallHelper.h,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,ac425e085bf91c2488706ef8a3d8e4a1b77791ab,Chapman Flack,2015-12-15T00:48:01Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,239,232,7,"InstallHelper groundwork() ensures good schema.

The language handler functions are created with CREATE OR REPLACE
so they will be sure to refer to the newly-specified native library,
without requiring a cascading drop of everything depending on them.

Most of what belongs in the schema can be autogenerated into a
pljava.ddr by annotations in Commands.java. No Deployer or install.sql
to keep in sync. (For some reason the byte[] parameters had to be
explicitly SQLType'd bytea, even though the DDRProcessor type mapper
is supposed to know that. A puzzle for another day.)"
,pljava-so/src/main/c/Backend.c,228e40765b5726ac4de7f662512c361fa1afcfc5,Chapman Flack,2015-12-15T02:42:18Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,269,260,9,"Add to functions of InstallHelper.

The hello() function is passed information from the backend that
would be nice to be able to refer to in Java properties, and also
constructs an informative message returned to the backend for
display.

Let Backend.c use the JVMOptList only for things that have to
be set there. Anything that's an ordinary system property can
be set in hello.

... and one of those things almost certainly should be
java.awt.headless. In the near-unimaginable other case, it can
be overridden in pljava.vmoptions like anything else."
,pljava-so/src/main/c/InstallHelper.c,228e40765b5726ac4de7f662512c361fa1afcfc5,Chapman Flack,2015-12-15T02:42:18Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,269,260,9,"Add to functions of InstallHelper.

The hello() function is passed information from the backend that
would be nice to be able to refer to in Java properties, and also
constructs an informative message returned to the backend for
display.

Let Backend.c use the JVMOptList only for things that have to
be set there. Anything that's an ordinary system property can
be set in hello.

... and one of those things almost certainly should be
java.awt.headless. In the near-unimaginable other case, it can
be overridden in pljava.vmoptions like anything else."
,pljava-so/src/main/include/pljava/InstallHelper.h,228e40765b5726ac4de7f662512c361fa1afcfc5,Chapman Flack,2015-12-15T02:42:18Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,269,260,9,"Add to functions of InstallHelper.

The hello() function is passed information from the backend that
would be nice to be able to refer to in Java properties, and also
constructs an informative message returned to the backend for
display.

Let Backend.c use the JVMOptList only for things that have to
be set there. Anything that's an ordinary system property can
be set in hello.

... and one of those things almost certainly should be
java.awt.headless. In the near-unimaginable other case, it can
be overridden in pljava.vmoptions like anything else."
,pljava/src/main/java/org/postgresql/pljava/internal/InstallHelper.java,228e40765b5726ac4de7f662512c361fa1afcfc5,Chapman Flack,2015-12-15T02:42:18Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,269,260,9,"Add to functions of InstallHelper.

The hello() function is passed information from the backend that
would be nice to be able to refer to in Java properties, and also
constructs an informative message returned to the backend for
display.

Let Backend.c use the JVMOptList only for things that have to
be set there. Anything that's an ordinary system property can
be set in hello.

... and one of those things almost certainly should be
java.awt.headless. In the near-unimaginable other case, it can
be overridden in pljava.vmoptions like anything else."
,pljava-so/src/main/c/Backend.c,1f25073ab2380f51ed95be495eff2d6fe3dbf00a,Chapman Flack,2015-12-15T02:13:26Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,216,213,3,"Add InstallHelper to keep hairy code from Backend.

Executive decision: attempts to ""finish"" the installation (creating
schema, language handlers, etc.) will only be made in the LOAD case.
In any other case where initialization is requested, assume things are
already set up, or explicitly being set up."
,pljava-so/src/main/c/InstallHelper.c,1f25073ab2380f51ed95be495eff2d6fe3dbf00a,Chapman Flack,2015-12-15T02:13:26Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,216,213,3,"Add InstallHelper to keep hairy code from Backend.

Executive decision: attempts to ""finish"" the installation (creating
schema, language handlers, etc.) will only be made in the LOAD case.
In any other case where initialization is requested, assume things are
already set up, or explicitly being set up."
,pljava-so/src/main/include/pljava/InstallHelper.h,1f25073ab2380f51ed95be495eff2d6fe3dbf00a,Chapman Flack,2015-12-15T02:13:26Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,216,213,3,"Add InstallHelper to keep hairy code from Backend.

Executive decision: attempts to ""finish"" the installation (creating
schema, language handlers, etc.) will only be made in the LOAD case.
In any other case where initialization is requested, assume things are
already set up, or explicitly being set up."
,pljava-so/src/main/c/Backend.c,a97f6e317a21a9f8239dbf2dc72ef2888fa344a5,Chapman Flack,2015-12-15T00:06:48Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,310,279,31,"Begin improving message helpfulness.

Some GUC hooks allow easily resuming the process if a setting
needed to be changed (as LOAD is a no-op after the first time,
so that isn't a way to try again)."
,pljava-so/src/main/c/Backend.c,af4f906660fb9b296b79c7b766d216db91969197,Chapman Flack,2015-12-15T02:45:10Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,317,197,120,"Factor init sequence into a restartable routine.

The initsequencer routine can pick up where it left off, whether
started by _PG_init, by the internal call handler, or by a GUC hook
if the admin is trying a different config setting.

Continue moving bits out of the initializeJavaVM, etc., routines
into additional stages in the sequencer. Eventually: have a stage where
the JVM is running and a Java method can be called to check for and do
the SQL function declarations, SQLJ schema population, etc.

Ability to re-create the VM to try a new classpath is what I had hoped
for, but in many years of the JNI docs the restriction to one JVM per
process hasn't been relaxed yet, and it seems to mean you can't start
a second even after shutting down the first. So in many cases the admin
will have to exit and start a new session if installation fails at that
point. That's still not too bad."
,pljava-so/src/main/c/Backend.c,398f3b876ed402bdaec8bc804f29e2be95c75139,Chapman Flack,2015-07-17T02:50:53Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,332,203,129,"Add a GUC option for libjvm location.

The linker used to embed a dependency for libjvm into the pljava shared
object, which required using one of several system-specific ways to get
the system's library loader (not PostgreSQL's) to be able to find libjvm,
or loading pljava would simply fail.

By omitting the linked-in dependency on libjvm, pljava can now successfully
load and then use PostgreSQL's own dlopen wrapper to find libjvm using the
pljava.libjvm_location option, or give a helpful error report.

The history of PGDLLEXPORT through the years has been
somewhat bewildering, and it begins to seem tidier to cleanly define
a PLJAVADLLEXPORT that is used only here and doesn't change its meaning
across PG releases."
,pljava-so/src/main/c/JNICalls.c,398f3b876ed402bdaec8bc804f29e2be95c75139,Chapman Flack,2015-07-17T02:50:53Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,332,203,129,"Add a GUC option for libjvm location.

The linker used to embed a dependency for libjvm into the pljava shared
object, which required using one of several system-specific ways to get
the system's library loader (not PostgreSQL's) to be able to find libjvm,
or loading pljava would simply fail.

By omitting the linked-in dependency on libjvm, pljava can now successfully
load and then use PostgreSQL's own dlopen wrapper to find libjvm using the
pljava.libjvm_location option, or give a helpful error report.

The history of PGDLLEXPORT through the years has been
somewhat bewildering, and it begins to seem tidier to cleanly define
a PLJAVADLLEXPORT that is used only here and doesn't change its meaning
across PG releases."
,pljava-so/src/main/include/pljava/JNICalls.h,398f3b876ed402bdaec8bc804f29e2be95c75139,Chapman Flack,2015-07-17T02:50:53Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:21:58Z,chap@anastigmatix.net,332,203,129,"Add a GUC option for libjvm location.

The linker used to embed a dependency for libjvm into the pljava shared
object, which required using one of several system-specific ways to get
the system's library loader (not PostgreSQL's) to be able to find libjvm,
or loading pljava would simply fail.

By omitting the linked-in dependency on libjvm, pljava can now successfully
load and then use PostgreSQL's own dlopen wrapper to find libjvm using the
pljava.libjvm_location option, or give a helpful error report.

The history of PGDLLEXPORT through the years has been
somewhat bewildering, and it begins to seem tidier to cleanly define
a PLJAVADLLEXPORT that is used only here and doesn't change its meaning
across PG releases."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,f3583fc788efd288b060c3683017a8c989d558b2,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:18:57Z,chap@anastigmatix.net,116,64,52,"Merge pull request #75 from tada/chore/master/javadoc8

Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`."
,pljava-so/src/main/c/type/String.c,257f9e6c0563b161f995980187fcc1399b68b60f,Chapman Flack,2015-12-15T12:17:16Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T12:17:16Z,chap@anastigmatix.net,38,36,2,"Merge pull request #74 from tada/bug/master/issue61

Avoid crash on exception before String_init."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,8e89344600d0c57381562b98710197ceb8b6e50c,Chapman Flack,2015-11-29T14:29:46Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:18:14Z,chap@anastigmatix.net,116,64,52,More groveling before JDK 8's javadoc strictness.
,pljava-so/src/main/c/type/String.c,f25b6eba75184903dd3c563ceb3adafd9def2a1b,Chapman Flack,2015-11-01T07:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-12-15T03:10:49Z,chap@anastigmatix.net,38,36,2,"Avoid crash on exception before String_init.

Exceptions thrown trying to load the first PL/Java implementation class
may need to be handled before String_init has completed, so String needs
some partial functionality at that point."
,pljava-so/src/main/c/type/AclId.c,02e34df12f7ce3ebc00e22b488a888a8de649fb7,Chapman Flack,2015-12-13T15:56:05Z,chap@anastigmatix.net,Chapman Flack,2015-12-13T15:56:05Z,chap@anastigmatix.net,18,10,8,"Merge pull request #73 from jcflack/trackpg/master/getuser95

Use 2-arg GetUserNameFromId on PG 9.5+.

Closes #48."
,pljava-so/src/main/c/type/AclId.c,583ce6a18382f5fd04a4e391430293c41b97a354,Chapman Flack,2015-12-12T02:07:24Z,chap@anastigmatix.net,Chapman Flack,2015-12-12T02:07:24Z,chap@anastigmatix.net,18,10,8,"Use 2-arg GetUserNameFromId on PG 9.5+.

As caught by mc-soi in #48.

Also eliminate some pre-8.1 conditional code.

Closes #48."
,pljava-so/src/main/c/type/UDT.c,583b0579ed46b860d07f81512f891d753ed50ec7,Chapman Flack,2015-12-12T01:50:59Z,chap@anastigmatix.net,Chapman Flack,2015-12-12T01:50:59Z,chap@anastigmatix.net,8,4,4,"Fix overlooked consequence of pull req 68.

Deriving PGSQL_*_VER from PG_VERSION_NUM in pljava.h changed
behavior in one case where an #if protected an #include
*before* pljava.h was included.  (There's another instance in AclId,
but that is for a pre-8.1 condition that can be removed entirely.)

Note: PG_VERSION_NUM itself appeared in 8.2, so that is now a version
minimum. Given that, it would be even safer (and reduce verbosity) to
dedicate one future commit to just rototill all of the sources and
change PGSQL_*_VER conditionals to direct ones on PG_VERSION_NUM.

Committing without a separate pull request, as follow-on to PR 68."
,pljava-so/src/main/c/Backend.c,fc8ccc8a134c3d93ae3599f4ae2d3e31b69288bd,Chapman Flack,2015-12-10T02:52:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:52:37Z,chap@anastigmatix.net,81,24,57,"Merge pull request #68 from jcflack/simplify/master/libdirmacro

Merge branch simplify/master/libdirmacro.

Merging after no comments on pull request."
,pljava-so/src/main/include/pljava/pljava.h,fc8ccc8a134c3d93ae3599f4ae2d3e31b69288bd,Chapman Flack,2015-12-10T02:52:37Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:52:37Z,chap@anastigmatix.net,81,24,57,"Merge pull request #68 from jcflack/simplify/master/libdirmacro

Merge branch simplify/master/libdirmacro.

Merging after no comments on pull request."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ThreadTest.java,200173ac3fdf5591fee7a0c345fe6dbf2a35db32,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,175,158,17,"Merge pull request #67 from jcflack/trackpg/master/stackbase

Track PostgreSQL's changes to stack base access.

Merging after no comments on pull request."
,pljava-so/src/main/c/ExecutionPlan.c,200173ac3fdf5591fee7a0c345fe6dbf2a35db32,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,175,158,17,"Merge pull request #67 from jcflack/trackpg/master/stackbase

Track PostgreSQL's changes to stack base access.

Merging after no comments on pull request."
,pljava-so/src/main/c/SPI.c,200173ac3fdf5591fee7a0c345fe6dbf2a35db32,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,175,158,17,"Merge pull request #67 from jcflack/trackpg/master/stackbase

Track PostgreSQL's changes to stack base access.

Merging after no comments on pull request."
,pljava-so/src/main/c/type/Portal.c,200173ac3fdf5591fee7a0c345fe6dbf2a35db32,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,175,158,17,"Merge pull request #67 from jcflack/trackpg/master/stackbase

Track PostgreSQL's changes to stack base access.

Merging after no comments on pull request."
,pljava-so/src/main/include/pljava/pljava.h,200173ac3fdf5591fee7a0c345fe6dbf2a35db32,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,Chapman Flack,2015-12-10T02:51:09Z,chap@anastigmatix.net,175,158,17,"Merge pull request #67 from jcflack/trackpg/master/stackbase

Track PostgreSQL's changes to stack base access.

Merging after no comments on pull request."
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/package-info.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava/src/main/java/org/postgresql/pljava/management/package-info.java,68d6459aca76b63804f2f62715dfcfcce411cc06,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-25T23:35:33Z,chap@anastigmatix.net,27,12,15,"Only fix javadoc nits that JDK 8 calls errors.

Annoying: https://bugs.openjdk.java.net/browse/JDK-8020619

Skipping pull request for this."
,pljava-so/src/main/c/Backend.c,9cacf4952debc5ebb62148bda7707dd915a375bd,Chapman Flack,2015-11-13T05:14:10Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T05:14:10Z,chap@anastigmatix.net,4,3,1,"Work around Windows symbol visibility.

Ken Olson reports that the Windows linker can't see the global
pkglib_path, but it *can* see the function get_pkglib_path. Sigh.
Well, as long as there's an uglier harder way to do something...."
,pljava-so/src/main/include/pljava/pljava.h,9c2d931af0d94bdf9d5d47c169049c7c8d96cfdf,Chapman Flack,2015-11-08T03:29:09Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:33:50Z,chap@anastigmatix.net,49,11,38,"Ok, simplify PGSQL_*_VER too.

Taking the PKGLIBDIR stuff out of the pom raised the question, what
were PGSQL_{MAJOR,MINOR,PATCH}_VER doing in there as well? The answer,
pretty much nothing: they are used all over the C code, but may as well
be derived in pljava.h from PG_VERSION_NUM. That's the way
PG_MODULE_MAGIC is computed, and our values had better match.

They were used in build.xml, as part of a bewildering check for whether
MSVC is new enough to have the rint() function but the PG version is too
old to know about it in pg_config.h. But that check (the second part,
anyway) can be done more concisely just by looking in pg_config.h.

One day, the pom might again want to refer to the PG version, for
example if it wants to put a PG version classifier on the built
artifact, but by that time, we may have found a tidier way to do it
than with a separate ant build file."
,pljava-so/src/main/c/Backend.c,f97825bf174a266621cd0c741b7d3f97b3cc9829,Chapman Flack,2015-11-03T03:44:36Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:32:54Z,chap@anastigmatix.net,23,1,22,"Expand $libdir a simpler way.

Backend.c has relied on a compile-time define PKGLIBDIR ever since the
first commit, but pkglib_path has been a global in miscadmin.h for
almost as long - only maybe seven months later. :)

Also fix an appendStringInfo{ -> String} that had been missed, in the
same place."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ThreadTest.java,36cbd476a39681e5d7227f3d54e6a8fb1c36b652,Chapman Flack,2015-11-08T05:27:38Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:21:13Z,chap@anastigmatix.net,175,158,17,"Track PostgreSQL's changes to stack base access.

set_stack_base() and restore_stack_base() were added in preference to
direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4,
9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included
in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP
macros (there is so much in miscadmin.h, I did not want to add it in
pljava.h and have it processed everywhere).

Also added example ThreadTest.java just to exercise the new logic.
However, if enabled to run from the deployment descriptor, it does
deadlock; apparently PG -> J -> (otherthread PG) works, but the deeper
PG -> J -> PG -> J -> (otherthread PG) does not, and I *suspect* it's
because of the JNI warning against mispairing bytecode monitorenters with
JNI monitorexits. But that is what the code has done for years now, so
if nothing has been reported, there must not be high demand for that use
pattern."
,pljava-so/src/main/c/ExecutionPlan.c,36cbd476a39681e5d7227f3d54e6a8fb1c36b652,Chapman Flack,2015-11-08T05:27:38Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:21:13Z,chap@anastigmatix.net,175,158,17,"Track PostgreSQL's changes to stack base access.

set_stack_base() and restore_stack_base() were added in preference to
direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4,
9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included
in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP
macros (there is so much in miscadmin.h, I did not want to add it in
pljava.h and have it processed everywhere).

Also added example ThreadTest.java just to exercise the new logic.
However, if enabled to run from the deployment descriptor, it does
deadlock; apparently PG -> J -> (otherthread PG) works, but the deeper
PG -> J -> PG -> J -> (otherthread PG) does not, and I *suspect* it's
because of the JNI warning against mispairing bytecode monitorenters with
JNI monitorexits. But that is what the code has done for years now, so
if nothing has been reported, there must not be high demand for that use
pattern."
,pljava-so/src/main/c/SPI.c,36cbd476a39681e5d7227f3d54e6a8fb1c36b652,Chapman Flack,2015-11-08T05:27:38Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:21:13Z,chap@anastigmatix.net,175,158,17,"Track PostgreSQL's changes to stack base access.

set_stack_base() and restore_stack_base() were added in preference to
direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4,
9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included
in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP
macros (there is so much in miscadmin.h, I did not want to add it in
pljava.h and have it processed everywhere).

Also added example ThreadTest.java just to exercise the new logic.
However, if enabled to run from the deployment descriptor, it does
deadlock; apparently PG -> J -> (otherthread PG) works, but the deeper
PG -> J -> PG -> J -> (otherthread PG) does not, and I *suspect* it's
because of the JNI warning against mispairing bytecode monitorenters with
JNI monitorexits. But that is what the code has done for years now, so
if nothing has been reported, there must not be high demand for that use
pattern."
,pljava-so/src/main/c/type/Portal.c,36cbd476a39681e5d7227f3d54e6a8fb1c36b652,Chapman Flack,2015-11-08T05:27:38Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:21:13Z,chap@anastigmatix.net,175,158,17,"Track PostgreSQL's changes to stack base access.

set_stack_base() and restore_stack_base() were added in preference to
direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4,
9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included
in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP
macros (there is so much in miscadmin.h, I did not want to add it in
pljava.h and have it processed everywhere).

Also added example ThreadTest.java just to exercise the new logic.
However, if enabled to run from the deployment descriptor, it does
deadlock; apparently PG -> J -> (otherthread PG) works, but the deeper
PG -> J -> PG -> J -> (otherthread PG) does not, and I *suspect* it's
because of the JNI warning against mispairing bytecode monitorenters with
JNI monitorexits. But that is what the code has done for years now, so
if nothing has been reported, there must not be high demand for that use
pattern."
,pljava-so/src/main/include/pljava/pljava.h,36cbd476a39681e5d7227f3d54e6a8fb1c36b652,Chapman Flack,2015-11-08T05:27:38Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:21:13Z,chap@anastigmatix.net,175,158,17,"Track PostgreSQL's changes to stack base access.

set_stack_base() and restore_stack_base() were added in preference to
direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4,
9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included
in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP
macros (there is so much in miscadmin.h, I did not want to add it in
pljava.h and have it processed everywhere).

Also added example ThreadTest.java just to exercise the new logic.
However, if enabled to run from the deployment descriptor, it does
deadlock; apparently PG -> J -> (otherthread PG) works, but the deeper
PG -> J -> PG -> J -> (otherthread PG) does not, and I *suspect* it's
because of the JNI warning against mispairing bytecode monitorenters with
JNI monitorexits. But that is what the code has done for years now, so
if nothing has been reported, there must not be high demand for that use
pattern."
,pljava-so/src/main/c/type/Type.c,11fd938bd01f963acaa624e776d96a5b602eace0,Chapman Flack,2015-11-13T04:06:37Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:06:37Z,chap@anastigmatix.net,12,6,6,"Merge pull request #66 from tada/bug/master/coerceout

Type_getCoerceOut correct statement order.

Calling this one obvious enough to be uncontroversial."
,pljava-so/src/main/c/type/Type.c,340b56bd551eb985e0dedf1e6084a036c224602c,Chapman Flack,2015-11-13T04:01:33Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T04:01:33Z,chap@anastigmatix.net,12,6,6,"Type_getCoerceOut correct statement order.

Ken Olson pointed this out as a case of 'dead code', but in fact it was
live use of an unassigned variable just before the function call that
was going to assign it. Had to be an editing mixup, has been that way
a very long time, and has probably not caused more problems only because
it's statistically rare for a random stack location to be exactly equal
to InvalidOid.

Scratches the surface of #65. A full solution for that issue will have to
come later, but this much was an obvious Heisenbug with an obvious fix."
,pljava-so/src/main/c/type/String.c,152c48ed1180923d4a7e0b04fc92262c059aaa9d,Chapman Flack,2015-11-13T03:51:12Z,chap@anastigmatix.net,Chapman Flack,2015-11-13T03:51:12Z,chap@anastigmatix.net,11,7,4,"Observe C90 decls-before-stmts rule.

Ken Olson points out that a recent change breaks compilation under
MSVC which does not, apparently, support the C99 standard before
Visual Studio 2013 (not used in EDB builds before PG 9.4!)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,0de8b77e50aaf54a24bd1c95aa86ba1bd73bf972,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,Thomas Hallgren,2015-10-20T13:53:28Z,thomas@tada.se,1659,1359,300,"Merge pull request #59 from jcflack/feature/master/udtsqlgen

Annotation-driven SQL for UDTs."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,5ce2ccaa147fbc311fbcc36a3436089e4ca21b21,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,20,13,7,"Late minor corrections.

Javadoc for 'implementor' in BaseUDT and MappedUDT showed it had been
copy/pasted from Function. package-info.java did not document new
ddr.implementor. It also turned out that ddr.implementor can't use an
empty string to mean ""don't wrap"" because javac passes such an option
to the processor as if it were null or not specified ... so
-Addr.implementor=- has been reserved for that purpose."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,5ce2ccaa147fbc311fbcc36a3436089e4ca21b21,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,20,13,7,"Late minor corrections.

Javadoc for 'implementor' in BaseUDT and MappedUDT showed it had been
copy/pasted from Function. package-info.java did not document new
ddr.implementor. It also turned out that ddr.implementor can't use an
empty string to mean ""don't wrap"" because javac passes such an option
to the processor as if it were null or not specified ... so
-Addr.implementor=- has been reserved for that purpose."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,5ce2ccaa147fbc311fbcc36a3436089e4ca21b21,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,20,13,7,"Late minor corrections.

Javadoc for 'implementor' in BaseUDT and MappedUDT showed it had been
copy/pasted from Function. package-info.java did not document new
ddr.implementor. It also turned out that ddr.implementor can't use an
empty string to mean ""don't wrap"" because javac passes such an option
to the processor as if it were null or not specified ... so
-Addr.implementor=- has been reserved for that purpose."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,5ce2ccaa147fbc311fbcc36a3436089e4ca21b21,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,Chapman Flack,2015-10-20T02:32:19Z,chap@anastigmatix.net,20,13,7,"Late minor corrections.

Javadoc for 'implementor' in BaseUDT and MappedUDT showed it had been
copy/pasted from Function. package-info.java did not document new
ddr.implementor. It also turned out that ddr.implementor can't use an
empty string to mean ""don't wrap"" because javac passes such an option
to the processor as if it were null or not specified ... so
-Addr.implementor=- has been reserved for that purpose."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,99b8cc8eda0e3dfeace5f722aa720c9cabedc155,Chapman Flack,2015-10-19T06:09:53Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T06:09:53Z,chap@anastigmatix.net,5,4,1,"ComplexTuple.logAndReturn needs IMMUTABLE.

That's how it was declared in the hand-maintained examples.ddr, and
letting it default to VOLATILE makes it produce TupleDesc reference
leak warnings for some reason, so I've added IMMUTABLE to the annotation.

At the same time, onNullInput=RETURNS_NULL is clearly needed, just by
glancing at the function, which does no null checking. That's also true
of Point, so that's added both places. This demonstrates an advantage of
the SQL generation ... the place where you put the annotation is exactly
where you're looking when you're looking at the code."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,99b8cc8eda0e3dfeace5f722aa720c9cabedc155,Chapman Flack,2015-10-19T06:09:53Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T06:09:53Z,chap@anastigmatix.net,5,4,1,"ComplexTuple.logAndReturn needs IMMUTABLE.

That's how it was declared in the hand-maintained examples.ddr, and
letting it default to VOLATILE makes it produce TupleDesc reference
leak warnings for some reason, so I've added IMMUTABLE to the annotation.

At the same time, onNullInput=RETURNS_NULL is clearly needed, just by
glancing at the function, which does no null checking. That's also true
of Point, so that's added both places. This demonstrates an advantage of
the SQL generation ... the place where you put the annotation is exactly
where you're looking when you're looking at the code."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,ef8bd76073ccb50dcbb6b2d396edbd6b0116396b,Chapman Flack,2015-10-18T21:18:44Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T04:30:46Z,chap@anastigmatix.net,174,118,56,"Conform to Point/ComplexTuple renames.

Completes the work on MappedUDT, with Point and ComplexTuple now
annotation examples, and the corresponding code removed from the
old hand-maintained examples.ddr.

In a couple last this-really-has-to-be-it review passes...

- some msg() calls had the Element parameter in the wrong place (and,
  being variadic and expecting extra parameters, didn't warn about it).
- whether to include length/alignment/storage in the output when 'like'
  is used should explicitly depend on whether they were set explicitly
  (is that explicit enough?); otherwise, in some cases it wouldn't be
  possible to override the values copied by like.
- removed a goofy constant in the VarlenaUDTTest left over from very
  early sanity checking.
- Shortened unnecessary full-qualification on some enums actually in
  scope."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,ef8bd76073ccb50dcbb6b2d396edbd6b0116396b,Chapman Flack,2015-10-18T21:18:44Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T04:30:46Z,chap@anastigmatix.net,174,118,56,"Conform to Point/ComplexTuple renames.

Completes the work on MappedUDT, with Point and ComplexTuple now
annotation examples, and the corresponding code removed from the
old hand-maintained examples.ddr.

In a couple last this-really-has-to-be-it review passes...

- some msg() calls had the Element parameter in the wrong place (and,
  being variadic and expecting extra parameters, didn't warn about it).
- whether to include length/alignment/storage in the output when 'like'
  is used should explicitly depend on whether they were set explicitly
  (is that explicit enough?); otherwise, in some cases it wouldn't be
  possible to override the values copied by like.
- removed a goofy constant in the VarlenaUDTTest left over from very
  early sanity checking.
- Shortened unnecessary full-qualification on some enums actually in
  scope."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,ef8bd76073ccb50dcbb6b2d396edbd6b0116396b,Chapman Flack,2015-10-18T21:18:44Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T04:30:46Z,chap@anastigmatix.net,174,118,56,"Conform to Point/ComplexTuple renames.

Completes the work on MappedUDT, with Point and ComplexTuple now
annotation examples, and the corresponding code removed from the
old hand-maintained examples.ddr.

In a couple last this-really-has-to-be-it review passes...

- some msg() calls had the Element parameter in the wrong place (and,
  being variadic and expecting extra parameters, didn't warn about it).
- whether to include length/alignment/storage in the output when 'like'
  is used should explicitly depend on whether they were set explicitly
  (is that explicit enough?); otherwise, in some cases it wouldn't be
  possible to override the values copied by like.
- removed a goofy constant in the VarlenaUDTTest left over from very
  early sanity checking.
- Shortened unnecessary full-qualification on some enums actually in
  scope."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,ef8bd76073ccb50dcbb6b2d396edbd6b0116396b,Chapman Flack,2015-10-18T21:18:44Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T04:30:46Z,chap@anastigmatix.net,174,118,56,"Conform to Point/ComplexTuple renames.

Completes the work on MappedUDT, with Point and ComplexTuple now
annotation examples, and the corresponding code removed from the
old hand-maintained examples.ddr.

In a couple last this-really-has-to-be-it review passes...

- some msg() calls had the Element parameter in the wrong place (and,
  being variadic and expecting extra parameters, didn't warn about it).
- whether to include length/alignment/storage in the output when 'like'
  is used should explicitly depend on whether they were set explicitly
  (is that explicit enough?); otherwise, in some cases it wouldn't be
  possible to override the values copied by like.
- removed a goofy constant in the VarlenaUDTTest left over from very
  early sanity checking.
- Shortened unnecessary full-qualification on some enums actually in
  scope."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,ef8bd76073ccb50dcbb6b2d396edbd6b0116396b,Chapman Flack,2015-10-18T21:18:44Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T04:30:46Z,chap@anastigmatix.net,174,118,56,"Conform to Point/ComplexTuple renames.

Completes the work on MappedUDT, with Point and ComplexTuple now
annotation examples, and the corresponding code removed from the
old hand-maintained examples.ddr.

In a couple last this-really-has-to-be-it review passes...

- some msg() calls had the Element parameter in the wrong place (and,
  being variadic and expecting extra parameters, didn't warn about it).
- whether to include length/alignment/storage in the output when 'like'
  is used should explicitly depend on whether they were set explicitly
  (is that explicit enough?); otherwise, in some cases it wouldn't be
  possible to override the values copied by like.
- removed a goofy constant in the VarlenaUDTTest left over from very
  early sanity checking.
- Shortened unnecessary full-qualification on some enums actually in
  scope."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/MappedUDT.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexTuple.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Point.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,21d8b59b881fbcd971a9349b65a18f59f2ab6824,Chapman Flack,2015-10-18T18:26:40Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:06:24Z,chap@anastigmatix.net,607,503,104,"Conform to BaseUDT rename, add MappedUDT.

Supporting MappedUDT is much simpler. It emits a
CREATE TYPE foo AS ( ... structure ... )
if a structure is provided, or not, if it isn't, followed by a
SELECT sqlj.add_type_mapping( ... ), and that's it.

Much javadoc also added.

This commit ends with pure renames of the Point and ComplexTuple
examples in preparation to make them annotation examples ... breaking
compilation until they are fixed up in the next commit, but git can
see where they went."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/BaseUDT.java,b9a9d6debb08b96985517db722e5403ff0b320f5,Chapman Flack,2015-10-18T16:33:51Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:03:16Z,chap@anastigmatix.net,0,0,0,"Rename UDT to BaseUDT (breaking change).

... to clear the way for also having MappedUDT.

So git doesn't lose it, no edits in the file yet, so it won't compile
until the following commit."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/VarlenaUDTTest.java,fe2297e7f46e23f4f64363c8e16d6be0d809f86b,Chapman Flack,2015-10-18T05:23:18Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T03:02:14Z,chap@anastigmatix.net,81,81,0,"Get that issue 52 test into the tree.

It is much slimmer when able to use a UDT annotation. :)"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,43072b64ee1dff88d3c6bcff205cff522528ee78,Chapman Flack,2015-10-18T04:53:34Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T02:59:40Z,chap@anastigmatix.net,81,22,59,"(Unbreaking) complete the ComplexScalar rename.

Make the ComplexScalar example an annotation example, and remove the
corresponding code from the hand-maintained examples.ddr."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/UDT.java,1af100588b70badc4b10327d0904f7faff5bb061,Chapman Flack,2015-10-09T00:58:49Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T02:58:16Z,chap@anastigmatix.net,983,764,219,"Add a class annotation to make a base/scalar UDT.

- Add the annotation, have DDRProcessor recognize it.
- Check the annotated class for the required properties and members.
- The snippets map formerly allowed only one type of annotation on
  a given element. That happened to work, but not now when a class
  could have both a UDT and a SQLAction annotation, for example.
  Adapt the map to key by element and snippet class, so snippets
  of different classes can be hung on an element and selectively
  retrieved.
- An old comment in populateAnnotationImpl suggested it would reduce
  boilerplate setter code if, failing to find a setter method, the
  field itself could be reflectively looked up and stored. That's done
  now, so setter methods are needed only when something more special
  has to be done.
- Function declarations will be synthesized automagically for the four
  mandatory (in, out, recv, send) methods, but to allow their properties
  to be individually adjusted, they can still accept Function
  annotations. That's done by hanging a new subclass of FunctionImpl on
  those elements, that generates the right special form of declaration,
  and has setters that refuse changes to certain properties where that
  wouldn't make sense.
- Treat the default implementor-tag (PostgreSQL if not changed with new
  ddr.implementor command line property) specially. Now that everything
  is getting wrapped with an implementor tag by default, the implied
  requires=""implementor-tag"" was holding everything back until released
  by the cycle-breaker, sometimes in puzzling order. The implementor tag
  that happens to be the default one should /not/ be treated as a
  pending requirement.
- Move ComplexScalar to annotation subpackage, in preparation for
  revamping it as an annotation example. So git won't lose track of it,
  this is a breaking change, to be fixed in the next commit with edits
  corresponding to the move."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,1af100588b70badc4b10327d0904f7faff5bb061,Chapman Flack,2015-10-09T00:58:49Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T02:58:16Z,chap@anastigmatix.net,983,764,219,"Add a class annotation to make a base/scalar UDT.

- Add the annotation, have DDRProcessor recognize it.
- Check the annotated class for the required properties and members.
- The snippets map formerly allowed only one type of annotation on
  a given element. That happened to work, but not now when a class
  could have both a UDT and a SQLAction annotation, for example.
  Adapt the map to key by element and snippet class, so snippets
  of different classes can be hung on an element and selectively
  retrieved.
- An old comment in populateAnnotationImpl suggested it would reduce
  boilerplate setter code if, failing to find a setter method, the
  field itself could be reflectively looked up and stored. That's done
  now, so setter methods are needed only when something more special
  has to be done.
- Function declarations will be synthesized automagically for the four
  mandatory (in, out, recv, send) methods, but to allow their properties
  to be individually adjusted, they can still accept Function
  annotations. That's done by hanging a new subclass of FunctionImpl on
  those elements, that generates the right special form of declaration,
  and has setters that refuse changes to certain properties where that
  wouldn't make sense.
- Treat the default implementor-tag (PostgreSQL if not changed with new
  ddr.implementor command line property) specially. Now that everything
  is getting wrapped with an implementor tag by default, the implied
  requires=""implementor-tag"" was holding everything back until released
  by the cycle-breaker, sometimes in puzzling order. The implementor tag
  that happens to be the default one should /not/ be treated as a
  pending requirement.
- Move ComplexScalar to annotation subpackage, in preparation for
  revamping it as an annotation example. So git won't lose track of it,
  this is a breaking change, to be fixed in the next commit with edits
  corresponding to the move."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ComplexScalar.java,1af100588b70badc4b10327d0904f7faff5bb061,Chapman Flack,2015-10-09T00:58:49Z,chap@anastigmatix.net,Chapman Flack,2015-10-19T02:58:16Z,chap@anastigmatix.net,983,764,219,"Add a class annotation to make a base/scalar UDT.

- Add the annotation, have DDRProcessor recognize it.
- Check the annotated class for the required properties and members.
- The snippets map formerly allowed only one type of annotation on
  a given element. That happened to work, but not now when a class
  could have both a UDT and a SQLAction annotation, for example.
  Adapt the map to key by element and snippet class, so snippets
  of different classes can be hung on an element and selectively
  retrieved.
- An old comment in populateAnnotationImpl suggested it would reduce
  boilerplate setter code if, failing to find a setter method, the
  field itself could be reflectively looked up and stored. That's done
  now, so setter methods are needed only when something more special
  has to be done.
- Function declarations will be synthesized automagically for the four
  mandatory (in, out, recv, send) methods, but to allow their properties
  to be individually adjusted, they can still accept Function
  annotations. That's done by hanging a new subclass of FunctionImpl on
  those elements, that generates the right special form of declaration,
  and has setters that refuse changes to certain properties where that
  wouldn't make sense.
- Treat the default implementor-tag (PostgreSQL if not changed with new
  ddr.implementor command line property) specially. Now that everything
  is getting wrapped with an implementor tag by default, the implied
  requires=""implementor-tag"" was holding everything back until released
  by the cycle-breaker, sometimes in puzzling order. The implementor tag
  that happens to be the default one should /not/ be treated as a
  pending requirement.
- Move ComplexScalar to annotation subpackage, in preparation for
  revamping it as an annotation example. So git won't lose track of it,
  this is a breaking change, to be fixed in the next commit with edits
  corresponding to the move."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,ca7fea76bb1ee91375f66d2d2604a897a64e6017,Chapman Flack,2015-10-10T01:38:31Z,chap@anastigmatix.net,Chapman Flack,2015-10-10T01:38:31Z,chap@anastigmatix.net,12,10,2,"Run UnicodeRoundTripTest only on 9.0+.

The query used in the test has ORDER BY inside aggregates
which would be a syntax error pre-9.0. Good use for deployment
descriptor conditionals. Also fix one silly error in the test.

Presuming that this also doesn't need a pull request."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,1b503ee1f5fb153e54c43b1015aec331efd8c434,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,189,94,95,"Whitespace policing only.

I'm going out on a limb and saying this doesn't need to be done
through a pull request."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,1b503ee1f5fb153e54c43b1015aec331efd8c434,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,189,94,95,"Whitespace policing only.

I'm going out on a limb and saying this doesn't need to be done
through a pull request."
,pljava-so/src/main/c/JNICalls.c,1b503ee1f5fb153e54c43b1015aec331efd8c434,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,189,94,95,"Whitespace policing only.

I'm going out on a limb and saying this doesn't need to be done
through a pull request."
,pljava-so/src/main/c/type/Timestamp.c,1b503ee1f5fb153e54c43b1015aec331efd8c434,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,Chapman Flack,2015-10-10T01:02:04Z,chap@anastigmatix.net,189,94,95,"Whitespace policing only.

I'm going out on a limb and saying this doesn't need to be done
through a pull request."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,837b03bc2397606d1a21c07bec487c7f9e9eb1f8,Thomas Hallgren,2015-10-09T07:28:16Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:28:16Z,thomas@tada.se,65,64,1,"Merge pull request #58 from jcflack/bug/master/issue4

Fix oldest outstanding github issue, enum support."
,pljava-so/src/main/c/type/String.c,837b03bc2397606d1a21c07bec487c7f9e9eb1f8,Thomas Hallgren,2015-10-09T07:28:16Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:28:16Z,thomas@tada.se,65,64,1,"Merge pull request #58 from jcflack/bug/master/issue4

Fix oldest outstanding github issue, enum support."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,8e5af450556bf7056862ef94d9ab97a68b173506,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,527,481,46,"Merge pull request #57 from jcflack/bug/master/issue21

Pass all Unicode codepoints transparently (issue #21)."
,pljava-so/src/main/c/JNICalls.c,8e5af450556bf7056862ef94d9ab97a68b173506,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,527,481,46,"Merge pull request #57 from jcflack/bug/master/issue21

Pass all Unicode codepoints transparently (issue #21)."
,pljava-so/src/main/c/type/String.c,8e5af450556bf7056862ef94d9ab97a68b173506,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,527,481,46,"Merge pull request #57 from jcflack/bug/master/issue21

Pass all Unicode codepoints transparently (issue #21)."
,pljava-so/src/main/include/pljava/JNICalls.h,8e5af450556bf7056862ef94d9ab97a68b173506,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:27:42Z,thomas@tada.se,527,481,46,"Merge pull request #57 from jcflack/bug/master/issue21

Pass all Unicode codepoints transparently (issue #21)."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-so/src/main/c/Backend.c,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,d2c3ffb04e4e4f18372aff1c9a4432c0178be3a1,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,Thomas Hallgren,2015-10-09T07:26:17Z,thomas@tada.se,704,632,72,"Merge pull request #56 from jcflack/feature/master/conditionalddr

Deployment descriptor conditionals as proposed on pljava-dev."
,pljava-so/src/main/c/type/String.c,b952096380c58930ffbe3eafb881c995e4f60201,Chapman Flack,2015-10-08T04:14:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-08T04:14:22Z,chap@anastigmatix.net,2,1,1,"Assign elementType from typeId for enum types.

Closes #4."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Enumeration.java,afe51d138eef79b2ebffdb9cff7a8419cf7cb2da,Chapman Flack,2015-10-08T04:13:06Z,chap@anastigmatix.net,Chapman Flack,2015-10-08T04:13:06Z,chap@anastigmatix.net,63,63,0,"Add testcase with enum parameter and return types.

Issue #4 causes these to fail."
,pljava-so/src/main/c/type/String.c,427ff5bf6f9aa7b721198f568855db6914f2d55f,Chapman Flack,2015-10-08T00:39:57Z,chap@anastigmatix.net,Chapman Flack,2015-10-08T00:39:57Z,chap@anastigmatix.net,22,11,11,"Cast away nuisance String.c warnings too.

Since String was left out of the general warning-squashfest
while undergoing this work...."
,pljava-so/src/main/c/JNICalls.c,c556d7e1960dc2ac321b0bf8fc3fb7614e9d79d9,Chapman Flack,2015-10-04T20:19:30Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:16:24Z,chap@anastigmatix.net,143,131,12,"Eliminate threadlock ops in string conversion.

The Java methods related to charset encoding/decoding may be called
repeatedly, and they don't require the threadlock to be released and
reacquired. I don't measure much difference in timing (I don't really
have a good ""average text"" corpus to test on; the test case for this
bug is worst case because it uses all of the biggest characters.)

Even without a compelling timing difference, the Java charset encoders/
decoders aren't thread safe, so I feel just that much better holding
on to the lock."
,pljava-so/src/main/c/type/String.c,c556d7e1960dc2ac321b0bf8fc3fb7614e9d79d9,Chapman Flack,2015-10-04T20:19:30Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:16:24Z,chap@anastigmatix.net,143,131,12,"Eliminate threadlock ops in string conversion.

The Java methods related to charset encoding/decoding may be called
repeatedly, and they don't require the threadlock to be released and
reacquired. I don't measure much difference in timing (I don't really
have a good ""average text"" corpus to test on; the test case for this
bug is worst case because it uses all of the biggest characters.)

Even without a compelling timing difference, the Java charset encoders/
decoders aren't thread safe, so I feel just that much better holding
on to the lock."
,pljava-so/src/main/include/pljava/JNICalls.h,c556d7e1960dc2ac321b0bf8fc3fb7614e9d79d9,Chapman Flack,2015-10-04T20:19:30Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:16:24Z,chap@anastigmatix.net,143,131,12,"Eliminate threadlock ops in string conversion.

The Java methods related to charset encoding/decoding may be called
repeatedly, and they don't require the threadlock to be released and
reacquired. I don't measure much difference in timing (I don't really
have a good ""average text"" corpus to test on; the test case for this
bug is worst case because it uses all of the biggest characters.)

Even without a compelling timing difference, the Java charset encoders/
decoders aren't thread safe, so I feel just that much better holding
on to the lock."
,pljava-so/src/main/c/type/String.c,aa83efe0232bec5a670c361b710210431d524949,Chapman Flack,2015-10-04T19:15:46Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:14:45Z,chap@anastigmatix.net,20,15,5,"Last method to update: createJavaString(text*).

Caution: untested ... nothing in the current code base seems
to call this."
,pljava-so/src/main/c/type/String.c,cbb27e24f5c9836484867664501386902a92e81f,Chapman Flack,2015-10-04T19:02:36Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:09:22Z,chap@anastigmatix.net,13,12,1,"Fix latent bug in unused method.

Looks as if String_createJavaString would return null
for a zero-length text argument ... if anything ever
calls it, which may not be the case AFAICT."
,pljava-so/src/main/c/JNICalls.c,25b81a22302e0f6b7209b8330860324162b28c1c,Chapman Flack,2015-10-04T02:17:37Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:05:48Z,chap@anastigmatix.net,236,197,39,"Make String.c use Java's charset en/decoders.

In this commit, all the conversions in String.c except
String_createJavaString(text*) which can have a bug fixed first."
,pljava-so/src/main/c/type/String.c,25b81a22302e0f6b7209b8330860324162b28c1c,Chapman Flack,2015-10-04T02:17:37Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:05:48Z,chap@anastigmatix.net,236,197,39,"Make String.c use Java's charset en/decoders.

In this commit, all the conversions in String.c except
String_createJavaString(text*) which can have a bug fixed first."
,pljava-so/src/main/include/pljava/JNICalls.h,25b81a22302e0f6b7209b8330860324162b28c1c,Chapman Flack,2015-10-04T02:17:37Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:05:48Z,chap@anastigmatix.net,236,197,39,"Make String.c use Java's charset en/decoders.

In this commit, all the conversions in String.c except
String_createJavaString(text*) which can have a bug fixed first."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UnicodeRoundTripTest.java,ab81bc7d72152017d3391f9dcfe84be20a20d3ab,Chapman Flack,2015-10-04T21:38:38Z,chap@anastigmatix.net,Chapman Flack,2015-10-04T23:05:47Z,chap@anastigmatix.net,139,138,1,"Test case for issue 21 Unicode handling.

This test case can be improved if rebased over pull request 56
conditionals in DDR. The query contains ORDER BY in aggregates,
so needs to be conditional on PG 9.0+. I have also duplicated
the declaration change for the logmessage function, so that will
merge away if rebased over PR 56."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/ConditionalDDR.java,b6784b60cc12498e94d7a133de7e3444d0cef5a7,Chapman Flack,2015-10-03T17:15:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,302,263,39,"Conditional DDR as proposed on pljava-dev.

Delayed by a nice pljava trivia brain teaser ... IF a function's
SQL declaration says it's immutable (or even stable, I guess), AND
you call it from the deployment descriptor install commands of the
jar that contains it, AND that's the first reference you've made to
its containing class ... ClassNotFoundException. Go ahead, explain THAT
one to Aunt Tillie.... (Hint: SPI change visibility rules.)"
,pljava-so/src/main/c/Backend.c,b6784b60cc12498e94d7a133de7e3444d0cef5a7,Chapman Flack,2015-10-03T17:15:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,302,263,39,"Conditional DDR as proposed on pljava-dev.

Delayed by a nice pljava trivia brain teaser ... IF a function's
SQL declaration says it's immutable (or even stable, I guess), AND
you call it from the deployment descriptor install commands of the
jar that contains it, AND that's the first reference you've made to
its containing class ... ClassNotFoundException. Go ahead, explain THAT
one to Aunt Tillie.... (Hint: SPI change visibility rules.)"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,b6784b60cc12498e94d7a133de7e3444d0cef5a7,Chapman Flack,2015-10-03T17:15:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,302,263,39,"Conditional DDR as proposed on pljava-dev.

Delayed by a nice pljava trivia brain teaser ... IF a function's
SQL declaration says it's immutable (or even stable, I guess), AND
you call it from the deployment descriptor install commands of the
jar that contains it, AND that's the first reference you've made to
its containing class ... ClassNotFoundException. Go ahead, explain THAT
one to Aunt Tillie.... (Hint: SPI change visibility rules.)"
,pljava/src/main/java/org/postgresql/pljava/management/DDRExecutor.java,b6784b60cc12498e94d7a133de7e3444d0cef5a7,Chapman Flack,2015-10-03T17:15:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,302,263,39,"Conditional DDR as proposed on pljava-dev.

Delayed by a nice pljava trivia brain teaser ... IF a function's
SQL declaration says it's immutable (or even stable, I guess), AND
you call it from the deployment descriptor install commands of the
jar that contains it, AND that's the first reference you've made to
its containing class ... ClassNotFoundException. Go ahead, explain THAT
one to Aunt Tillie.... (Hint: SPI change visibility rules.)"
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,b6784b60cc12498e94d7a133de7e3444d0cef5a7,Chapman Flack,2015-10-03T17:15:22Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,302,263,39,"Conditional DDR as proposed on pljava-dev.

Delayed by a nice pljava trivia brain teaser ... IF a function's
SQL declaration says it's immutable (or even stable, I guess), AND
you call it from the deployment descriptor install commands of the
jar that contains it, AND that's the first reference you've made to
its containing class ... ClassNotFoundException. Go ahead, explain THAT
one to Aunt Tillie.... (Hint: SPI change visibility rules.)"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,69068702107dac599e3f9ce1836cdc873ed237e0,Chapman Flack,2015-09-30T03:42:28Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,20,18,2,Now can set implementor in annotations.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,69068702107dac599e3f9ce1836cdc873ed237e0,Chapman Flack,2015-09-30T03:42:28Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,20,18,2,Now can set implementor in annotations.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,69068702107dac599e3f9ce1836cdc873ed237e0,Chapman Flack,2015-09-30T03:42:28Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,20,18,2,Now can set implementor in annotations.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,3a7f8fe8e61321d7da06cdbe25cad74ef8abf44f,Chapman Flack,2015-09-29T03:41:23Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,69,65,4,"Snippet implicitly requires its implementor-name.

That way, a snippet that will test some condition and enable that
implementor-name at install time can be declared to provide it, and
be emitted earlier. However, not to insist on supplying a snippet
that explicitly provides every implementor name ... some could just
be selected by the user with SET LOCAL pljava.implementors TO ...
before installing. So the implicit requirement will be counted in
indegree initially, to delay such a snippet as far as practical, but
only until a cycle-breaker releases it when no other progress can
be made."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,788ef807442c169d45c2ea232c8a6425949c8279,Chapman Flack,2015-09-29T01:58:31Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,56,36,20,"SQL generator now reports require cycles usefully.

Should have done that all along."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,e434c8d58746483f6a24bf645ff99834e8afc4e9,Chapman Flack,2015-09-28T23:15:17Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,47,37,10,"Now Snippet can carry implementor-name.

Nothing sets it yet, but it now defaults to PostgreSQL for everything, in
recognition of the fact that hardly any of the PG SQL code that gets
generated here will be in the exact ISO-prescribed syntax of the exact
five allowed, unadorned SQL statements.

Yes, that makes DDR files bigger. The zip format will compress them well."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,e434c8d58746483f6a24bf645ff99834e8afc4e9,Chapman Flack,2015-09-28T23:15:17Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,47,37,10,"Now Snippet can carry implementor-name.

Nothing sets it yet, but it now defaults to PostgreSQL for everything, in
recognition of the fact that hardly any of the PG SQL code that gets
generated here will be in the exact ISO-prescribed syntax of the exact
five allowed, unadorned SQL statements.

Yes, that makes DDR files bigger. The zip format will compress them well."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,792d0dca432b5fd1649dba56c2980a3037139673,Chapman Flack,2015-09-28T04:45:39Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:43Z,chap@anastigmatix.net,98,78,20,"Refactor SQLDeploymentDescriptor to check tags late.

No functional change (modulo log messages) should be seen yet."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,40bae780a24852eb2910171cd28866e00eaf8682,Chapman Flack,2015-09-26T03:52:50Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:28Z,chap@anastigmatix.net,164,161,3,"Starting javadoc tweaks, some lexical definitions."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/Lexicals.java,40bae780a24852eb2910171cd28866e00eaf8682,Chapman Flack,2015-09-26T03:52:50Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:28Z,chap@anastigmatix.net,164,161,3,"Starting javadoc tweaks, some lexical definitions."
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,40bae780a24852eb2910171cd28866e00eaf8682,Chapman Flack,2015-09-26T03:52:50Z,chap@anastigmatix.net,Chapman Flack,2015-10-03T17:33:28Z,chap@anastigmatix.net,164,161,3,"Starting javadoc tweaks, some lexical definitions."
,pljava-so/src/main/c/Exception.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/Function.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/Array.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/ErrorData.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/Float.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/Timestamp.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/Type.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/type/UDT.c,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/include/pljava/pljava.h,9b10e959c4dc4fe135a550c0bfd6407a47d6634a,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,Thomas Hallgren,2015-09-29T10:15:30Z,thomas@tada.se,79,56,23,"Merge pull request #53 from jcflack/cleanup/master/nativebuild

Cull gcc warnings to a comprehensible number."
,pljava-so/src/main/c/Exception.c,9579c491954a5ff401a52d295b77aa8f824861ac,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,16,14,2,"Merge pull request #55 from jcflack/bug/master/issue54

Only ignore the expected exception in method lookup."
,pljava-so/src/main/c/JNICalls.c,9579c491954a5ff401a52d295b77aa8f824861ac,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,16,14,2,"Merge pull request #55 from jcflack/bug/master/issue54

Only ignore the expected exception in method lookup."
,pljava-so/src/main/include/pljava/JNICalls.h,9579c491954a5ff401a52d295b77aa8f824861ac,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,Thomas Hallgren,2015-09-28T05:51:11Z,thomas@tada.se,16,14,2,"Merge pull request #55 from jcflack/bug/master/issue54

Only ignore the expected exception in method lookup."
,pljava-so/src/main/c/Exception.c,2d5d1f09073c84f775a7b7b0fbdaa7725a72b982,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,16,14,2,"Only ignore the expected exception in method lookup.

That way other exceptions (like a problem in a class initializer, or
out of memory) will not be hidden from view. Closes #54."
,pljava-so/src/main/c/JNICalls.c,2d5d1f09073c84f775a7b7b0fbdaa7725a72b982,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,16,14,2,"Only ignore the expected exception in method lookup.

That way other exceptions (like a problem in a class initializer, or
out of memory) will not be hidden from view. Closes #54."
,pljava-so/src/main/include/pljava/JNICalls.h,2d5d1f09073c84f775a7b7b0fbdaa7725a72b982,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,Chapman Flack,2015-09-27T21:17:06Z,chap@anastigmatix.net,16,14,2,"Only ignore the expected exception in method lookup.

That way other exceptions (like a problem in a class initializer, or
out of memory) will not be hidden from view. Closes #54."
,pljava-so/src/main/c/type/Timestamp.c,07c11cc89936203ae5d2f9df2e6c96310e8b8c79,Chapman Flack,2015-09-25T03:46:47Z,chap@anastigmatix.net,Chapman Flack,2015-09-25T03:46:47Z,chap@anastigmatix.net,4,2,2,"Squash long-to-int narrowing warning in Timestamp.

I was baffled why `tm_gmtoff` would ever be declared `long` until I saw
Tom Lane's comment [just this last May][revelation]: ""The fact that
`tm_gmtoff` is declared as `long` is no doubt a hangover from days when
`int` might be only 16 bits ....""  I'm not sure 'hangover' is the word
he meant but it seems strangely appropriate.

His solution was to cast to `int` without compunction, and so is mine.
There's even the luxury of saying `int32` and never again worrying about
whether it's big enough for ±86400 seconds.

[revelation]: http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=c90b85e4d9e4ae3bc26459cc54697e1adaa4315f"
,pljava-so/src/main/c/type/UDT.c,42bdb13927f92c1776f5309a40c108279c7ffa79,Chapman Flack,2015-09-24T04:26:50Z,chap@anastigmatix.net,Chapman Flack,2015-09-24T04:26:50Z,chap@anastigmatix.net,4,2,2,"Fix varlena UDT breaking if longer than 32767.

Spotted among the flurry of gcc warnings, most of which were nuisances.

Declaring `dataLen` as `int16` makes sense if looking at the `typlen`
catalog attribute, but then in `coerceScalarDatum` it can later get used
for a `varlena` size, which can be up to 1GB-ish.

It wasn't strictly necessary to change it also in `coerceScalarObject`
(`buffer.len` gets used for the var size there), but I did for consistency.
Other `dataLen`s later in the file were already `int32`, so now they all
are.

Closes #52."
,pljava-so/src/main/c/Function.c,3e259db9ce88b91b8dc5fd624f24e2f3efe8c495,Chapman Flack,2015-09-23T03:51:37Z,chap@anastigmatix.net,Chapman Flack,2015-09-23T03:51:37Z,chap@anastigmatix.net,10,6,4,"Squash silly conversion-to-bool warnings.

nar-maven-plugin turns on such aggressive gcc warnings that it ends up
warning about a = b ? c : d where the things are all bool. Sure, strictly
by the standard, c and d get integer-promoted and then have to be
narrowed back to bool, but gcc would know better than to give a warning
if bool really were _Bool. The thing is, PostgreSQL's c.h is defining it
to be char, so gcc doesn't know better.

If it were happening a ton of places I would just live with it or turn off
the warning, but changing two places isn't so bad. Rewrote using 'if' to
look less dorky than hanging a (bool) cast on a perfectly obviously
boolean expression."
,pljava-so/src/main/c/type/Array.c,3e259db9ce88b91b8dc5fd624f24e2f3efe8c495,Chapman Flack,2015-09-23T03:51:37Z,chap@anastigmatix.net,Chapman Flack,2015-09-23T03:51:37Z,chap@anastigmatix.net,10,6,4,"Squash silly conversion-to-bool warnings.

nar-maven-plugin turns on such aggressive gcc warnings that it ends up
warning about a = b ? c : d where the things are all bool. Sure, strictly
by the standard, c and d get integer-promoted and then have to be
narrowed back to bool, but gcc would know better than to give a warning
if bool really were _Bool. The thing is, PostgreSQL's c.h is defining it
to be char, so gcc doesn't know better.

If it were happening a ton of places I would just live with it or turn off
the warning, but changing two places isn't so bad. Rewrote using 'if' to
look less dorky than hanging a (bool) cast on a perfectly obviously
boolean expression."
,pljava-so/src/main/include/pljava/pljava.h,0b1b13938992425d91a6f5b409a7a132796fdd59,Chapman Flack,2015-09-16T22:01:20Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,8,8,0,Define away AssertVariableIsOfType when unusable.
,pljava-so/src/main/c/Exception.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/Array.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/ErrorData.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/Float.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/Type.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/UDT.c,8a8e1003887ab28d6c1b85ecd946c55de3cc797a,Chapman Flack,2015-09-15T04:39:15Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:09Z,chap@anastigmatix.net,19,10,9,"Zap a few more conversion (not sign-) warnings.

count|how
-----|------
  2  |  fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT)
  5  |  fixed using `size_t/Size` not `int`, locally verifiable
  1  |  cast to member defined by others, static `AssertVariableIsOfType`
  1  |  fixed with width suffix on literal"
,pljava-so/src/main/c/type/Array.c,ddfecfd25167229f821fd8b95cd8aec8b0528e68,Chapman Flack,2015-09-14T06:02:45Z,chap@anastigmatix.net,Chapman Flack,2015-09-21T21:50:08Z,chap@anastigmatix.net,5,1,4,Outwit one conversion (_not_ sign-conversion) warning.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,44310eb5698243d0fc8b6940d0ea039d74fdfd00,Thomas Hallgren,2015-09-21T06:46:40Z,thomas@tada.se,Thomas Hallgren,2015-09-21T06:46:40Z,thomas@tada.se,14,13,1,"Merge pull request #51 from jcflack/javadoc/master/jdk7-anno-bug

Note limitation of the workaround in pull #42."
,pljava-so/src/main/c/Backend.c,0476e5ae40d4bb3e19eee00a6977f84991757809,Thomas Hallgren,2015-09-21T06:45:36Z,thomas@tada.se,Thomas Hallgren,2015-09-21T06:45:36Z,thomas@tada.se,100,55,45,"Merge pull request #50 from jcflack/refactor/master/msvc-build

Refactor/master/msvc build"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,c64b502a25d160692bafa1d6df4e5619ccdcb2d9,Chapman Flack,2015-09-20T20:23:24Z,chap@anastigmatix.net,Chapman Flack,2015-09-20T20:23:24Z,chap@anastigmatix.net,14,13,1,"Note limitation of the workaround in pull #42.

I want to close issue #39 (pull #42 provided a workaround), but the
workaround has a limitation and in case anybody runs into it, it should
be mentioned in at least one place that doesn't have to be looked up
in closed issues or in the code."
,pljava-so/src/main/c/Backend.c,2581a85534f603f1ed168fa3b65da0cfdf50b9ef,Chapman Flack,2015-09-17T05:38:49Z,chap@anastigmatix.net,Chapman Flack,2015-09-17T05:38:49Z,chap@anastigmatix.net,96,55,41,"MSVC profile using profile more, properties less.

This will have to be tested by someone with MSVC access. Its behavior
should be close to what I _think_ it should do. Possible nits: it puts
the MSVC extra include paths late in the list; if that's a problem
because they need to be early, I found syntax for that too, only a
little bit uglier. Also, an MSVC link will mention libjvm twice, once
in the right place (I think), but also still in the wrong one; I _think_
that should be harmless. Nothing another barrage of XML can't fix, if
it's a problem."
,pljava-so/src/main/c/Backend.c,d08eb353df8e6a2cf9b57ee34b56eb25b0f38575,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,213,206,7,"Merge pull request #29 from kenolson/bug/master/msvc_build

Fix to allow building pljava with Microsoft Visual C"
,pljava-so/src/main/c/Function.c,d08eb353df8e6a2cf9b57ee34b56eb25b0f38575,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,213,206,7,"Merge pull request #29 from kenolson/bug/master/msvc_build

Fix to allow building pljava with Microsoft Visual C"
,pljava-so/src/main/c/JNICalls.c,d08eb353df8e6a2cf9b57ee34b56eb25b0f38575,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,213,206,7,"Merge pull request #29 from kenolson/bug/master/msvc_build

Fix to allow building pljava with Microsoft Visual C"
,pljava-so/src/main/c/type/Timestamp.c,d08eb353df8e6a2cf9b57ee34b56eb25b0f38575,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,Thomas Hallgren,2015-08-17T21:48:03Z,thomas@tada.se,213,206,7,"Merge pull request #29 from kenolson/bug/master/msvc_build

Fix to allow building pljava with Microsoft Visual C"
,pljava-so/src/main/c/Backend.c,dbf2bdcd565a14ce122d8bd863ee9704232ece6c,Kenneth Olson,2014-07-05T17:02:16Z,pega_olsok@yahoo.com,Kenneth Olson,2015-07-23T19:37:28Z,pega_olsok@yahoo.com,212,205,7,"Fix to allow building pljava with Microsoft Visual C

Code changes to allow compilation and linking with Microsoft
Visual C. Maven build process conditionalized to to detect Visual C
and adjust options appropriately. See msvc-build-notes.txt for
full details. Property names updated for clarity"
,pljava-so/src/main/c/Function.c,dbf2bdcd565a14ce122d8bd863ee9704232ece6c,Kenneth Olson,2014-07-05T17:02:16Z,pega_olsok@yahoo.com,Kenneth Olson,2015-07-23T19:37:28Z,pega_olsok@yahoo.com,212,205,7,"Fix to allow building pljava with Microsoft Visual C

Code changes to allow compilation and linking with Microsoft
Visual C. Maven build process conditionalized to to detect Visual C
and adjust options appropriately. See msvc-build-notes.txt for
full details. Property names updated for clarity"
,pljava-so/src/main/c/JNICalls.c,dbf2bdcd565a14ce122d8bd863ee9704232ece6c,Kenneth Olson,2014-07-05T17:02:16Z,pega_olsok@yahoo.com,Kenneth Olson,2015-07-23T19:37:28Z,pega_olsok@yahoo.com,212,205,7,"Fix to allow building pljava with Microsoft Visual C

Code changes to allow compilation and linking with Microsoft
Visual C. Maven build process conditionalized to to detect Visual C
and adjust options appropriately. See msvc-build-notes.txt for
full details. Property names updated for clarity"
,pljava-so/src/main/c/type/Timestamp.c,dbf2bdcd565a14ce122d8bd863ee9704232ece6c,Kenneth Olson,2014-07-05T17:02:16Z,pega_olsok@yahoo.com,Kenneth Olson,2015-07-23T19:37:28Z,pega_olsok@yahoo.com,212,205,7,"Fix to allow building pljava with Microsoft Visual C

Code changes to allow compilation and linking with Microsoft
Visual C. Maven build process conditionalized to to detect Visual C
and adjust options appropriately. See msvc-build-notes.txt for
full details. Property names updated for clarity"
,pljava-so/src/main/c/Backend.c,328fc5da35a2504043332b256bddf97b71e04532,Thomas Hallgren,2015-07-21T06:55:27Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:55:27Z,thomas@tada.se,31,0,31,"Merge pull request #45 from jcflack/bug/master/1011181

The rest of ""Bugfix 1011181"""
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava/src/main/java/org/postgresql/pljava/internal/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava/src/main/java/org/postgresql/pljava/jdbc/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava/src/main/java/org/postgresql/pljava/management/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava/src/main/java/org/postgresql/pljava/sqlj/package-info.java,5e4cdb7322b45311e37c6d1cdd573c81d068b20d,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,Thomas Hallgren,2015-07-21T06:54:02Z,thomas@tada.se,397,358,39,"Merge pull request #44 from jcflack/feature/master/techrefsite

Enable maven features to build a basic tech-detail site"
,pljava-so/src/main/c/Backend.c,16603f6f50be238944732efd3c2443c935fa3a1d,Chapman Flack,2015-07-21T02:43:38Z,chap@anastigmatix.net,Chapman Flack,2015-07-21T02:43:38Z,chap@anastigmatix.net,31,0,31,"The rest of ""Bugfix 1011181""

This was one problem being solved two ways. First there was code
to double any percent signs in a string that would be passed to elog.
But then myrkraverk in 2012 (622d0ac) got a compiler warning about
using a non-constant format string, and changed the elog call to
pass the supplied string as an argument to `%s` format, which is the
cleaner solution anyway, but didn't remove the old code, so `%` signs
were printing out doubled."
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava/src/main/java/org/postgresql/pljava/internal/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava/src/main/java/org/postgresql/pljava/jdbc/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava/src/main/java/org/postgresql/pljava/management/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava/src/main/java/org/postgresql/pljava/sqlj/package-info.java,db8131b79a553d2fab8a99bf565048403744cfc6,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T21:27:04Z,chap@anastigmatix.net,58,58,0,Minimal package-info breadcrumbs scattered through rest of packages.
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/package-info.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/package-info.java,de415df95ef01c4fa285f3874e39da0087cbeb0e,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T07:12:15Z,chap@anastigmatix.net,158,148,10,"Complete filling in javadoc gaps, at least for public API.

That creates some redundancy, such as documenting both a field and
the enum that's only used there, but those javadoc gaps are so unsightly!"
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-api/src/main/java/org/postgresql/pljava/package-info.java,d350abc91ac434fcb4fb08d5187fc563a9ee121d,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,Chapman Flack,2015-07-19T04:34:57Z,chap@anastigmatix.net,157,128,29,Fill a few javadoc gaps in org.postgresql.pljava.
,pljava-so/src/main/c/Function.c,523d169b73b1071975c83e3f93b39d03e2e6716a,Thomas Hallgren,2015-07-15T09:22:17Z,thomas@tada.se,Thomas Hallgren,2015-07-15T09:22:17Z,thomas@tada.se,124,71,53,"Merge pull request #43 from jcflack/bug/master/noargsigs

Address #8 spurious error with zero-arg method sigs."
,pljava-so/src/main/c/Function.c,a23bf503d04bc38251f64deb2d46e23077d2975c,Chapman Flack,2015-07-15T07:56:22Z,chap@anastigmatix.net,Chapman Flack,2015-07-15T07:56:22Z,chap@anastigmatix.net,124,71,53,"Address #8 spurious error with zero-arg method sigs.

Spun the loop in parseParameters slightly so it doesn't complain in the
corner case of an explicit method signature of no parameters. Also made
the messages clearer for when the signature really doesn't match what's
expected."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,db7fd6634d0267a5d311f9e1869598e325e23732,Thomas Hallgren,2015-07-15T06:40:13Z,thomas@tada.se,Thomas Hallgren,2015-07-15T06:40:13Z,thomas@tada.se,191,129,62,"Merge pull request #41 from jcflack/bug/master/ddrorder

Run deployment descriptors in correct order."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,db7fd6634d0267a5d311f9e1869598e325e23732,Thomas Hallgren,2015-07-15T06:40:13Z,thomas@tada.se,Thomas Hallgren,2015-07-15T06:40:13Z,thomas@tada.se,191,129,62,"Merge pull request #41 from jcflack/bug/master/ddrorder

Run deployment descriptors in correct order."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,909af319c6b8ab92e618b5c2e7b69f20813b4b03,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,125,94,31,"Merge pull request #42 from jcflack/workaround/master/javac7

Workaround #39 breakage seen with Java 7"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,909af319c6b8ab92e618b5c2e7b69f20813b4b03,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,125,94,31,"Merge pull request #42 from jcflack/workaround/master/javac7

Workaround #39 breakage seen with Java 7"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,909af319c6b8ab92e618b5c2e7b69f20813b4b03,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,Thomas Hallgren,2015-07-15T06:38:48Z,thomas@tada.se,125,94,31,"Merge pull request #42 from jcflack/workaround/master/javac7

Workaround #39 breakage seen with Java 7"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,78ca97382306d6bb72b8c46978e9758b548921cb,Chapman Flack,2015-07-15T00:43:51Z,chap@anastigmatix.net,Chapman Flack,2015-07-15T00:43:51Z,chap@anastigmatix.net,2,1,1,"Revert change made in bd6f79c because type mapping broke.

Issue #39 stopped the DDRProcessor from finding the correct return type
for this example function, so in bd6f79c and 7b5f28d an explicit type
annotation was added. DDRProcessor finds the right type again, so
reverting the explicit annotation (which only served to mask a problem)."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,05e3df57f54f4e5e8c6e825639b8fb8a83ba733c,Chapman Flack,2015-07-15T00:39:23Z,chap@anastigmatix.net,Chapman Flack,2015-07-15T00:39:23Z,chap@anastigmatix.net,8,4,4,Just noticed this example left the schema name off.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,e5a510326c9a4199117f1ee4cfaec8d3badae650,Chapman Flack,2015-07-15T00:38:32Z,chap@anastigmatix.net,Chapman Flack,2015-07-15T00:38:32Z,chap@anastigmatix.net,6,4,2,A small concession to formatting consistency.
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,4605e0bc766218c6d0934b14852a06a89d4a2e4b,Chapman Flack,2015-07-15T00:37:24Z,chap@anastigmatix.net,Chapman Flack,2015-07-15T00:37:24Z,chap@anastigmatix.net,109,85,24,"Workaround the problem reported in #39.

The annotation processor in javac runs in multiple 'rounds', as long as
generated source files keep appearing, and one final round after they
don't. This code used to save some mapping of Class objects to the
javax.lang.model objects (TypeElement/TypeMirror) until the final round,
which worked in Java 6, but as of 7 one gets back different model objects
in different rounds, for the same types, and they don't match, so type
mapping breaks.

This workaround moves all those lookups to before or during round 1, when
a consistent set of model objects can be looked up. So, it will work as
long as all the source files that might contain pljava annotations will be
found in round 1. That should always be the case unless someone is using a
very fancy build with _other_ annotation processors generating new source
files with pljava annotations that have to be processed in additional
rounds. For now, that won't work, because their types won't seem to match
what was computed in round 1. So don't do that.

http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8038455 might refer
to this problem, and promises a fix in Java 9, for what it's worth."
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,1b998484feb973c3a9c173304f5bd5ce83908da2,Chapman Flack,2015-07-14T05:59:00Z,chap@anastigmatix.net,Chapman Flack,2015-07-14T05:59:00Z,chap@anastigmatix.net,191,129,62,"Run deployment descriptors in correct order.

Previously determined the order of multiple deployment descriptors in
a single jar according to the order of those entries as stored in the jar
(used in that order for install, and that order reversed for remove).

But that wasn't correct. I got my hands on 2003 and 2006 drafts of the
SQL/JRT spec and they both clearly say it is the order _as the entries
are listed in the manifest_ that matters (again, in that order for install,
and the reverse for remove).

This should be a welcome improvement, because I had noted back in
commit 0edc9e5f that maven doesn't always put things in a jar in
the same order, and that was causing the pljava-examples jar to be
broken about half the time (for autodeployment anyway). But the manifest
is a static file listing the ddrs in the right order, so as long as
maven doesn't reorder it while putting it in the jar, that behavior
should now be stable."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,1b998484feb973c3a9c173304f5bd5ce83908da2,Chapman Flack,2015-07-14T05:59:00Z,chap@anastigmatix.net,Chapman Flack,2015-07-14T05:59:00Z,chap@anastigmatix.net,191,129,62,"Run deployment descriptors in correct order.

Previously determined the order of multiple deployment descriptors in
a single jar according to the order of those entries as stored in the jar
(used in that order for install, and that order reversed for remove).

But that wasn't correct. I got my hands on 2003 and 2006 drafts of the
SQL/JRT spec and they both clearly say it is the order _as the entries
are listed in the manifest_ that matters (again, in that order for install,
and the reverse for remove).

This should be a welcome improvement, because I had noted back in
commit 0edc9e5f that maven doesn't always put things in a jar in
the same order, and that was causing the pljava-examples jar to be
broken about half the time (for autodeployment anyway). But the manifest
is a static file listing the ddrs in the right order, so as long as
maven doesn't reorder it while putting it in the jar, that behavior
should now be stable."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,0e5e1f30644624931b6e7f501266619590f47116,Thomas Hallgren,2015-07-13T22:03:53Z,thomas@tada.se,Thomas Hallgren,2015-07-13T22:03:53Z,thomas@tada.se,4,3,1,"Merge pull request #40 from jcflack/bug/master/replaceJar

Fix obsoleted query in sqlj.replace_jar."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,cc60d4aa8f0048229e34bc3c630025e711dda8ab,Chapman Flack,2015-07-13T06:57:31Z,chap@anastigmatix.net,Chapman Flack,2015-07-13T06:57:31Z,chap@anastigmatix.net,4,3,1,"Fix obsoleted query in sqlj.replace_jar.

Ken Olson caught this a year ago in his pull request #29, but
it was my oversight; when rearranging the sqlj relations back
in #10 to accommodate more than one deployment descriptor, I
updated the sql in install_jar and remove_jar (and deployInstall
and deployRemove), but I just totally overlooked replace_jar. Oops."
,pljava-so/src/main/c/type/Oid.c,5489d14073f02c064583f1d4818c2bcea7fee951,Thomas Hallgren,2015-01-30T23:07:10Z,thomas@tada.se,Thomas Hallgren,2015-01-30T23:07:10Z,thomas@tada.se,4,4,0,"Merge pull request #38 from shawjef3/master

Fix compilation error against 9.4 due to a missing function argument."
,pljava-so/src/main/c/type/Oid.c,3ae5d07b44d7cbc3ebdaec6e430388e253bcb54d,Jeff Shaw,2015-01-30T20:21:11Z,jeff.shaw@wda.com,Jeff Shaw,2015-01-30T20:21:11Z,jeff.shaw@wda.com,4,4,0,Fix compilation error against 9.4 due to a missing function argument.
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDriver.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,6be4178c839fd2c0879d29f37c532a6317d4ed03,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,Thomas Hallgren,2014-11-21T22:38:43Z,thomas@tada.se,198,125,73,"Merge pull request #35 from fbroda/jdk7

Add support for Jdk7"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,7b5f28d79c8bc6d517634273be8f82df6cb242eb,fbroda,2014-10-23T12:24:59Z,fbroda@ipb-halle.invalid,fbroda,2014-10-23T12:24:59Z,fbroda@ipb-halle.invalid,2,1,1,"fix 'SETOF SETOF VARCHAR' in autogenerated SQL

The annotation '@Function( complexType = ""SETOF VARCHAR"" )
was expanded to ""SETOF SETOF VARCHAR"" by the DDRWriter"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,4c99f3812d5d15f123e595b5b8bf81b5603c177f,fbroda,2014-10-23T08:40:15Z,fbroda@ipb-halle.invalid,fbroda,2014-10-23T08:40:15Z,fbroda@ipb-halle.invalid,10,6,4,"Merge commit 'bd6f79ced00ccb0f81c55b3cbda99f0646b674bd' of https://github.com/fbroda/pljava into jdk7

Sorry! I'm doing my first steps. Unfortunately I messed with the
master branch! I hope my attempt to resolve this mishap does not
worsen things. Finally I would like to have the changes by sptrakesh,
gdmSISouth and me integrated into tada/pljava - presumably after some
more fixes and polishing."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,bd6f79ced00ccb0f81c55b3cbda99f0646b674bd,fbroda,2014-10-23T07:36:52Z,fbroda@ipb-halle.invalid,fbroda,2014-10-23T07:36:52Z,fbroda@ipb-halle.invalid,4,2,2,reactivate compilation of module pljava-examples
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,f49cf50f88b2a12d64babab1fd617bd4d8dc9597,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,128,116,12,Updated to Java7 and clang for Mac OS X Mavericks
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,f49cf50f88b2a12d64babab1fd617bd4d8dc9597,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,128,116,12,Updated to Java7 and clang for Mac OS X Mavericks
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,f49cf50f88b2a12d64babab1fd617bd4d8dc9597,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,128,116,12,Updated to Java7 and clang for Mac OS X Mavericks
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDriver.java,f49cf50f88b2a12d64babab1fd617bd4d8dc9597,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,128,116,12,Updated to Java7 and clang for Mac OS X Mavericks
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,f49cf50f88b2a12d64babab1fd617bd4d8dc9597,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,Rakesh Vidyadharan,2014-08-14T19:07:00Z,rakesh@sptci.com,128,116,12,Updated to Java7 and clang for Mac OS X Mavericks
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,191c2fbefc72d35cf182fbac526a797b2a5a037b,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,31,30,1,"Merge pull request #19 from asifnaeem/PG93Fix

Looks good to me so I'll merge it. For future commit messages, please use one line first (80 characters or less) followed by an empty line and then a more elaborate description (where all lines are 80 chars or less). Reason being that such one liners show up in many lists where you can click on a link to get the more elaborated text."
,pljava-so/src/main/c/Backend.c,191c2fbefc72d35cf182fbac526a797b2a5a037b,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,31,30,1,"Merge pull request #19 from asifnaeem/PG93Fix

Looks good to me so I'll merge it. For future commit messages, please use one line first (80 characters or less) followed by an empty line and then a more elaborate description (where all lines are 80 chars or less). Reason being that such one liners show up in many lists where you can click on a link to get the more elaborated text."
,pljava-so/src/main/include/pljava/pljava.h,191c2fbefc72d35cf182fbac526a797b2a5a037b,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,Thomas Hallgren,2013-07-04T11:29:38Z,thomas@tada.se,31,30,1,"Merge pull request #19 from asifnaeem/PG93Fix

Looks good to me so I'll merge it. For future commit messages, please use one line first (80 characters or less) followed by an empty line and then a more elaborate description (where all lines are 80 chars or less). Reason being that such one liners show up in many lists where you can click on a link to get the more elaborated text."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,d5c603efa69bf7f2b694c1ce38d80a4fe85ff253,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,31,30,1,"Changes are required because of move of GETSTRUCT() and timeout
handling framework changes done in PG 9.3. Along with that I fixes
minor issue in DDRProcessor.java that is causing ""illegal start of
expression"" error. Maven did not worked for me to build it and hang
endlessly while building c source code (pljava-so). As a workaround I
temporarily fixed makefiles to test PG9.3 related fix that seems
worked and generated pljava.jar and pljava.so files and their basic
sanity seems working fine."
,pljava-so/src/main/c/Backend.c,d5c603efa69bf7f2b694c1ce38d80a4fe85ff253,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,31,30,1,"Changes are required because of move of GETSTRUCT() and timeout
handling framework changes done in PG 9.3. Along with that I fixes
minor issue in DDRProcessor.java that is causing ""illegal start of
expression"" error. Maven did not worked for me to build it and hang
endlessly while building c source code (pljava-so). As a workaround I
temporarily fixed makefiles to test PG9.3 related fix that seems
worked and generated pljava.jar and pljava.so files and their basic
sanity seems working fine."
,pljava-so/src/main/include/pljava/pljava.h,d5c603efa69bf7f2b694c1ce38d80a4fe85ff253,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,Asif Naeem,2013-07-04T10:33:43Z,asif.naeem@enterprisedb.com,31,30,1,"Changes are required because of move of GETSTRUCT() and timeout
handling framework changes done in PG 9.3. Along with that I fixes
minor issue in DDRProcessor.java that is causing ""illegal start of
expression"" error. Maven did not worked for me to build it and hang
endlessly while building c source code (pljava-so). As a workaround I
temporarily fixed makefiles to test PG9.3 related fix that seems
worked and generated pljava.jar and pljava.so files and their basic
sanity seems working fine."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,fbf5aeb45207f7b74ce1482b6a1144c0aaea1cd1,Thomas Hallgren,2013-03-03T18:08:50Z,thomas@tada.se,Thomas Hallgren,2013-03-03T18:08:50Z,thomas@tada.se,60,44,16,"Merge pull request #13 from jcflack/bug/master/contravariance

There's always something to catch *after* the pull"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,fbf5aeb45207f7b74ce1482b6a1144c0aaea1cd1,Thomas Hallgren,2013-03-03T18:08:50Z,thomas@tada.se,Thomas Hallgren,2013-03-03T18:08:50Z,thomas@tada.se,60,44,16,"Merge pull request #13 from jcflack/bug/master/contravariance

There's always something to catch *after* the pull"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,0c344e903020e819e6cf0c0763e9b4146f2008b7,J Chapman Flack,2013-03-02T23:43:34Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-02T23:43:34Z,jflack@hardy.math.purdue.edu,6,3,3,"Spelling conformity

Also unrelated to the bug, a spelling change pointed out in an
earlier comment."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,e1bad351c796677e71946e36b518761aebb97f21,J Chapman Flack,2013-03-02T23:36:14Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-02T23:36:14Z,jflack@hardy.math.purdue.edu,10,7,3,"Code hygiene

Unrelated to the bug, clean up some string literals that
had been used in place of class literals."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,0f811700fab8f476b2c03152085134f27d4a0636,J Chapman Flack,2013-03-02T23:29:14Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-02T23:29:14Z,jflack@hardy.math.purdue.edu,44,34,10,"Don't type parameters the same way as returns

What the TypeMapper was doing was correct for a function return value,
matching the return value to the narrowest mapped type that the actual
return value could be assigned to.

It was not correct for a function parameter, which needs to be matched
to the widest mapped type that could be assigned to the parameter.

Jens, if you ever read this, forgive me. At least I caught it quickly."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/org/postgresql/pljava/annotation/Function.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/org/postgresql/pljava/annotation/Trigger.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/annotation/Function.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultAnnotationVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultClassVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultMethodVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/FunctionVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/GenericType.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/MalformedTriggerException.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/MissingAttributeException.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/PLJavaClassVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/SQLGenerator.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/TriggerVisitor.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/TypeMapper.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnknownTypeException.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnrecognizedAttributeException.java,301164c85226dbe07c2fde89d1019e7ba66f86c4,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,Thomas Hallgren,2013-03-02T07:20:36Z,thomas@tada.se,3550,2223,1327,"Merge pull request #10 from jcflack/feature/master/sqlgen

Feature/master/sqlgen"
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,c51cffa34acd5a228325143ec29563174891a873,J Chapman Flack,2013-03-01T21:21:07Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T21:21:07Z,jflack@hardy.math.purdue.edu,12,6,6,"Spelling conformity

The jar_repository and jar_entry table names aren't plural, so
jar_descriptor should not be either."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,c51cffa34acd5a228325143ec29563174891a873,J Chapman Flack,2013-03-01T21:21:07Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T21:21:07Z,jflack@hardy.math.purdue.edu,12,6,6,"Spelling conformity

The jar_repository and jar_entry table names aren't plural, so
jar_descriptor should not be either."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,0edc9e5f385c32b27ab6f8a71f1519d8f2c4a244,J Chapman Flack,2013-03-01T17:20:56Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T20:44:16Z,jflack@hardy.math.purdue.edu,64,50,14,"Get annotated examples working in pljava-examples

For now, nothing done but to dump the annotated examples in with
the other ones (and change the name of one method that duplicated
one of the non-annotated ones), and further annotate the trigger
example to create the tables it refers to. (Also, one example
referred to an example.properties file, so one has been created.)

For now, the result is a jar with two deployment descriptors (which
is supposed to be ok per SQL/JRT 2003, so is now accepted): the
original one and the generated one.

Notes on things I know aren't perfect yet:

1. Maven doesn't put things in the jar in a deterministic order.
The generated ddr depends on the javatest schema and _properties
type created in the old ddr, but sometimes ""mvn clean install"" will
put the two ddrs in the jar in the other order. This is just a
maven issue; pljava correctly follows the spec and uses the order of
the ddrs found in the jar. It wouldn't be a problem if the two ddrs
had no interdependencies, or if the maven build could be tweaked
to force a certain order in the jar, or if the old ddr were done away
with entirely by annotating all the old examples so the generator
generates everything.

2. The generated ddr only reflects annotations seen in the compile run.
If a non-clean build run only runs javac on a few changed files, the
generated ddr can be incomplete. So for now it's best to run javac on
everything (or do a mvn clean before building). There may be a way to
improve the annotation processor to save a record of all the files that
would need to be reexamined in a partial rebuild. What I don't know yet
is how (or whether) that can be communicated back to javac to get those
files examined in a later round.

3. Naturally until issue #8 is fixed, none of the no-arg example
functions can actually be used.

4. The old examples.ddr contains a set search_path making javatest the
current schema, which causes deployRemove to fail later. The trouble is
that if deployRemove alters the search path on the current schema, it will
try to restore the old value after undeploying, and that fails if the
undeploy made that schema go away. Possibly deployRemove could be made to
just fail silently if that happens, but that's an issue for another day."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,0edc9e5f385c32b27ab6f8a71f1519d8f2c4a244,J Chapman Flack,2013-03-01T17:20:56Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T20:44:16Z,jflack@hardy.math.purdue.edu,64,50,14,"Get annotated examples working in pljava-examples

For now, nothing done but to dump the annotated examples in with
the other ones (and change the name of one method that duplicated
one of the non-annotated ones), and further annotate the trigger
example to create the tables it refers to. (Also, one example
referred to an example.properties file, so one has been created.)

For now, the result is a jar with two deployment descriptors (which
is supposed to be ok per SQL/JRT 2003, so is now accepted): the
original one and the generated one.

Notes on things I know aren't perfect yet:

1. Maven doesn't put things in the jar in a deterministic order.
The generated ddr depends on the javatest schema and _properties
type created in the old ddr, but sometimes ""mvn clean install"" will
put the two ddrs in the jar in the other order. This is just a
maven issue; pljava correctly follows the spec and uses the order of
the ddrs found in the jar. It wouldn't be a problem if the two ddrs
had no interdependencies, or if the maven build could be tweaked
to force a certain order in the jar, or if the old ddr were done away
with entirely by annotating all the old examples so the generator
generates everything.

2. The generated ddr only reflects annotations seen in the compile run.
If a non-clean build run only runs javac on a few changed files, the
generated ddr can be incomplete. So for now it's best to run javac on
everything (or do a mvn clean before building). There may be a way to
improve the annotation processor to save a record of all the files that
would need to be reexamined in a partial rebuild. What I don't know yet
is how (or whether) that can be communicated back to javac to get those
files examined in a later round.

3. Naturally until issue #8 is fixed, none of the no-arg example
functions can actually be used.

4. The old examples.ddr contains a set search_path making javatest the
current schema, which causes deployRemove to fail later. The trouble is
that if deployRemove alters the search path on the current schema, it will
try to restore the old value after undeploying, and that fails if the
undeploy made that schema go away. Possibly deployRemove could be made to
just fail silently if that happens, but that's an issue for another day."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,0edc9e5f385c32b27ab6f8a71f1519d8f2c4a244,J Chapman Flack,2013-03-01T17:20:56Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T20:44:16Z,jflack@hardy.math.purdue.edu,64,50,14,"Get annotated examples working in pljava-examples

For now, nothing done but to dump the annotated examples in with
the other ones (and change the name of one method that duplicated
one of the non-annotated ones), and further annotate the trigger
example to create the tables it refers to. (Also, one example
referred to an example.properties file, so one has been created.)

For now, the result is a jar with two deployment descriptors (which
is supposed to be ok per SQL/JRT 2003, so is now accepted): the
original one and the generated one.

Notes on things I know aren't perfect yet:

1. Maven doesn't put things in the jar in a deterministic order.
The generated ddr depends on the javatest schema and _properties
type created in the old ddr, but sometimes ""mvn clean install"" will
put the two ddrs in the jar in the other order. This is just a
maven issue; pljava correctly follows the spec and uses the order of
the ddrs found in the jar. It wouldn't be a problem if the two ddrs
had no interdependencies, or if the maven build could be tweaked
to force a certain order in the jar, or if the old ddr were done away
with entirely by annotating all the old examples so the generator
generates everything.

2. The generated ddr only reflects annotations seen in the compile run.
If a non-clean build run only runs javac on a few changed files, the
generated ddr can be incomplete. So for now it's best to run javac on
everything (or do a mvn clean before building). There may be a way to
improve the annotation processor to save a record of all the files that
would need to be reexamined in a partial rebuild. What I don't know yet
is how (or whether) that can be communicated back to javac to get those
files examined in a later round.

3. Naturally until issue #8 is fixed, none of the no-arg example
functions can actually be used.

4. The old examples.ddr contains a set search_path making javatest the
current schema, which causes deployRemove to fail later. The trouble is
that if deployRemove alters the search path on the current schema, it will
try to restore the old value after undeploying, and that fails if the
undeploy made that schema go away. Possibly deployRemove could be made to
just fail silently if that happens, but that's an issue for another day."
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,624d78ca98d80ff2ded215eeca92035da5126bc0,J Chapman Flack,2013-03-01T07:27:26Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T07:27:26Z,jflack@hardy.math.purdue.edu,160,90,70,"SQL/JRT 2003: Jar may have > 1 deployment descr

Moving the annotation examples into pljava-examples creates a jar
with two deployment descriptors, the old one for the non-annotated
examples and the generated one. That's actually ok per SQL/JRT 2003,
but small changes to Commands.java and a new sqlj.jar_descriptors
table are needed to remove the former arbitary restriction to one
descriptor only.

Eventually the non-annotated examples could all be annotated,
leaving the generated descriptor as the only one. But as the
limit to one descriptor was at variance with the standard anyway,
it seemed worth removing."
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,624d78ca98d80ff2ded215eeca92035da5126bc0,J Chapman Flack,2013-03-01T07:27:26Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-03-01T07:27:26Z,jflack@hardy.math.purdue.edu,160,90,70,"SQL/JRT 2003: Jar may have > 1 deployment descr

Moving the annotation examples into pljava-examples creates a jar
with two deployment descriptors, the old one for the non-annotated
examples and the generated one. That's actually ok per SQL/JRT 2003,
but small changes to Commands.java and a new sqlj.jar_descriptors
table are needed to remove the former arbitary restriction to one
descriptor only.

Eventually the non-annotated examples could all be annotated,
leaving the generated descriptor as the only one. But as the
limit to one descriptor was at variance with the standard anyway,
it seemed worth removing."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,046775e4c80a91e92cd492cdc7ee843ad00f183a,J Chapman Flack,2013-02-28T19:01:17Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T19:01:17Z,jflack@hardy.math.purdue.edu,138,69,69,"Whitespace adjustment

Match indentation of relocated code to new surroundings."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,046775e4c80a91e92cd492cdc7ee843ad00f183a,J Chapman Flack,2013-02-28T19:01:17Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T19:01:17Z,jflack@hardy.math.purdue.edu,138,69,69,"Whitespace adjustment

Match indentation of relocated code to new surroundings."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLAction.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLActions.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/SQLType.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,a2da94d161a4ff12d715c0db841253cb8fad64a5,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:55:00Z,jflack@hardy.math.purdue.edu,2050,1820,230,"Update annotation-driven SQL generation to Java 6.

Remove the dependency on org.objectweb.asm in favor of the
annotation processing facilities now built in to javac as of
Java 6. Add annotations to override the auto-determined type
for function parameters and/or supply default values, and to
supply arbitrary SQL commands to be included in the generated
deployment descriptor."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,d6b64005de263861c47c6202449fe5960fec5310,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,65,45,20,"Update copyright notices.

Paste in the newer copyright notice, recently added
in pljava-examples, that gives an explicit BSD 3-clause
link and has room for other contributors."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,d6b64005de263861c47c6202449fe5960fec5310,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,65,45,20,"Update copyright notices.

Paste in the newer copyright notice, recently added
in pljava-examples, that gives an explicit BSD 3-clause
link and has room for other contributors."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,d6b64005de263861c47c6202449fe5960fec5310,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,65,45,20,"Update copyright notices.

Paste in the newer copyright notice, recently added
in pljava-examples, that gives an explicit BSD 3-clause
link and has room for other contributors."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,d6b64005de263861c47c6202449fe5960fec5310,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,65,45,20,"Update copyright notices.

Paste in the newer copyright notice, recently added
in pljava-examples, that gives an explicit BSD 3-clause
link and has room for other contributors."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,d6b64005de263861c47c6202449fe5960fec5310,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:40:44Z,jflack@hardy.math.purdue.edu,65,45,20,"Update copyright notices.

Paste in the newer copyright notice, recently added
in pljava-examples, that gives an explicit BSD 3-clause
link and has room for other contributors."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Function.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-api/src/main/java/org/postgresql/pljava/annotation/Trigger.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRProcessor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/DDRWriter.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-api/src/main/java/org/postgresql/pljava/sqlgen/TriggerNamer.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/Triggers.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingProperties.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-examples/src/main/java/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/org/postgresql/pljava/annotation/Function.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/org/postgresql/pljava/annotation/Trigger.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultAnnotationVisitor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultClassVisitor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultMethodVisitor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/FunctionVisitor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/GenericType.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/MalformedTriggerException.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/MissingAttributeException.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/PLJavaClassVisitor.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnknownTypeException.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnrecognizedAttributeException.java,cb0ba317b1f1aaad1ff33d04d0ceeca3032168ee,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,J Chapman Flack,2013-02-28T18:30:33Z,jflack@hardy.math.purdue.edu,802,0,802,"Initial relocation of sqlgen sources

Simply move needed sources to their new places in the
mavenized layout, and delete those no longer needed given
the Java 6 built-in annotation support. An intermediate
commit guaranteed not to build."
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexScalar.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexTuple.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Parameters.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Point.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Threads.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,06254413133c28d217a1b4e830975e608de6d56f,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,Thomas Hallgren,2013-02-23T08:35:39Z,thomas@tada.se,2527,1274,1253,Code hygiene on PL/Java examples
,pljava-so/src/main/c/type/Composite.c,d6e5c04f030c1bc9bc4fe57560b2f76ffdab46b2,Thomas Hallgren,2013-02-23T01:32:29Z,thomas@tada.se,Thomas Hallgren,2013-02-23T01:32:29Z,thomas@tada.se,8,8,0,"Fix for segfault if SETOF RECORD-returning function used without AS

Closes #7"
,pljava-so/.classpath,714e81c2d575e37ba41896e3fc7b107020955445,Thomas Hallgren,2013-02-22T09:12:16Z,thomas@tada.se,Thomas Hallgren,2013-02-22T09:12:16Z,thomas@tada.se,441,252,189,"Adds m2e lifecycle exclusion of maven-nar-plugin goals

The maven-nar-plugin goals are not recognized by the m2e Eclipse IDE
plug-in so these exclusions are needed to avoid errors. They don't
affect the normal maven build in any way."
,pljava-so/.settings/org.eclipse.jdt.core.prefs,714e81c2d575e37ba41896e3fc7b107020955445,Thomas Hallgren,2013-02-22T09:12:16Z,thomas@tada.se,Thomas Hallgren,2013-02-22T09:12:16Z,thomas@tada.se,441,252,189,"Adds m2e lifecycle exclusion of maven-nar-plugin goals

The maven-nar-plugin goals are not recognized by the m2e Eclipse IDE
plug-in so these exclusions are needed to avoid errors. They don't
affect the normal maven build in any way."
,pljava-ant/.classpath,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-ant/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-ant/.settings/org.eclipse.jdt.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-ant/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-api/.classpath,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-api/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-api/.settings/org.eclipse.jdt.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-api/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-deploy/.classpath,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-deploy/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-deploy/.settings/org.eclipse.jdt.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-deploy/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-examples/.classpath,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-examples/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-examples/.settings/org.eclipse.jdt.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-examples/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-so/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-so/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava/.classpath,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava/.settings/org.eclipse.core.resources.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava/.settings/org.eclipse.jdt.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava/.settings/org.eclipse.m2e.core.prefs,0723540034f95791dcaae3eabaae56c462682a34,Thomas Hallgren,2013-02-21T23:33:53Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:49:25Z,thomas@tada.se,349,334,15,"Adds Eclipse IDE artifacts.

One can argue that the source should not target a particular IDE and
thus should not contain Eclipse specific artifacts. The counter
argument is that there's no harm in having them. They don't conflict
with other IDE's or build environments and they don't consume space.

They are however, very convenient if you are using Eclipse and m2e."
,pljava-so/src/main/c/SQLOutputToTuple.c,b5b8e2ac6e8b60146c99a9e5d84de57fd577cadb,Thomas Hallgren,2013-02-21T23:22:18Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:22:18Z,thomas@tada.se,2,0,2,"Removes obsolete include.

A reference was made to a javah generated include file from a class
that had no native methods. A modern javah does not emitt an include
file for such a class. A fact that now revealed the unnecessary
include."
,pljava-so/src/main/c/type/Short.c,3e28bb9b6778fdbba15833c88d2bc28d6631b591,Thomas Hallgren,2013-02-21T23:20:43Z,thomas@tada.se,Thomas Hallgren,2013-02-21T23:20:43Z,thomas@tada.se,2,1,1,"Changes incorrect function call.

For some reason, the call to obtain a short array was
JNI_getIntArrayRegion instead of JNI_getShortArrayRegion which it
was supposed to be. This now resulted in compile errors and was
fixed."
,pljava-so/src/main/c/Backend.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/Exception.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/ExecutionPlan.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/Function.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/HashMap.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/Invocation.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/Iterator.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/JNICalls.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/PgObject.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/PgSavepoint.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SPI.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SQLInputFromChunk.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SQLInputFromTuple.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SQLOutputToChunk.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SQLOutputToTuple.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/Session.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/SubXactListener.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/XactListener.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/backports.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/AclId.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Any.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Array.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/BigDecimal.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Boolean.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Byte.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Coerce.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Composite.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Date.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Double.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/ErrorData.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Float.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/HeapTupleHeader.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Integer.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/JavaWrapper.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/LargeObject.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Long.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Oid.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Portal.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Relation.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Short.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/String.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Time.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Timestamp.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/TriggerData.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Tuple.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/TupleDesc.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/TupleTable.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Type.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/UDT.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/Void.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/c/type/byte_array.c,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/.cvsignore,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Backend.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Exception.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Function.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/HashMap.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/HashMap_priv.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Invocation.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Iterator.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/JNICalls.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/PgObject.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/PgObject_priv.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/SPI.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/SQLInputFromChunk.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/SQLInputFromTuple.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/SQLOutputToChunk.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/SQLOutputToTuple.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/Session.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/backports.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/pljava.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/.cvsignore,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/AclId.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Array.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Coerce.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Composite.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/ErrorData.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/HeapTupleHeader.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/JavaWrapper.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/LargeObject.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Oid.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Portal.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Relation.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/String.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/String_priv.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Time.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Timestamp.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/TriggerData.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Tuple.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/TupleDesc.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/TupleTable.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Type.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/Type_priv.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/UDT.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,pljava-so/src/main/include/pljava/type/UDT_priv.h,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,src/C/pljava/.cvsignore,efbbc1d83e4f45a72ea45eb2afaf3c2a105d7481,Christian Hammers,2013-02-21T22:10:44Z,ch@lathspell.de,Thomas Hallgren,2013-02-21T22:10:44Z,thomas@tada.se,448,446,2,"Mavenized the C shared object library ""pljava.so"".

Moved C sources from src/C to their own Maven sub-module ""pljava-so"".
Adjusted .gitignore and the top level pom.xml accordingly."
,src/C/pljava/type/String.c,8c666b0430483d814fd04334646a8e6d0d760bf8,Thomas Hallgren,2013-02-21T08:59:54Z,thomas@tada.se,Thomas Hallgren,2013-02-21T08:59:54Z,thomas@tada.se,2,1,1,"Merge pull request #5 from r0ml/fix_enum

fixes bug that prevents setting enums from java procedures"
,src/C/pljava/type/String.c,af29f2b4139646f18ac5dd34222cf839dbfa2195,Robert M. Lefkowitz,2013-02-13T22:30:07Z,r0ml@me.com,Robert M. Lefkowitz,2013-02-13T22:30:07Z,r0ml@me.com,2,1,1,fixes bug that prevents setting enums from java procedures
,.classpath,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,.settings/org.eclipse.cdt.core.prefs,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,.settings/org.eclipse.jdt.core.prefs,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/JarLoaderTask.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/PLJavaTask.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/PooledObject.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/SessionManager.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-api/src/main/java/org/postgresql/pljava/TriggerException.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexScalar.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexTuple.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Parameters.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Point.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Threads.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ELogFormatter.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ELogHandler.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/HeapTupleHeader.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/JavaWrapper.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ResultSetPicker.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/SPIException.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/ServerException.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/TupleTable.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/BlobValue.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/BuiltinFunctions.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ClobValue.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetField.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDriver.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLUtils.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/StatementClosedException.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,48b5771a82f8e74c5329a70a17f8f43474211c94,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,Thomas Hallgren,2013-01-14T09:14:38Z,thomas@tada.se,436,243,193,"Merge pull request #2 from Hellblazer/master

First pass at maven refactoring"
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/JarLoaderTask.java,30535d01e98f1727f44e865e64296f86d5699abc,Hal Hildebrand,2013-01-14T01:05:28Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T01:05:28Z,hal.hildebrand@gmail.com,24,24,0,Add pl/java ant tasks module
,pljava-ant/src/main/java/org/postgresql/pljava/tasks/PLJavaTask.java,30535d01e98f1727f44e865e64296f86d5699abc,Hal Hildebrand,2013-01-14T01:05:28Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T01:05:28Z,hal.hildebrand@gmail.com,24,24,0,Add pl/java ant tasks module
,pljava/src/main/java/org/postgresql/pljava/internal/AclId.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Backend.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ELogFormatter.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ELogHandler.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ErrorData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ExecutionPlan.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/HeapTupleHeader.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/JavaWrapper.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/LargeObject.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ObjectPoolImpl.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Oid.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/PgSavepoint.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Portal.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Relation.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ResultSetPicker.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/SPI.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/SPIException.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/ServerException.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Session.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/SubXactListener.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/TransactionalMap.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/TriggerData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/Tuple.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/TupleDesc.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/TupleTable.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/internal/XactListener.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/BlobValue.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/BuiltinFunctions.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/ClobValue.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/Invocation.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetBase.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/ResultSetField.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIConnection.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIDriver.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SPIStatement.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SQLUtils.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowReader.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/StatementClosedException.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/TypeOid.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/management/Commands.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/sqlj/EntryStreamHandler.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava/src/main/java/org/postgresql/pljava/sqlj/Loader.java,cd233a06ffef18bc816a52364a79b25c8513f473,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:59:58Z,hal.hildebrand@gmail.com,145,54,91,Add pl/java implementation module
,pljava-examples/src/main/java/org/postgresql/pljava/example/AnyTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/BinaryColumnTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexScalar.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/ComplexTuple.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/HugeResultSet.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/LoggerTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataBooleans.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataInts.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataStrings.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/MetaDataTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Parameters.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Point.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/RandomInts.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/ResultSetTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/SPIActions.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Security.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/SetOfRecordTest.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Threads.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Triggers.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/TupleReturn.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/Users.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingProperties.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-examples/src/main/java/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,65c860b76e3865defc04be76e6ba6f07176ae4bd,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:48:40Z,hal.hildebrand@gmail.com,64,39,25,Add pl/java examples module
,pljava-deploy/src/main/java/org/postgresql/pljava/deploy/Deployer.java,553861cd2134077c58d82e9a12f93bc829969fff,Hal Hildebrand,2013-01-14T00:35:49Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:35:49Z,hal.hildebrand@gmail.com,51,33,18,Add pl/java deploy module
,.classpath,2ac232b2e5b0a647ce00ec325bad2943c71ca0b5,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,107,47,60,Remove checked in .settings.  add .gitignore.
,.settings/org.eclipse.cdt.core.prefs,2ac232b2e5b0a647ce00ec325bad2943c71ca0b5,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,107,47,60,Remove checked in .settings.  add .gitignore.
,.settings/org.eclipse.jdt.core.prefs,2ac232b2e5b0a647ce00ec325bad2943c71ca0b5,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:23:48Z,hal.hildebrand@gmail.com,107,47,60,Remove checked in .settings.  add .gitignore.
,pljava-api/src/main/java/org/postgresql/pljava/ObjectPool.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/PooledObject.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetHandle.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/ResultSetProvider.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/SavepointListener.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/Session.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/SessionManager.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/TransactionListener.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/TriggerData.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,pljava-api/src/main/java/org/postgresql/pljava/TriggerException.java,1cdda261e62e3da57d03077d7c7ca079459aef13,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,Hal Hildebrand,2013-01-14T00:22:10Z,hal.hildebrand@gmail.com,29,29,0,"Top level pom created, api module created."
,src/C/pljava/type/HeapTupleHeader.c,5df26287d51576c9098d6c6c6034878f96549073,Johann Oskarsson,2012-06-21T10:45:55Z,johann@myrkraverk.com,Johann Oskarsson,2012-06-21T10:45:55Z,johann@myrkraverk.com,19,14,5,Bug 1010962: Release tuple descriptor once copied.  Heikki Linnakangas.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,641f02b71cf567ff03cafd23fb3af01f42318ee1,Johann Oskarsson,2012-06-20T19:23:34Z,johann@myrkraverk.com,Johann Oskarsson,2012-06-20T19:23:34Z,johann@myrkraverk.com,9,6,3,Bug 1011206: Use correcd SQL error state when throwing exceptions.
,src/C/pljava/Backend.c,622d0acaacab028bdef69c9768f15772f9dd9add,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,16,8,8,Bugfix 1011181: PL/Java fails to compile with -Werror=format-security.
,src/C/pljava/Exception.c,622d0acaacab028bdef69c9768f15772f9dd9add,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,16,8,8,Bugfix 1011181: PL/Java fails to compile with -Werror=format-security.
,src/C/pljava/JNICalls.c,622d0acaacab028bdef69c9768f15772f9dd9add,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,Johann Oskarsson,2012-03-30T18:00:23Z,johann@myrkraverk.com,16,8,8,Bugfix 1011181: PL/Java fails to compile with -Werror=format-security.
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,92a17b864d8c672db2b5b1a7c61ac941e827f9bd,Johann Oskarsson,2012-03-30T17:49:45Z,johann@myrkraverk.com,Johann Oskarsson,2012-03-30T17:49:45Z,johann@myrkraverk.com,33,25,8,WIP 1011095: Proposed change to fix loading of security related classes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,6926ee4d6d97db9203dcd67c43763ff2a0c87649,Johann Oskarsson,2011-11-15T02:43:40Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-15T02:43:40Z,johann@myrkraverk.com,2,1,1,"Bug 1011119: Let Postgres' bool --> java.sql.Types.BOOLEAN match
Java's java.sql.Types.BOOLEAN --> Postgres' bool."
,.cvsignore,d2cf37445341244f2d54c6f75d10244fc2cc1ed8,Johann Oskarsson,2011-11-11T10:26:13Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-11T10:26:13Z,johann@myrkraverk.com,4,3,1,Freenode registration number.
,src/C/pljava/Backend.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Boolean.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Double.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Float.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Integer.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Long.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Portal.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Short.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/type/Timestamp.c,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/ClobValue.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetBase.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,5dcb23af9a482b9fc8fdf8f8bb3bc755c57914eb,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,Johann Oskarsson,2011-11-01T01:20:21Z,johann@myrkraverk.com,1486,1425,61,Merged in Java 6 (JDBC4) changes.
,src/C/pljava/Backend.c,7ac57e47a308fa496087b655d5919250b536527e,Johann Oskarsson,2011-09-14T23:31:57Z,johann@myrkraverk.com,Johann Oskarsson,2011-09-14T23:31:57Z,johann@myrkraverk.com,27,16,11,BUG 1011091: Unify calls to GetConfigOption.
,src/C/pljava/type/Timestamp.c,8b6c854b832e196e8314bf7089894f5c68839894,Johann Oskarsson,2011-08-02T17:19:59Z,johann@myrkraverk.com,Johann Oskarsson,2011-08-02T17:19:59Z,johann@myrkraverk.com,23,12,11,Correctly preserve microseconds when reading timestamps.
,src/C/pljava/Backend.c,ce67a838598df2b5ac6e50ad1c7a664c2da249c5,Kris Jurka,2011-05-02T22:09:13Z,jurka@ejurka.com,Kris Jurka,2011-05-02T22:09:13Z,jurka@ejurka.com,15,15,0,"Allow pljava to build against the upcoming 9.1 server release.  The
API for custom GUC variables has changed."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,ae580beb1fd0c4fa9f3be9bfdfad2708d03b8703,Johann Oskarsson,2011-05-02T15:12:05Z,johann@myrkraverk.com,Johann Oskarsson,2011-05-02T15:12:05Z,johann@myrkraverk.com,40,29,11,Refactoring and documenting SPIConnection.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,7896b4c58ee85cdea56acc61b0ad442a7ad367bf,Johann Oskarsson,2011-01-03T15:35:09Z,johann@myrkraverk.com,Johann Oskarsson,2011-01-03T15:35:09Z,johann@myrkraverk.com,12,9,3,"Bugfix: 1010971 SPIConnection.getMetaData() is incorrectly documented

It is now correctly documented."
,src/C/pljava/type/Short.c,9699ff937eb78d5a1fe806280e592c4fc24c61e3,Johann Oskarsson,2010-12-11T12:45:43Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-11T12:45:43Z,johann@myrkraverk.com,17,16,1,"Bugfix 1010956:
Function returning complex objects with POD arrays cause a segfault

_shortArray_coerceObject() now correctly handles arrays of type Short[]"
,src/C/pljava/type/Long.c,bb1e6011be1fe896281854c7575d74c65c82695f,Johann Oskarsson,2010-12-11T12:44:43Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-11T12:44:43Z,johann@myrkraverk.com,18,17,1,"Bugfix 1010956:
Function returning complex objects with POD arrays cause a segfault

_longArray_coerceObject() now correctly handles arrays of type Long[]"
,src/C/pljava/type/Float.c,cdc27cf51086e1cfcba03f0a68d13f82a5f115fc,Johann Oskarsson,2010-12-11T12:43:53Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-11T12:43:53Z,johann@myrkraverk.com,19,18,1,"Bugfix 1010956:
Function returning complex objects with POD arrays cause a segfault

_floatArray_coerceObject() now correctly handles arrays of type Float[]"
,src/C/pljava/type/Double.c,ba002aba48eda72aaae1579438e9b4510fe46274,Johann Oskarsson,2010-12-11T12:43:08Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-11T12:43:08Z,johann@myrkraverk.com,18,17,1,"Bugfix 1010956:
Function returning complex objects with POD arrays cause a segfault

_doubleArray_coerceObject() now correctly handles arrays of type Double[]"
,src/C/pljava/type/Boolean.c,eab21736b87d61023d24aeaf04414d97133cdc30,Johann Oskarsson,2010-12-11T12:41:13Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-11T12:41:13Z,johann@myrkraverk.com,19,18,1,"Bugfix 1010956:
Function returning complex objects with POD arrays cause a segfault

_booleanArray_coerceObject() now correctly handles arrays of type Boolean[]"
,src/C/pljava/type/Integer.c,1291eff00b54217e2826f6a6eb7f84338117144c,Johann Oskarsson,2010-12-10T14:53:14Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-10T14:53:14Z,johann@myrkraverk.com,19,18,1,"Bugfix 1010953: Segfault when assigning an array to ResultSet column

_intArray_coerceObject() did not expect Integer[] arrays."
,src/C/pljava/type/Portal.c,24c645acacd0165e3ea38050f3974023db7601fe,Johann Oskarsson,2010-12-07T18:14:47Z,johann@myrkraverk.com,Johann Oskarsson,2010-12-07T18:14:47Z,johann@myrkraverk.com,24,16,8,Bugfix #1010712: Memory leak plugged.
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,855b779aee33c3bfade85f61992b46dc0bc01660,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,488,2,486,Reverted Java 6 changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,855b779aee33c3bfade85f61992b46dc0bc01660,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,488,2,486,Reverted Java 6 changes.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,855b779aee33c3bfade85f61992b46dc0bc01660,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,Johann Oskarsson,2010-11-14T00:17:18Z,johann@myrkraverk.com,488,2,486,Reverted Java 6 changes.
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,c97829a2c9ecee31f2b06914b89c9e4beac249af,Johann Oskarsson,2010-10-13T17:41:40Z,johann@myrkraverk.com,Johann Oskarsson,2010-10-13T17:41:40Z,johann@myrkraverk.com,343,343,0,Implementing the new Java 6 JDBC interfaces.
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,176271f05d01f6e9a2e75213ae08a856532f3e46,Johann Oskarsson,2010-10-11T16:47:35Z,johann@myrkraverk.com,Johann Oskarsson,2010-10-11T16:47:35Z,johann@myrkraverk.com,4,2,2,Fix ambiguity when compiling with Java 6.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,97bdf9e030f5939b5c9175b00a7a0d284f6594d5,Johann Oskarsson,2010-10-08T13:17:19Z,johann@myrkraverk.com,Johann Oskarsson,2010-10-08T13:17:19Z,johann@myrkraverk.com,35,35,0,Implementing the new Java 6 JBDC interfaces.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,08f21f9373b6bd1417dde60a28be1ed32fc6daa9,Johann Oskarsson,2010-10-08T12:12:27Z,johann@myrkraverk.com,Johann Oskarsson,2010-10-08T12:12:27Z,johann@myrkraverk.com,110,108,2,Implementing the new Java 6 JBDC interfaces.
,src/C/pljava/type/UDT.c,8d6caf9b7d2fc241a312d10414253075024ef64d,Kris Jurka,2010-04-16T09:52:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:52:10Z,jurka@ejurka.com,4,4,0,"Clean up a warning about byteasend and bytearecv not having a
prototype when building against 9.0 as those declarations are now in
a new header file."
,src/C/pljava/Backend.c,75a789d7b5d10081e50a20047157ec87efaca30b,Kris Jurka,2010-04-16T09:47:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:47:10Z,jurka@ejurka.com,22,11,11,"Naturally my first commit in ages is completely busted.  Typo
PGSQL_MAJOR_VAR -> PGSQL_MAJOR_VER."
,src/C/pljava/type/Timestamp.c,75a789d7b5d10081e50a20047157ec87efaca30b,Kris Jurka,2010-04-16T09:47:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:47:10Z,jurka@ejurka.com,22,11,11,"Naturally my first commit in ages is completely busted.  Typo
PGSQL_MAJOR_VAR -> PGSQL_MAJOR_VER."
,src/C/include/pljava/pljava.h,6b6d1270c3692f06940e0d55f2cde69bd4bc57f1,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,39,25,14,"Update pljava to build against 9.0devel.  Mostly just changing the
conditional compilation to understand the 9.0 version number.
GetConfigOption's API has also changed slightly."
,src/C/pljava/Backend.c,6b6d1270c3692f06940e0d55f2cde69bd4bc57f1,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,39,25,14,"Update pljava to build against 9.0devel.  Mostly just changing the
conditional compilation to understand the 9.0 version number.
GetConfigOption's API has also changed slightly."
,src/C/pljava/JNICalls.c,6b6d1270c3692f06940e0d55f2cde69bd4bc57f1,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,39,25,14,"Update pljava to build against 9.0devel.  Mostly just changing the
conditional compilation to understand the 9.0 version number.
GetConfigOption's API has also changed slightly."
,src/C/pljava/Session.c,6b6d1270c3692f06940e0d55f2cde69bd4bc57f1,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,39,25,14,"Update pljava to build against 9.0devel.  Mostly just changing the
conditional compilation to understand the 9.0 version number.
GetConfigOption's API has also changed slightly."
,src/C/pljava/type/Timestamp.c,6b6d1270c3692f06940e0d55f2cde69bd4bc57f1,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,Kris Jurka,2010-04-16T09:25:10Z,jurka@ejurka.com,39,25,14,"Update pljava to build against 9.0devel.  Mostly just changing the
conditional compilation to understand the 9.0 version number.
GetConfigOption's API has also changed slightly."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,ab87ac5c3b5c0b32db4c55fcddd1f5374eb802d0,Kris Jurka,2009-06-18T00:01:03Z,jurka@ejurka.com,Kris Jurka,2009-06-18T00:01:03Z,jurka@ejurka.com,10,8,2,"Implement Connection.getCatalog.

Nathan Egge"
,src/C/pljava/type/UDT.c,9cbfb1b96ce0a6ad46d1a2d28f6294b7b937ab4f,Kris Jurka,2009-02-19T21:03:02Z,jurka@ejurka.com,Kris Jurka,2009-02-19T21:03:02Z,jurka@ejurka.com,4,4,0,"If the call to a type output function is the first pljava call in a
session, we get a crash.  The first pljava call results in a SPI
connection being established and torn down.  The type output function
was allocating the result in the SPI memory context which gets
destroyed prior to returning the data to the caller.  Allocate the
result in the correct context to survive function exit."
,src/C/pljava/type/UDT.c,272ed6a0b21b65c043a15c5ff74e723f6dd845fd,Kris Jurka,2009-02-19T03:09:23Z,jurka@ejurka.com,Kris Jurka,2009-02-19T03:09:23Z,jurka@ejurka.com,31,29,2,"Handle passed by value data types by reading and writing directly
to the Datum rather than dereferencing it."
,src/C/pljava/type/UDT.c,529441e1811e04a097969c25a7dcffd40e5afda6,Kris Jurka,2009-02-18T21:52:14Z,jurka@ejurka.com,Kris Jurka,2009-02-18T21:52:14Z,jurka@ejurka.com,6,5,1,"When creating a variable length data type, the code was directly
assigning the varlena header length rather than going through an
access macro.  The header format changed for the 8.3 release and
this manual coding was not noticed and changed accordingly.  Use
SET_VARSIZE to do this correctly."
,src/C/pljava/Backend.c,f52e17480b55925ce9504dabef52285b8d717376,Kris Jurka,2009-02-10T01:20:03Z,jurka@ejurka.com,Kris Jurka,2009-02-10T01:20:03Z,jurka@ejurka.com,2,1,1,"The previous commit to fix custom variable setup was busted.  The
argument order was wrong for integer variable setup."
,src/C/pljava/SPI.c,9f95dc28cffae46e146bdefd5b8196eff6073fd1,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,6,6,0,"The server's executor/spi.h header has been changed to remove
includes that it doesn't need itself.  Before we were relying on
these files implicitly being included, so just make that explicit
now."
,src/C/pljava/SubXactListener.c,9f95dc28cffae46e146bdefd5b8196eff6073fd1,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,6,6,0,"The server's executor/spi.h header has been changed to remove
includes that it doesn't need itself.  Before we were relying on
these files implicitly being included, so just make that explicit
now."
,src/C/pljava/type/HeapTupleHeader.c,9f95dc28cffae46e146bdefd5b8196eff6073fd1,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,6,6,0,"The server's executor/spi.h header has been changed to remove
includes that it doesn't need itself.  Before we were relying on
these files implicitly being included, so just make that explicit
now."
,src/C/pljava/type/Type.c,9f95dc28cffae46e146bdefd5b8196eff6073fd1,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,Kris Jurka,2009-02-09T23:08:21Z,jurka@ejurka.com,6,6,0,"The server's executor/spi.h header has been changed to remove
includes that it doesn't need itself.  Before we were relying on
these files implicitly being included, so just make that explicit
now."
,src/C/pljava/Backend.c,8d1b9dcb44c2b3896cd5ca87152cc0cf2afa39c9,Kris Jurka,2009-02-09T22:51:29Z,jurka@ejurka.com,Kris Jurka,2009-02-09T22:51:29Z,jurka@ejurka.com,30,30,0,"Make pljava build against the server 8.4 development tree.  Change
how custom GUC variables are setup to provide an explicit default.

Talha Rizwan"
,src/C/pljava/JNICalls.c,f8b5c4d5e5ad235183966795c84873d284fd50d3,Kris Jurka,2008-10-09T19:00:37Z,jurka@ejurka.com,Kris Jurka,2008-10-09T19:00:37Z,jurka@ejurka.com,8,8,0,"Code in a TransactionListener which tried to make a backend call
would crash because the Invocation context was not setup.  Some
simple backend calls might be safe, but we really don't want any
user code calling into the backend when we're at transaction end,
so prevent all access."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,0b2b72163183799ee1fb36c798ecc6adec1e6559,Kris Jurka,2008-06-04T15:31:39Z,jurka@ejurka.com,Kris Jurka,2008-06-04T15:31:39Z,jurka@ejurka.com,25,16,9,"When executing a statement, we want to make sure any previous state
was cleaned up, so the code was calling close().  This additionally
set a closed flag which would throw exceptions later saying that you
can't call various methods because the Statement is closed.  It's
not actually closed, so split the internal cleanup routine to clear()
and make close() something that only a user should call."
,src/C/pljava/type/Portal.c,e5a089a0b21bb928fd14b8cc4e85087595f0d377,Kris Jurka,2008-05-25T13:20:04Z,jurka@ejurka.com,Kris Jurka,2008-05-25T13:20:04Z,jurka@ejurka.com,28,18,10,"For a multi-threaded pljava function we need to adjust stack_base_ptr
before calling into the backend to avoid stack depth limit exceeded
errors.  Previously this was done only on query execution, but we
need to do it on iteration of the ResultSet as well.

In general it seems that anything operating inside of
synchronized(Backend.THREADLOCK) might need to adjust the stack
unless it's certain the work it's doing is trivial and won't invoke
check_stack_depth.  Unfortunately I don't know enough about when pg
calls check_stack_depth to know offhand what is/is not safe.  A more
thorough audit is required here.

Per report from Alexander Wöhrer."
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,e5a089a0b21bb928fd14b8cc4e85087595f0d377,Kris Jurka,2008-05-25T13:20:04Z,jurka@ejurka.com,Kris Jurka,2008-05-25T13:20:04Z,jurka@ejurka.com,28,18,10,"For a multi-threaded pljava function we need to adjust stack_base_ptr
before calling into the backend to avoid stack depth limit exceeded
errors.  Previously this was done only on query execution, but we
need to do it on iteration of the ResultSet as well.

In general it seems that anything operating inside of
synchronized(Backend.THREADLOCK) might need to adjust the stack
unless it's certain the work it's doing is trivial and won't invoke
check_stack_depth.  Unfortunately I don't know enough about when pg
calls check_stack_depth to know offhand what is/is not safe.  A more
thorough audit is required here.

Per report from Alexander Wöhrer."
,src/C/pljava/type/Composite.c,1d9a77a3f826e0b88dfa49a4c03b74d27f51c0ac,Kris Jurka,2008-02-01T06:28:59Z,jurka@ejurka.com,Kris Jurka,2008-02-01T06:28:59Z,jurka@ejurka.com,8,7,1,"Starting with 8.2, the server reference counts some TupleDescs, so
we need to let it know when we are done with it.

Lucas Madar"
,src/C/pljava/type/Timestamp.c,edc28317270c5333a42a47571165c6c83387ac4b,Kris Jurka,2008-02-01T05:07:22Z,jurka@ejurka.com,Kris Jurka,2008-02-01T05:07:22Z,jurka@ejurka.com,2,1,1,"For a server built with integer datetimes, conversion from SQL to
Java timestamps produced bogus results as the result of overflow.
Prior to conversion to milliseconds, cast the difference in PG and
Unix epochs to a 64 bit type.

Lucas Madar"
,src/C/pljava/Session.c,393d741a2e454a641ab4b2fd3bc94a6c57373904,Kris Jurka,2008-01-11T04:10:06Z,jurka@ejurka.com,Kris Jurka,2008-01-11T04:10:06Z,jurka@ejurka.com,9,9,0,"Recent security releases have altered the API for SetUserId to
include an additional parameter indicating if we're in a security
definer context."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,b9de72e35871bd6df3519261e1bb5c5652cb7872,Kris Jurka,2007-11-16T07:49:37Z,jurka@ejurka.com,Kris Jurka,2007-11-16T07:49:37Z,jurka@ejurka.com,25,22,3,"When doing batch execution with batches that have different types,
the server crashes because it did not replan the query for the new
types.  Save the type information for each batch and compare it with
the previous values to see if we need to replan.

Bug #1010188"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,d9b0fedd86a434ce3fec09f879ae93b013204fac,Kris Jurka,2007-11-15T21:31:25Z,jurka@ejurka.com,Kris Jurka,2007-11-15T21:31:25Z,jurka@ejurka.com,11,8,3,"Batch execution of PreparedStatements failed because addBatch was
only saving off the parameter values while it ignored the parameter
types.  Save both the types and values.

Reported by Lucas Madar
Bug #1010183"
,src/java/pljava/org/postgresql/pljava/management/Commands.java,1ed1f3f1335db0556688241461876e38f55cf0c6,Kris Jurka,2007-11-15T20:08:08Z,jurka@ejurka.com,Kris Jurka,2007-11-15T20:08:08Z,jurka@ejurka.com,2,1,1,"When deploying a jar file with a deployment descriptor, the
deployment failed if the default schema already had a classpath
set.  A typo was setting the current schema value to the classpath,
instead of the default schema.  When trying to set the new classpath
this bailed out with ""No such schema: <classpath>""."
,src/java/examples/org/postgresql/pljava/example/MetaDataBooleans.java,a82f233e81c525d140e4c72505a47560876f460d,Kris Jurka,2007-10-11T20:45:43Z,jurka@ejurka.com,Kris Jurka,2007-10-11T20:45:43Z,jurka@ejurka.com,5,5,0,"Allow pljava built with JDK < 1.6 to successfully run its tests under
a 1.6 JVM by handling unimplemented JDBC4 methods that reflection
finds.

Tom Dunstan"
,src/C/include/pljava/pljava.h,fcd23a8505d50e5860cd8acc2c51ac7e968c725f,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,19,17,2,"In 8.3 DLLIMPORT has been renamed to PGDLLIMPORT and global_timezone
has been renamed to session_timezone."
,src/C/pljava/JNICalls.c,fcd23a8505d50e5860cd8acc2c51ac7e968c725f,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,19,17,2,"In 8.3 DLLIMPORT has been renamed to PGDLLIMPORT and global_timezone
has been renamed to session_timezone."
,src/C/pljava/type/Timestamp.c,fcd23a8505d50e5860cd8acc2c51ac7e968c725f,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,Kris Jurka,2007-09-12T17:59:42Z,jurka@ejurka.com,19,17,2,"In 8.3 DLLIMPORT has been renamed to PGDLLIMPORT and global_timezone
has been renamed to session_timezone."
,src/C/pljava/type/Type.c,66b1ddc11b983c4b71ec9a93b5efa6cebe6e9279,Kris Jurka,2007-09-12T17:31:05Z,jurka@ejurka.com,Kris Jurka,2007-09-12T17:31:05Z,jurka@ejurka.com,20,0,20,"8.3's find_coercion_pathway API has reverted to the old pre-8.3 API,
so the changes made earlier to support 8.3 builds are no longer
correct or needed."
,src/C/pljava/Function.c,16bcfc860f1bbdb92bcc418475877bdc4c72f18f,Kris Jurka,2007-07-31T08:21:02Z,jurka@ejurka.com,Kris Jurka,2007-07-31T08:21:02Z,jurka@ejurka.com,122,61,61,"Allow building with compilers that don't support unnamed struct and
union members by providing names for them."
,src/C/pljava/type/Type.c,34728d5e8bfba7d98f885fc72f30384efde06d6c,Kris Jurka,2007-07-31T08:00:02Z,jurka@ejurka.com,Kris Jurka,2007-07-31T08:00:02Z,jurka@ejurka.com,2,1,1,Ensure arrayCoerce is initialized when used on pre 8.3 servers.
,src/C/pljava/type/String.c,9a7344c000820f0942bd218a539f06a9b7a7cd44,Kris Jurka,2007-05-27T01:33:15Z,jurka@ejurka.com,Kris Jurka,2007-05-27T01:33:15Z,jurka@ejurka.com,2,1,1,Had wrong version check here.  We only want SET_VARSIZE for 8.3+.
,docs/readme.html,977147bae8247e63e95e28865c8142b2828e878e,Kris Jurka,2007-05-26T18:23:11Z,jurka@ejurka.com,Kris Jurka,2007-05-26T18:23:11Z,jurka@ejurka.com,2,1,1,"To build pljava we need pg_config on the path, not pg_ctl."
,src/C/pljava/type/Array.c,e5047766ee5218b980ffbf221fdbe4402b2878b6,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,43,43,0,"Make pljava build against a 8.3dev server.

Changes to array type coercion requires an extra parameter to
find_coercion_pathway.  Since pljava already does array coercion one
element at a time no significant changes are needed.

Smaller varlena headers require slightly different macros to access
Datums, but for pljava it's just a rename."
,src/C/pljava/type/String.c,e5047766ee5218b980ffbf221fdbe4402b2878b6,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,43,43,0,"Make pljava build against a 8.3dev server.

Changes to array type coercion requires an extra parameter to
find_coercion_pathway.  Since pljava already does array coercion one
element at a time no significant changes are needed.

Smaller varlena headers require slightly different macros to access
Datums, but for pljava it's just a rename."
,src/C/pljava/type/Type.c,e5047766ee5218b980ffbf221fdbe4402b2878b6,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,43,43,0,"Make pljava build against a 8.3dev server.

Changes to array type coercion requires an extra parameter to
find_coercion_pathway.  Since pljava already does array coercion one
element at a time no significant changes are needed.

Smaller varlena headers require slightly different macros to access
Datums, but for pljava it's just a rename."
,src/C/pljava/type/byte_array.c,e5047766ee5218b980ffbf221fdbe4402b2878b6,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,Kris Jurka,2007-05-26T18:22:25Z,jurka@ejurka.com,43,43,0,"Make pljava build against a 8.3dev server.

Changes to array type coercion requires an extra parameter to
find_coercion_pathway.  Since pljava already does array coercion one
element at a time no significant changes are needed.

Smaller varlena headers require slightly different macros to access
Datums, but for pljava it's just a rename."
,src/C/pljava/XactListener.c,5f69758e7b7d5e94332563566c7fed392100703b,thallgren,2006-09-25T06:34:44Z,thomas@tada.se,thallgren,2006-09-25T06:34:44Z,thomas@tada.se,1,1,0,Added missing include of xact.h
,src/java/examples/org/postgresql/pljava/example/MetaDataStrings.java,6a7eda5c5bf1c4c7aadca07cab656c834b17d6d4,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,130,39,91,Fixed some issues with Meta-data
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,6a7eda5c5bf1c4c7aadca07cab656c834b17d6d4,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,130,39,91,Fixed some issues with Meta-data
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,6a7eda5c5bf1c4c7aadca07cab656c834b17d6d4,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,thallgren,2006-09-25T06:28:31Z,thomas@tada.se,130,39,91,Fixed some issues with Meta-data
,src/C/pljava/JNICalls.c,2590c859e8f972a31413764a03f15d2ed835c5da,thallgren,2006-06-23T10:14:25Z,thomas@tada.se,thallgren,2006-06-23T10:14:25Z,thomas@tada.se,22,15,7,Fixed stack backtrace on failure to load class
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,247ca0a3e9672b388c4be72d26a9e82d2d6d3021,thallgren,2006-06-18T14:21:37Z,thomas@tada.se,thallgren,2006-06-18T14:21:37Z,thomas@tada.se,16,15,1,Preparation for 1.3.0 final
,src/C/pljava/Backend.c,409ce0a626a6475b507b9846f1cdc1a77b6b52c1,thallgren,2006-06-17T22:05:41Z,thomas@tada.se,thallgren,2006-06-17T22:05:41Z,thomas@tada.se,7,7,0,Added PG_MODULE_MAGIC declaration required from PosgreSQL 8.2 and up.
,.cdtproject,e47e04a4694bb29feb8b2163f811d96013a9c2e0,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,26,13,13,Fixed bug 1558
,.settings/org.eclipse.cdt.core.prefs,e47e04a4694bb29feb8b2163f811d96013a9c2e0,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,26,13,13,Fixed bug 1558
,src/C/pljava/type/LargeObject.c,e47e04a4694bb29feb8b2163f811d96013a9c2e0,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,thallgren,2006-05-28T22:01:48Z,thomas@tada.se,26,13,13,Fixed bug 1558
,src/C/pljava/Function.c,7bac3010b1ac6a24cc0059bf542e242b8d32a775,thallgren,2006-05-15T21:58:21Z,thomas@tada.se,thallgren,2006-05-15T21:58:21Z,thomas@tada.se,4,1,3,Removed some excess logging
,src/C/include/pljava/type/Coerce.h,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/include/pljava/type/Type.h,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/include/pljava/type/Type_priv.h,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/Function.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/AclId.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Coerce.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Composite.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Double.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Float.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Long.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Time.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/C/pljava/type/Type.c,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/java/pljava/org/postgresql/pljava/management/Commands.java,1d80485f20804feb7b4a97f71eefaa9fbdaa4ffa,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,thallgren,2006-05-15T21:52:26Z,thomas@tada.se,440,379,61,"Fixed some backward compatibility issues
Added explicit coercion capability"
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,7de0a3b302efe2bf42eebf7c0fe4602455298a85,fhrbek,2006-05-15T09:55:08Z,filip.hrbek@gmail.com,fhrbek,2006-05-15T09:55:08Z,filip.hrbek@gmail.com,27,26,1,enclosed the installation process by a transaction
,src/java/test/org/postgresql/pljava/test/Tester.java,f18033edb425aa98d01d18703e9cde3a238e5310,thallgren,2006-05-14T13:34:02Z,thomas@tada.se,thallgren,2006-05-14T13:34:02Z,thomas@tada.se,6,3,3,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Point.java,0d9503fb5db841d6926d9cdb45730d088440dd21,thallgren,2006-05-14T13:30:20Z,thomas@tada.se,thallgren,2006-05-14T13:30:20Z,thomas@tada.se,4,2,2,Preparation for 1.3.beta release
,src/C/include/pljava/type/UDT.h,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/C/pljava/Function.c,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/C/pljava/type/Type.c,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/C/pljava/type/UDT.c,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/java/examples/org/postgresql/pljava/example/Point.java,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,c525927f7fb6d8da0971cc02da594926fb073dc7,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,thallgren,2006-05-14T12:27:13Z,thomas@tada.se,86,66,20,add_type_mapping now handles basic as well as composite types.
,src/C/pljava/type/Byte.c,dda3f86af49ebf7f4a767416de4e14a68f515095,thallgren,2006-05-14T06:27:56Z,thomas@tada.se,thallgren,2006-05-14T06:27:56Z,thomas@tada.se,119,90,29,"Fixed glitch causing bytea[] to fail.
Added ""char""[]"
,src/C/pljava/type/Type.c,dda3f86af49ebf7f4a767416de4e14a68f515095,thallgren,2006-05-14T06:27:56Z,thomas@tada.se,thallgren,2006-05-14T06:27:56Z,thomas@tada.se,119,90,29,"Fixed glitch causing bytea[] to fail.
Added ""char""[]"
,src/C/pljava/type/Any.c,43a542803026d9c4460b2e8b3be7bdf6b6caeb56,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,230,212,18,"Now accepts both ""any"" and anyelement types"
,src/java/examples/org/postgresql/pljava/example/AnyTest.java,43a542803026d9c4460b2e8b3be7bdf6b6caeb56,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,230,212,18,"Now accepts both ""any"" and anyelement types"
,src/java/examples/org/postgresql/pljava/example/Parameters.java,43a542803026d9c4460b2e8b3be7bdf6b6caeb56,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,230,212,18,"Now accepts both ""any"" and anyelement types"
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,43a542803026d9c4460b2e8b3be7bdf6b6caeb56,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,230,212,18,"Now accepts both ""any"" and anyelement types"
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,43a542803026d9c4460b2e8b3be7bdf6b6caeb56,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,thallgren,2006-05-13T09:18:38Z,thomas@tada.se,230,212,18,"Now accepts both ""any"" and anyelement types"
,.cdtproject,156a2b89f9dcd56fb0283a8ac08d6dfc06fc42ed,thallgren,2006-05-12T21:59:54Z,thomas@tada.se,thallgren,2006-05-12T21:59:54Z,thomas@tada.se,9,8,1,Fixed bug causing numbers to come out as Strings rather than BigDecimal
,src/C/pljava/type/String.c,156a2b89f9dcd56fb0283a8ac08d6dfc06fc42ed,thallgren,2006-05-12T21:59:54Z,thomas@tada.se,thallgren,2006-05-12T21:59:54Z,thomas@tada.se,9,8,1,Fixed bug causing numbers to come out as Strings rather than BigDecimal
,src/C/pljava/type/Double.c,1d46cee95939d9ee999f2e0cbbdca746408e5cb1,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,8,4,4,Fixed copy/paste mistakes
,src/C/pljava/type/Float.c,1d46cee95939d9ee999f2e0cbbdca746408e5cb1,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,8,4,4,Fixed copy/paste mistakes
,src/C/pljava/type/Long.c,1d46cee95939d9ee999f2e0cbbdca746408e5cb1,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,8,4,4,Fixed copy/paste mistakes
,src/C/pljava/type/Short.c,1d46cee95939d9ee999f2e0cbbdca746408e5cb1,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,thallgren,2006-05-12T11:36:49Z,thomas@tada.se,8,4,4,Fixed copy/paste mistakes
,src/C/pljava/SPI.c,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/examples/org/postgresql/pljava/example/HugeResultSet.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/examples/org/postgresql/pljava/example/TupleReturn.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/java/test/org/postgresql/pljava/test/Tester.java,bac6a3fe56032a91fcad94efa9f7b52bfb5c3d70,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,thallgren,2006-05-12T11:20:11Z,thomas@tada.se,148,133,15,Fix of bug #1556
,src/C/pljava/type/Any.c,b47d579de1f99a53336a5aaf8389cc11e7f67d1a,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,75,64,11,Implementation of anyarray
,src/C/pljava/type/Array.c,b47d579de1f99a53336a5aaf8389cc11e7f67d1a,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,75,64,11,Implementation of anyarray
,src/C/pljava/type/Type.c,b47d579de1f99a53336a5aaf8389cc11e7f67d1a,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,75,64,11,Implementation of anyarray
,src/java/examples/org/postgresql/pljava/example/AnyTest.java,b47d579de1f99a53336a5aaf8389cc11e7f67d1a,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,thallgren,2006-05-12T06:53:23Z,thomas@tada.se,75,64,11,Implementation of anyarray
,.cdtproject,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/PgObject.h,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/type/Array.h,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/type/Type.h,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/type/Type_priv.h,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/type/UDT_priv.h,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/PgObject.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/AclId.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Any.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Array.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/BigDecimal.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Boolean.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Byte.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Composite.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Date.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Double.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Float.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/HeapTupleHeader.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Integer.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/LargeObject.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Long.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Oid.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Portal.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Relation.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Short.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/String.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Time.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Timestamp.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/TriggerData.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Tuple.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/TupleDesc.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Type.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/UDT.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/Void.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/pljava/type/byte_array.c,5bf3673046675c81e49e2057f9db7a5cd7926369,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,thallgren,2006-05-11T21:59:18Z,thomas@tada.se,2297,814,1483,Type system refactoring
,src/C/include/pljava/JNICalls.h,c16a32ff00b32ac4f7c2a65b0460d66685be4d7f,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,255,247,8,Added boolean array type
,src/C/pljava/JNICalls.c,c16a32ff00b32ac4f7c2a65b0460d66685be4d7f,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,255,247,8,Added boolean array type
,src/C/pljava/type/Boolean.c,c16a32ff00b32ac4f7c2a65b0460d66685be4d7f,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,thallgren,2006-05-10T06:43:42Z,thomas@tada.se,255,247,8,Added boolean array type
,src/C/include/pljava/JNICalls.h,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/include/pljava/type/Array.h,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/include/pljava/type/Type.h,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/include/pljava/type/Type_priv.h,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/JNICalls.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Any.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Array.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Double.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Float.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Integer.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Long.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Short.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/C/pljava/type/Type.c,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,src/java/examples/org/postgresql/pljava/example/Parameters.java,9f0decc72477e5c64758e57dbb2c7f690660a398,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,thallgren,2006-05-09T21:35:30Z,thomas@tada.se,1432,1405,27,Added primitive array types
,.cdtproject,77bfc3401245fe9be69744f3634050545325961a,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,51,20,31,Changes needed for PostgreSQL 8.2
,src/C/pljava/type/LargeObject.c,77bfc3401245fe9be69744f3634050545325961a,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,51,20,31,Changes needed for PostgreSQL 8.2
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,77bfc3401245fe9be69744f3634050545325961a,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,thallgren,2006-05-06T13:18:51Z,thomas@tada.se,51,20,31,Changes needed for PostgreSQL 8.2
,.cdtproject,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/include/pljava/type/JavaWrapper.h,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/pljava/SQLOutputToTuple.c,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/pljava/type/Composite.c,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/pljava/type/ErrorData.c,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/pljava/type/JavaWrapper.c,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/C/pljava/type/TriggerData.c,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,57e4d9048134fedb78b67e664124ebf2ea13422b,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,thallgren,2006-05-06T12:52:42Z,thomas@tada.se,95,44,51,More efficient handling of JavaWrapper native pointers
,.cdtproject,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,.settings/org.eclipse.cdt.core.prefs,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/Function.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/Invocation.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/SQLInputFromTuple.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/SQLOutputToTuple.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/ComplexType.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/ComplexType_priv.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/Composite.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/HeapTupleHeader.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/SingleRowWriter.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/String.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/Type.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/Type_priv.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/UDT.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/include/pljava/type/UDT_priv.h,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/Backend.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/ExecutionPlan.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/Function.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/Invocation.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/SPI.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/SQLInputFromTuple.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/SQLOutputToTuple.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Any.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/ComplexType.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Composite.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/HeapTupleHeader.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/JavaWrapper.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Oid.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Portal.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Relation.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/ResultSetProvider.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/SingleRowWriter.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/SingleTupleReader.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/String.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/TupleDesc.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/Type.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/UDT.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/type/ValueSetProvider.c,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/examples/org/postgresql/pljava/example/AnyTest.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/examples/org/postgresql/pljava/example/ComplexScalar.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/examples/org/postgresql/pljava/example/ComplexTuple.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/examples/org/postgresql/pljava/example/TupleReturn.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/ObjectPool.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/ResultSetProvider.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/Session.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/JavaWrapper.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/Session.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/ClobValue.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromResultSet.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromTuple.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToResultSet.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToTuple.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SQLUtils.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/management/Commands.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/sqlj/EntryStreamHandler.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/java/test/org/postgresql/pljava/test/Tester.java,a4f6c9e3f1c751a78631dd2fa2e187fb3ebccc2e,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,thallgren,2006-05-06T11:41:13Z,thomas@tada.se,5887,3272,2615,Rewrite of the type mapping system
,src/C/pljava/PgObject.c,3908d1307e28a771a1c9202cde251847313cb493,thallgren,2006-04-29T19:02:14Z,thomas@tada.se,thallgren,2006-04-29T19:02:14Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/JNICalls.c,541ca3f3e6f449d2537a4f8f22a7f76cfe9d9054,thallgren,2006-04-29T18:58:39Z,thomas@tada.se,thallgren,2006-04-29T18:58:39Z,thomas@tada.se,4,3,1,Improved exception handling
,src/C/pljava/Backend.c,99d5c2e0ba455760519ae62decfafe1fd95e828d,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,109,62,47,*** empty log message ***
,src/C/pljava/Exception.c,99d5c2e0ba455760519ae62decfafe1fd95e828d,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,109,62,47,*** empty log message ***
,src/C/pljava/JNICalls.c,99d5c2e0ba455760519ae62decfafe1fd95e828d,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,thallgren,2006-04-29T18:46:59Z,thomas@tada.se,109,62,47,*** empty log message ***
,src/C/pljava/JNICalls.c,377dae249b6b174cbbfb2d030519032f80a219a9,thallgren,2006-04-29T12:01:54Z,thomas@tada.se,thallgren,2006-04-29T12:01:54Z,thomas@tada.se,2,1,1,Fixed typo
,src/C/pljava/SQLOutputToChunk.c,599817968df01b36cc1aa8324a2000af85e6afdf,thallgren,2006-04-11T12:26:13Z,thomas@tada.se,thallgren,2006-04-11T12:26:13Z,thomas@tada.se,2,1,1,Fixed warning about signedness on char argument
,src/C/pljava/Function.c,a6f7c34c1353ceb06077787a80a59671cc9bee35,thallgren,2006-04-05T18:55:52Z,thomas@tada.se,thallgren,2006-04-05T18:55:52Z,thomas@tada.se,1,1,0,Added missing return clause in Function_inUse.
,src/C/pljava/type/Time.c,25fd6df0e1787a748ebf5000c76c01fbdc72e789,thallgren,2006-04-05T18:46:00Z,thomas@tada.se,thallgren,2006-04-05T18:46:00Z,thomas@tada.se,14,11,3,Fixed bug causing incorrect representation of Time when DST is in effect.
,src/java/examples/org/postgresql/pljava/example/Parameters.java,25fd6df0e1787a748ebf5000c76c01fbdc72e789,thallgren,2006-04-05T18:46:00Z,thomas@tada.se,thallgren,2006-04-05T18:46:00Z,thomas@tada.se,14,11,3,Fixed bug causing incorrect representation of Time when DST is in effect.
,src/C/pljava/type/Date.c,b15fd67c98180d20697b39b7a793c66cf3f9440d,thallgren,2006-03-31T09:12:57Z,thomas@tada.se,thallgren,2006-03-31T09:12:57Z,thomas@tada.se,6,3,3,Fix for bug #1547 in the other direction.
,src/C/pljava/type/Date.c,89794e35cce0795a77ba7b6f52823389f3644364,thallgren,2006-03-31T08:16:28Z,thomas@tada.se,thallgren,2006-03-31T08:16:28Z,thomas@tada.se,2,1,1,"Added missing 64-bit cast of huge constant, this time using INT64CONST macro"
,src/C/pljava/type/Date.c,abf81abf1b9f84bfd367be83d5e1cfa3cedec88d,thallgren,2006-03-31T08:12:04Z,thomas@tada.se,thallgren,2006-03-31T08:12:04Z,thomas@tada.se,2,1,1,Added missing 64-bit cast of huge constant
,src/C/include/pljava/type/Timestamp.h,8d57da8d8ada4aadf83983f32fa7603515f4167e,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,80,48,32,Fix for bug #1547
,src/C/pljava/type/Date.c,8d57da8d8ada4aadf83983f32fa7603515f4167e,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,80,48,32,Fix for bug #1547
,src/C/pljava/type/Timestamp.c,8d57da8d8ada4aadf83983f32fa7603515f4167e,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,80,48,32,Fix for bug #1547
,src/java/examples/org/postgresql/pljava/example/Parameters.java,8d57da8d8ada4aadf83983f32fa7603515f4167e,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,thallgren,2006-03-31T08:06:27Z,thomas@tada.se,80,48,32,Fix for bug #1547
,src/C/pljava/type/ResultSetProvider.c,40dc72a588372831959be8c0c9649f42c48b75a9,thallgren,2006-03-29T19:12:02Z,thomas@tada.se,thallgren,2006-03-29T19:12:02Z,thomas@tada.se,2,0,2,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,549ad9d221d0edc940f6952528d21327c2edea80,thallgren,2006-03-29T19:09:45Z,thomas@tada.se,thallgren,2006-03-29T19:09:45Z,thomas@tada.se,4,2,2,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,a01089916e56217fdca1f2975737fa25c8856c9c,thallgren,2006-03-29T19:06:07Z,thomas@tada.se,thallgren,2006-03-29T19:06:07Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,1ea2f3e8df7386454154416f19f334ec0f5e42ec,thallgren,2006-03-29T18:55:38Z,thomas@tada.se,thallgren,2006-03-29T18:55:38Z,thomas@tada.se,6,3,3,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,c711fc49f323e72c73ace0503b0d7562b4dc126f,thallgren,2006-03-29T18:38:12Z,thomas@tada.se,thallgren,2006-03-29T18:38:12Z,thomas@tada.se,28,15,13,Recursion resilient temporary context for SRF functions
,src/C/pljava/type/ResultSetProvider.c,459235a38f8bd03de1b9ecc59dedfed8e53b26d9,thallgren,2006-03-29T12:54:20Z,thomas@tada.se,thallgren,2006-03-29T12:54:20Z,thomas@tada.se,15,14,1,Using a temporary context for SRF functions
,src/C/pljava/type/ResultSetProvider.c,b9d9b16ae299f981ff3fe6ac81b0b4507ad4ea51,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,81,81,0,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/HugeResultSet.java,b9d9b16ae299f981ff3fe6ac81b0b4507ad4ea51,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,81,81,0,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/RandomInts.java,b9d9b16ae299f981ff3fe6ac81b0b4507ad4ea51,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,thallgren,2006-03-28T05:48:10Z,thomas@tada.se,81,81,0,*** empty log message ***
,src/C/pljava/ExecutionPlan.c,dbb212c83479276e68d7dca4122fb6ad10fb2c82,thallgren,2006-03-26T14:10:45Z,thomas@tada.se,thallgren,2006-03-26T14:10:45Z,thomas@tada.se,14,9,5,Added missing stack base change for prepare.
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,dbb212c83479276e68d7dca4122fb6ad10fb2c82,thallgren,2006-03-26T14:10:45Z,thomas@tada.se,thallgren,2006-03-26T14:10:45Z,thomas@tada.se,14,9,5,Added missing stack base change for prepare.
,src/java/examples/org/postgresql/pljava/example/Triggers.java,efa76a6b7645e410731c10cec532ef6e6ea9f3f1,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,778,428,350,Testcase covering bug #1317
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,efa76a6b7645e410731c10cec532ef6e6ea9f3f1,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,778,428,350,Testcase covering bug #1317
,src/java/test/org/postgresql/pljava/test/Tester.java,efa76a6b7645e410731c10cec532ef6e6ea9f3f1,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,thallgren,2006-03-23T16:51:42Z,thomas@tada.se,778,428,350,Testcase covering bug #1317
,src/C/include/pljava/Invocation.h,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/C/include/pljava/type/TupleTable.h,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/C/pljava/SPI.c,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/C/pljava/type/TupleTable.c,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,223b602aaac947d616ede8aab2147ebf87a2a5a9,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,thallgren,2006-03-23T06:55:53Z,thomas@tada.se,33,18,15,Minor performance improvement due to less created Java TupleDesc objects.
,src/C/pljava/type/SingleRowWriter.c,01f2027cd72c1abf4811bfc3b6e9ad5a2da2f204,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,50,32,18,Fixed memory leak that occured during recursive calls to function returning sets
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,01f2027cd72c1abf4811bfc3b6e9ad5a2da2f204,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,50,32,18,Fixed memory leak that occured during recursive calls to function returning sets
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,01f2027cd72c1abf4811bfc3b6e9ad5a2da2f204,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,50,32,18,Fixed memory leak that occured during recursive calls to function returning sets
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,01f2027cd72c1abf4811bfc3b6e9ad5a2da2f204,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,50,32,18,Fixed memory leak that occured during recursive calls to function returning sets
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,01f2027cd72c1abf4811bfc3b6e9ad5a2da2f204,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,thallgren,2006-03-22T20:52:30Z,thomas@tada.se,50,32,18,Fixed memory leak that occured during recursive calls to function returning sets
,src/C/pljava/type/TupleDesc.c,cf07f62f168268640de458a712f4cd46ef918dc9,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,212,121,91,Fixed bug #1317
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,cf07f62f168268640de458a712f4cd46ef918dc9,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,212,121,91,Fixed bug #1317
,src/java/pljava/org/postgresql/pljava/management/Commands.java,cf07f62f168268640de458a712f4cd46ef918dc9,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,thallgren,2006-03-22T15:35:10Z,thomas@tada.se,212,121,91,Fixed bug #1317
,src/C/pljava/Function.c,84b1776d964c4e68e97fe7fc3f37cc2d127f2be4,thallgren,2006-03-22T06:20:21Z,thomas@tada.se,thallgren,2006-03-22T06:20:21Z,thomas@tada.se,11,10,1,Fixed bug #1542
,src/C/pljava/Invocation.c,84b1776d964c4e68e97fe7fc3f37cc2d127f2be4,thallgren,2006-03-22T06:20:21Z,thomas@tada.se,thallgren,2006-03-22T06:20:21Z,thomas@tada.se,11,10,1,Fixed bug #1542
,src/C/pljava/type/ResultSetProvider.c,e715cc637947bbf3ee21215c20467801a238e26a,thallgren,2006-03-22T06:17:28Z,thomas@tada.se,thallgren,2006-03-22T06:17:28Z,thomas@tada.se,37,0,37,Removed some experimental code that shouldn't have been checked in
,src/C/include/pljava/type/SingleRowWriter.h,47322a4b8bddd85a259df1ea441517b54bd1a702,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,89,50,39,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,47322a4b8bddd85a259df1ea441517b54bd1a702,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,89,50,39,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,47322a4b8bddd85a259df1ea441517b54bd1a702,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,89,50,39,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,47322a4b8bddd85a259df1ea441517b54bd1a702,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,89,50,39,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/HugeResultSet.java,47322a4b8bddd85a259df1ea441517b54bd1a702,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,thallgren,2006-03-22T05:53:46Z,thomas@tada.se,89,50,39,*** empty log message ***
,src/C/include/pljava/type/SingleRowWriter.h,e7fced2df49e53ceaa3f566fe87623ed978ec64d,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,28,19,9,Fixed some memory leaks
,src/C/pljava/type/ResultSetProvider.c,e7fced2df49e53ceaa3f566fe87623ed978ec64d,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,28,19,9,Fixed some memory leaks
,src/C/pljava/type/SingleRowWriter.c,e7fced2df49e53ceaa3f566fe87623ed978ec64d,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,thallgren,2006-03-21T18:27:26Z,thomas@tada.se,28,19,9,Fixed some memory leaks
,docs/intro.html,fa487ffb1e6490c8f322859256d92e57ed5fc90c,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,121,101,20,Fixed some memory leaks
,src/C/pljava/type/ResultSetProvider.c,fa487ffb1e6490c8f322859256d92e57ed5fc90c,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,121,101,20,Fixed some memory leaks
,src/C/pljava/type/SingleRowWriter.c,fa487ffb1e6490c8f322859256d92e57ed5fc90c,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,121,101,20,Fixed some memory leaks
,src/C/pljava/type/TupleDesc.c,fa487ffb1e6490c8f322859256d92e57ed5fc90c,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,121,101,20,Fixed some memory leaks
,src/java/examples/org/postgresql/pljava/example/HugeResultSet.java,fa487ffb1e6490c8f322859256d92e57ed5fc90c,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,thallgren,2006-03-21T15:59:35Z,thomas@tada.se,121,101,20,Fixed some memory leaks
,src/C/pljava/Function.c,463f70a0687c5fb9030839ef659db249e49e2c96,thallgren,2006-03-02T06:19:22Z,thomas@tada.se,thallgren,2006-03-02T06:19:22Z,thomas@tada.se,2,2,0,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,d0dbeede239d00dec920f3c50d95809acc17900d,thallgren,2006-02-28T08:16:57Z,thomas@tada.se,thallgren,2006-02-28T08:16:57Z,thomas@tada.se,24,7,17,"Fixed broken source_tarball target
Refactored some Java 5 dependent code"
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,d0dbeede239d00dec920f3c50d95809acc17900d,thallgren,2006-02-28T08:16:57Z,thomas@tada.se,thallgren,2006-02-28T08:16:57Z,thomas@tada.se,24,7,17,"Fixed broken source_tarball target
Refactored some Java 5 dependent code"
,src/C/pljava/Backend.c,7e12939a51ee6fdd22baa764cdb97675718e1a00,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,58,48,10,Function cache cleared when manipulating jars or classpath from SQL.
,src/C/pljava/Function.c,7e12939a51ee6fdd22baa764cdb97675718e1a00,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,58,48,10,Function cache cleared when manipulating jars or classpath from SQL.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,7e12939a51ee6fdd22baa764cdb97675718e1a00,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,58,48,10,Function cache cleared when manipulating jars or classpath from SQL.
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,7e12939a51ee6fdd22baa764cdb97675718e1a00,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,thallgren,2006-02-26T20:02:43Z,thomas@tada.se,58,48,10,Function cache cleared when manipulating jars or classpath from SQL.
,src/C/include/pljava/Function.h,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/C/include/pljava/HashMap.h,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/C/pljava/Backend.c,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/C/pljava/Function.c,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/C/pljava/HashMap.c,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/management/Commands.java,797b9d6c493e3574bc6b8575f5b310584ad0695c,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,thallgren,2006-02-26T17:20:50Z,thomas@tada.se,67,67,0,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,6da33c5c74aabce64a91f16e31f4183d8681f1ed,thallgren,2006-02-26T15:22:48Z,thomas@tada.se,thallgren,2006-02-26T15:22:48Z,thomas@tada.se,8,4,4,*** empty log message ***
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,d23804a7e1154de58181a8aa48bfbbb2c8adf68b,thallgren,2006-02-26T15:20:31Z,thomas@tada.se,thallgren,2006-02-26T15:20:31Z,thomas@tada.se,30,29,1,Added column jarManifest to sqlj.jar_repository and logic that makes sure the manifest ends up there when a jar is installed or replaced.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,d23804a7e1154de58181a8aa48bfbbb2c8adf68b,thallgren,2006-02-26T15:20:31Z,thomas@tada.se,thallgren,2006-02-26T15:20:31Z,thomas@tada.se,30,29,1,Added column jarManifest to sqlj.jar_repository and logic that makes sure the manifest ends up there when a jar is installed or replaced.
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,74ac440d5a49a43035d28a696dd29f3c3b9958af,thallgren,2006-02-26T13:50:49Z,thomas@tada.se,thallgren,2006-02-26T13:50:49Z,thomas@tada.se,29,8,21,Changed function handlers to use 'pljava' instead of 'libpljava'
,src/C/include/pljava/SQLInputFromChunk.h,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/include/pljava/SQLOutputToChunk.h,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/include/pljava/type/UDT_priv.h,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/pljava/Backend.c,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/pljava/MemoryStream.c,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/pljava/SQLInputFromChunk.c,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/pljava/SQLOutputToChunk.c,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/pljava/type/UDT.c,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/examples/org/postgresql/pljava/example/Complex.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/internal/MemoryChunkInputStream.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/internal/MemoryChunkOutputStream.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromChunk.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputFromResultSet.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputOnStream.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToChunk.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/jdbc/SQLOutputToResultSet.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/java/pljava/org/postgresql/pljava/management/Commands.java,671eadf7f13a7996af31f1936946bf6677ecdc73,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,thallgren,2006-02-12T18:46:04Z,thomas@tada.se,1910,1244,666,Working draft of scalar UDT's
,src/C/include/pljava/Backend.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/Exception.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/Function.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/HashMap.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/HashMap_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/Invocation.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/Iterator.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/JNICalls.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/MemoryStream.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/PgObject.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/PgObject_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/SPI.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/Session.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/backports.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/pljava.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/AclId.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/ComplexType.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/ComplexType_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/ErrorData.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/HeapTupleHeader.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/JavaWrapper.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/LargeObject.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Oid.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Portal.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Relation.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/ResultSetProvider.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/SingleRowWriter.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/String.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/String_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Time.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Timestamp.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/TriggerData.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Tuple.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/TupleDesc.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/TupleTable.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Type.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/Type_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/UDT.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/include/pljava/type/UDT_priv.h,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Backend.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Exception.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/ExecutionPlan.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Function.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/HashMap.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Invocation.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Iterator.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/JNICalls.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/MemoryStream.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/PgObject.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/PgSavepoint.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/SPI.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/Session.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/SubXactListener.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/XactListener.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/backports.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/AclId.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/BigDecimal.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Boolean.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Byte.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/ComplexType.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Date.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Double.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/ErrorData.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Float.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/HeapTupleHeader.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Integer.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/JavaWrapper.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/LargeObject.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Long.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Oid.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Portal.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Relation.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/ResultSetProvider.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Short.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/SingleRowWriter.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/SingleTupleReader.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/String.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Time.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Timestamp.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/TriggerData.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Tuple.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/TupleDesc.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/TupleTable.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Type.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/UDT.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/ValueSetProvider.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/Void.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/byte_array.c,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/ObjectPool.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/PooledObject.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/ResultSetHandle.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/ResultSetProvider.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/SavepointListener.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/Session.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/SessionManager.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/TransactionListener.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/TriggerData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/TriggerException.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ELogFormatter.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ELogHandler.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ErrorData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/JavaWrapper.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/MemoryChunkInputStream.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/MemoryChunkOutputStream.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ObjectPoolImpl.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/PgSavepoint.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ResultSetPicker.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/SPIException.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/ServerException.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Session.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/SubXactListener.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/TransactionalMap.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/Tuple.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/TupleTable.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/internal/XactListener.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/BuiltinFunctions.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/ClobValue.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetBase.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetField.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDriver.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputOnResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SQLInputOnStream.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/StatementClosedException.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/TypeOid.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/management/Commands.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/sqlj/EntryStreamHandler.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/tasks/org/postgresql/pljava/tasks/JarLoaderTask.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/java/tasks/org/postgresql/pljava/tasks/PLJavaTask.java,e0222e36a3d559db68b05d94d25ad27fb10fec9d,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,thallgren,2006-02-11T13:57:50Z,thomas@tada.se,2290,1743,547,"Prototype support for scalar UDT's
Changed copyright"
,src/C/pljava/type/AclId.c,8afd33ccb8a2a56e92dee9c9ced81185ff0bb34d,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,67,61,6,Fixed bug #1506. Jar owner in the sqlj.jar_repository table changed type from oid to name.
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,8afd33ccb8a2a56e92dee9c9ced81185ff0bb34d,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,67,61,6,Fixed bug #1506. Jar owner in the sqlj.jar_repository table changed type from oid to name.
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,8afd33ccb8a2a56e92dee9c9ced81185ff0bb34d,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,67,61,6,Fixed bug #1506. Jar owner in the sqlj.jar_repository table changed type from oid to name.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,8afd33ccb8a2a56e92dee9c9ced81185ff0bb34d,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,67,61,6,Fixed bug #1506. Jar owner in the sqlj.jar_repository table changed type from oid to name.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,8afd33ccb8a2a56e92dee9c9ced81185ff0bb34d,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,thallgren,2006-01-25T18:39:20Z,thomas@tada.se,67,61,6,Fixed bug #1506. Jar owner in the sqlj.jar_repository table changed type from oid to name.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,36c8d930bab3637f02e0b3a8d73bd4e056eab7af,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,25,9,16,Refactored getMetaData so it's available to all single row result sets.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,36c8d930bab3637f02e0b3a8d73bd4e056eab7af,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,25,9,16,Refactored getMetaData so it's available to all single row result sets.
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,36c8d930bab3637f02e0b3a8d73bd4e056eab7af,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,thallgren,2006-01-25T07:41:45Z,thomas@tada.se,25,9,16,Refactored getMetaData so it's available to all single row result sets.
,src/C/pljava/Function.c,840d9baf3e991205c93780b4fc391684464d35b5,thallgren,2006-01-24T18:39:19Z,thomas@tada.se,thallgren,2006-01-24T18:39:19Z,thomas@tada.se,11,10,1,Fixed support for parameters of type RECORD.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,840d9baf3e991205c93780b4fc391684464d35b5,thallgren,2006-01-24T18:39:19Z,thomas@tada.se,thallgren,2006-01-24T18:39:19Z,thomas@tada.se,11,10,1,Fixed support for parameters of type RECORD.
,src/java/examples/org/postgresql/pljava/example/Parameters.java,42db47456984bb7bfc06c891855b579f0c01e9e6,thallgren,2006-01-24T18:19:24Z,thomas@tada.se,thallgren,2006-01-24T18:19:24Z,thomas@tada.se,23,22,1,*** empty log message ***
,src/C/pljava/Backend.c,4e2fa5f86f6098954d8f07efaaacb7c1009c0723,thallgren,2006-01-23T16:45:45Z,thomas@tada.se,thallgren,2006-01-23T16:45:45Z,thomas@tada.se,3,2,1,Added GCJ conditional around use of option -Xrs
,src/java/pljava/org/postgresql/pljava/SavepointListener.java,86b4cf3f047b5c6e37a07912e70c72c8c1931f44,thallgren,2006-01-23T11:56:15Z,thomas@tada.se,thallgren,2006-01-23T11:56:15Z,thomas@tada.se,10,5,5,Removed extranious semicolons
,src/java/pljava/org/postgresql/pljava/TransactionListener.java,86b4cf3f047b5c6e37a07912e70c72c8c1931f44,thallgren,2006-01-23T11:56:15Z,thomas@tada.se,thallgren,2006-01-23T11:56:15Z,thomas@tada.se,10,5,5,Removed extranious semicolons
,src/C/pljava/type/ComplexType.c,2b1437ae3784bbf1b3903d2814b78159c427303c,thallgren,2006-01-23T11:18:02Z,thomas@tada.se,thallgren,2006-01-23T11:18:02Z,thomas@tada.se,41,7,34,Fix for bug #1440
,src/java/examples/org/postgresql/pljava/example/SetOfRecordTest.java,cb6b5c84c2a171dc0036a18fbfecf9f0bcbfffe5,thallgren,2006-01-23T09:37:38Z,thomas@tada.se,thallgren,2006-01-23T09:37:38Z,thomas@tada.se,50,49,1,Added test for SETOF RECORD
,src/C/pljava/ExecutionPlan.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/Invocation.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/PgSavepoint.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/SubXactListener.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/XactListener.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/type/ErrorData.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/type/Portal.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/type/Tuple.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,src/C/pljava/type/TupleDesc.c,71ea9479bfa81a4af6555ec19463079c7177262f,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,thallgren,2006-01-22T16:37:39Z,thomas@tada.se,10,10,0,Ensure that the full 64bit of the Ptr2Long union is zeroed out prior to pointer assignment.
,docs/intro.html,33c496d43e53b75dae8269cd8c684e2a15472934,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,30,11,19,Changes for 1.2.0 release
,docs/readme.html,33c496d43e53b75dae8269cd8c684e2a15472934,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,30,11,19,Changes for 1.2.0 release
,docs/userguide.html,33c496d43e53b75dae8269cd8c684e2a15472934,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,thallgren,2005-11-20T23:46:43Z,thomas@tada.se,30,11,19,Changes for 1.2.0 release
,src/C/include/pljava/JNICalls.h,2ce5d732c12993947cd8c51cf2ef0e520f77a234,thallgren,2005-11-20T22:54:13Z,thomas@tada.se,thallgren,2005-11-20T22:54:13Z,thomas@tada.se,6,3,3,Fixed signed/unsigned warning
,src/C/pljava/JNICalls.c,2ce5d732c12993947cd8c51cf2ef0e520f77a234,thallgren,2005-11-20T22:54:13Z,thomas@tada.se,thallgren,2005-11-20T22:54:13Z,thomas@tada.se,6,3,3,Fixed signed/unsigned warning
,src/C/pljava/type/String.c,12e503bbb4a9365e29a760dd94d31b016d8f5be4,thallgren,2005-11-20T19:23:10Z,thomas@tada.se,thallgren,2005-11-20T19:23:10Z,thomas@tada.se,30,16,14,Fixed signed/unsigned problem.
,src/C/pljava/type/String.c,25ba9028f3ac91982ab66d55b452d408460c6d7a,thallgren,2005-11-20T19:05:23Z,thomas@tada.se,thallgren,2005-11-20T19:05:23Z,thomas@tada.se,17,8,9,Fixed signed/unsigned warnings
,src/C/pljava/type/LargeObject.c,9620319666ce0e914b85632bc533f7cf12b85cc1,thallgren,2005-11-20T18:58:52Z,thomas@tada.se,thallgren,2005-11-20T18:58:52Z,thomas@tada.se,23,10,13,Fixed signed/unsigned warnings
,src/C/pljava/type/String.c,9620319666ce0e914b85632bc533f7cf12b85cc1,thallgren,2005-11-20T18:58:52Z,thomas@tada.se,thallgren,2005-11-20T18:58:52Z,thomas@tada.se,23,10,13,Fixed signed/unsigned warnings
,src/C/pljava/type/Relation.c,67a423adc3a9ec869791679ab0f2c0f4558a9320,thallgren,2005-11-19T19:58:11Z,thomas@tada.se,thallgren,2005-11-19T19:58:11Z,thomas@tada.se,1,1,0,Added missing include of pljava/SPI.h
,docs/intro.html,c3eaa54c281f6121927aaa298a2972fbada12f1a,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,287,128,159,Documentation changes for PL/Java 1.2
,docs/pljava_and_postgresql_8.html,c3eaa54c281f6121927aaa298a2972fbada12f1a,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,287,128,159,Documentation changes for PL/Java 1.2
,docs/readme.html,c3eaa54c281f6121927aaa298a2972fbada12f1a,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,287,128,159,Documentation changes for PL/Java 1.2
,docs/solutions.html,c3eaa54c281f6121927aaa298a2972fbada12f1a,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,287,128,159,Documentation changes for PL/Java 1.2
,docs/userguide.html,c3eaa54c281f6121927aaa298a2972fbada12f1a,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,thallgren,2005-11-19T16:40:06Z,thomas@tada.se,287,128,159,Documentation changes for PL/Java 1.2
,.classpath,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,docs/intro.html,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,docs/pljava_and_postgresql_8.html,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,docs/userguide.html,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/Invocation.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/MemoryContext.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/SPI.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/HeapTupleHeader.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/JavaHandle.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/LargeObject.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/Portal.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/Relation.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/TriggerData.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/include/pljava/type/TupleTable.h,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/Backend.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/Exception.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/Function.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/Invocation.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/MemoryContext.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/SPI.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/Double.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/JavaHandle.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/LargeObject.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/Long.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/Portal.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/Relation.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/ResultSetProvider.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/SingleRowWriter.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/Type.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/C/pljava/type/ValueSetProvider.c,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/JavaHandle.java,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,472130f61890d4748df16b103acf7cfabf7ebba3,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,thallgren,2005-11-19T13:29:37Z,thomas@tada.se,1286,344,942,Removed JavaHandle and complex MemoryContext stuff that was no longer needed.
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,a2dbc15fd221f08d7c43cb1f5962212cec7f33eb,fhrbek,2005-11-14T21:05:08Z,filip.hrbek@gmail.com,fhrbek,2005-11-14T21:05:08Z,filip.hrbek@gmail.com,4,4,0,Added getSchemaName method (supported from PG version 8.1 and higher)
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,f988f0e8e7657b339e0aebe3c7f586f016910dba,fhrbek,2005-11-14T21:04:45Z,filip.hrbek@gmail.com,fhrbek,2005-11-14T21:04:45Z,filip.hrbek@gmail.com,16,16,0,Added getSchema method (supported from PG version 8.1 and higher)
,src/java/pljava/org/postgresql/pljava/TriggerData.java,9af2bfca3310aff88c089758a9343f1ded31e40a,fhrbek,2005-11-14T21:04:20Z,filip.hrbek@gmail.com,fhrbek,2005-11-14T21:04:20Z,filip.hrbek@gmail.com,9,9,0,Added getSchameName method (supported from PG version 8.1 and higher)
,src/C/pljava/type/Relation.c,a2aefc32c8726070d80225f90d2c5c0785c79995,fhrbek,2005-11-14T21:03:53Z,filip.hrbek@gmail.com,fhrbek,2005-11-14T21:03:53Z,filip.hrbek@gmail.com,39,39,0,Added getSchame method (supported from PG version 8.1 and higher)
,src/java/test/org/postgresql/pljava/test/Tester.java,a8b3a91608cce93c8c5e92fb43f5b38b0cf83d39,thallgren,2005-11-13T23:18:53Z,thomas@tada.se,thallgren,2005-11-13T23:18:53Z,thomas@tada.se,17,17,0,*** empty log message ***
,src/C/include/pljava/EOXactListener.h,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/include/pljava/SPI.h,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/Backend.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/EOXactListener.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/Exception.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/ExecutionPlan.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/Function.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/PgSavepoint.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/SPI.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/Session.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/SubXactListener.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/XactListener.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/type/Type.c,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/SavepointListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/Session.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/TransactionListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/EOXactListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/PgSavepoint.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/Savepoint.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/Session.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/SubXactListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/TransactionEvent.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/TransactionListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/internal/XactListener.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIAnonymousSavepoint.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/SPINamedSavepoint.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/java/pljava/org/postgresql/pljava/jdbc/SPISavepoint.java,3ab90e581b0ccdd80555fc15256741298ab510f4,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,thallgren,2005-11-13T23:18:06Z,thomas@tada.se,1377,781,596,"Implemented savepoint listeners.
Better transaction listeners."
,src/C/pljava/type/TriggerData.c,d12016a991b090667ec73e6678471aedb95253a5,thallgren,2005-10-29T08:24:14Z,thomas@tada.se,thallgren,2005-10-29T08:24:14Z,thomas@tada.se,2,1,1,Fixed typo
,src/C/include/pljava/Invocation.h,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/include/pljava/type/JavaWrapper.h,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/include/pljava/type/TriggerData.h,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/pljava/Invocation.c,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/pljava/type/ErrorData.c,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/pljava/type/HeapTupleHeader.c,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/pljava/type/JavaWrapper.c,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/pljava/type/TriggerData.c,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,69598aa9c1517366b8a92177b39968ce4fb0ade7,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,thallgren,2005-10-28T14:33:33Z,thomas@tada.se,505,305,200,Refactoring and cleaning up.
,src/C/include/pljava/Backend.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/Invocation.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/JNICalls.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/pljava.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/type/ExecutionPlan.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/type/JavaWrapper.h,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/Backend.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/Exception.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/ExecutionPlan.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/Function.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/Invocation.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/JNICalls.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/MemoryContext.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/SPI.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/Savepoint.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/type/Portal.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/type/ResultSetProvider.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/type/Savepoint.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/type/SingleRowWriter.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/pljava/type/TriggerData.c,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/java/pljava/org/postgresql/pljava/internal/Savepoint.java,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,8b19541cd498881ff6027aadf883f4c842fd9ffb,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,thallgren,2005-10-26T06:36:22Z,thomas@tada.se,1279,612,667,"Reinstated Exception traces when log level >= DEBUG1
Merged Invocation and CallContext
Cleanup and refactoring"
,src/C/include/pljava/JNICalls.h,a98f49788f36a9a8f32f26f38bd2b8e419f163af,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,16,14,2,Fixed issue with overloaded methods.
,src/C/pljava/Function.c,a98f49788f36a9a8f32f26f38bd2b8e419f163af,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,16,14,2,Fixed issue with overloaded methods.
,src/C/pljava/JNICalls.c,a98f49788f36a9a8f32f26f38bd2b8e419f163af,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,thallgren,2005-10-21T19:52:26Z,thomas@tada.se,16,14,2,Fixed issue with overloaded methods.
,src/C/pljava/JNICalls.c,22935a9b70c68f5df82860aa40d9df5b5bd09c5d,thallgren,2005-10-21T14:32:51Z,thomas@tada.se,thallgren,2005-10-21T14:32:51Z,thomas@tada.se,2,1,1,Fixed monitor glitch apparent on SMP systems.
,src/C/pljava/JNICalls.c,3ae2f9831ae3e829b0cea3cbf6d188fbc8efcf2c,thallgren,2005-10-21T13:31:17Z,thomas@tada.se,thallgren,2005-10-21T13:31:17Z,thomas@tada.se,3,0,3,*** empty log message ***
,src/C/pljava/Backend.c,c95cfe22ff182bc3b9fe1e03236073d88ae54db8,thallgren,2005-10-21T13:06:41Z,thomas@tada.se,thallgren,2005-10-21T13:06:41Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/Exception.c,02b8f2124972519989eb16a4e97e5540cd2849ad,thallgren,2005-10-21T13:02:17Z,thomas@tada.se,thallgren,2005-10-21T13:02:17Z,thomas@tada.se,120,76,44,Java exception can no longer elog.
,src/C/pljava/Backend.c,0ba3459478cc625c6c5e4f38aa7f0dc65883f034,thallgren,2005-10-21T12:16:42Z,thomas@tada.se,thallgren,2005-10-21T12:16:42Z,thomas@tada.se,6,3,3,*** empty log message ***
,src/C/pljava/JNICalls.c,95c5cbff03722a0a9a67086b3951c4ecc6e8c9ef,thallgren,2005-10-21T12:12:04Z,thomas@tada.se,thallgren,2005-10-21T12:12:04Z,thomas@tada.se,8,5,3,Fixed exception related error.
,src/C/include/pljava/Exception.h,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/include/pljava/JNICalls.h,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/Backend.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/Exception.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/Function.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/JNICalls.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/type/ResultSetProvider.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/type/SingleRowWriter.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/type/TriggerData.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/type/byte_array.c,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,1864bfbb2e78bfe2da0e7ab92e17bf25e3136f6c,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,thallgren,2005-10-20T22:33:42Z,thomas@tada.se,261,141,120,Fixed bug causing crash after fence rewrite when returning tuples.
,src/C/pljava/type/Portal.c,259b433410a74b2caaae3360b23b415e1bcfee84,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,13,12,1,Fixed portal clean-up.
,src/java/pljava/org/postgresql/pljava/internal/JavaHandle.java,259b433410a74b2caaae3360b23b415e1bcfee84,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,13,12,1,Fixed portal clean-up.
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,259b433410a74b2caaae3360b23b415e1bcfee84,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,thallgren,2005-10-20T11:23:11Z,thomas@tada.se,13,12,1,Fixed portal clean-up.
,src/C/pljava/Backend.c,44ea02c2df5c60b8861482034ce4c358220e6878,thallgren,2005-10-19T21:27:42Z,thomas@tada.se,thallgren,2005-10-19T21:27:42Z,thomas@tada.se,8,4,4,Fixed typo
,src/C/pljava/Backend.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/EOXactListener.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/Exception.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/Function.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/HashMap.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/Iterator.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/JNICalls.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/SPI.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/Session.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/AclId.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/BigDecimal.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Boolean.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Byte.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Date.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Double.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/ErrorData.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/ExecutionPlan.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Float.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/HeapTupleHeader.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Integer.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/JavaHandle.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/JavaWrapper.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/LargeObject.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Long.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Oid.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Portal.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Relation.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/ResultSetProvider.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Savepoint.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Short.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/SingleRowWriter.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/SingleTupleReader.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/String.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Time.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Timestamp.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/TriggerData.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Tuple.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/TupleDesc.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/TupleTable.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Type.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/ValueSetProvider.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/Void.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/byte_array.c,66da9ecfca3f2e53cbed3811c9a011226ff1677d,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,thallgren,2005-10-19T21:11:40Z,thomas@tada.se,111,58,53,Changes needed in order to compile with 8.0.x
,src/C/pljava/type/LargeObject.c,6d4f7630e9a67c510fbd9e169acfcd55d60f11ee,thallgren,2005-10-19T17:44:01Z,thomas@tada.se,thallgren,2005-10-19T17:44:01Z,thomas@tada.se,4,3,1,Fixed so that LargeObject functionality is initialized on startup.
,src/C/pljava/type/Type.c,6d4f7630e9a67c510fbd9e169acfcd55d60f11ee,thallgren,2005-10-19T17:44:01Z,thomas@tada.se,thallgren,2005-10-19T17:44:01Z,thomas@tada.se,4,3,1,Fixed so that LargeObject functionality is initialized on startup.
,src/C/pljava/type/LargeObject.c,1c5f9d1b19aa9f682fff4ac28e7451d5dc61178e,thallgren,2005-10-19T17:35:33Z,thomas@tada.se,thallgren,2005-10-19T17:35:33Z,thomas@tada.se,20,17,3,Fixed needed code to accomodate API change for LargeObjects
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,1c5f9d1b19aa9f682fff4ac28e7451d5dc61178e,thallgren,2005-10-19T17:35:33Z,thomas@tada.se,thallgren,2005-10-19T17:35:33Z,thomas@tada.se,20,17,3,Fixed needed code to accomodate API change for LargeObjects
,.cdtproject,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/Backend.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/CallContext.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/EOXactListener.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/Exception.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/Function.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/HashMap.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/JNICalls.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/MemoryContext.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/PLJavaMemoryContext.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/PgObject.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/PgObject_priv.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/SPI.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/Session.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/pljava.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/AclId.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/ErrorData.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/ExecutionPlan.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/HeapTupleHeader.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/JavaHandle.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/JavaWrapper.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/LargeObject.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Oid.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Portal.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Relation.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/SingleRowWriter.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/String.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/String_priv.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/TriggerData.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Tuple.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/TupleDesc.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/TupleTable.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Type.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/include/pljava/type/Type_priv.h,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Backend.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/EOXactListener.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Exception.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Function.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/HashMap.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Iterator.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/JNICalls.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/MemoryContext.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/PLJavaMemoryContext.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/PgObject.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/SPI.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Session.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/AclId.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/BigDecimal.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Boolean.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Byte.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Date.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Double.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/ErrorData.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/ExecutionPlan.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Float.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/HeapTupleHeader.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Integer.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/JavaHandle.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/JavaWrapper.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/LargeObject.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Long.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/MemoryContextManaged.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/NativeStruct.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Oid.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Portal.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Relation.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/ResultSetProvider.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Savepoint.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Short.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/SingleRowWriter.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/SingleTupleReader.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/String.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Time.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Timestamp.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/TriggerData.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Tuple.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/TupleDesc.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/TupleTable.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Type.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/ValueSetProvider.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/Void.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/type/byte_array.c,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/ErrorData.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/JavaHandle.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/JavaWrapper.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/Savepoint.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/Tuple.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,4e75a069c3e943fc34a1fc1ace6145963d51b663,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,thallgren,2005-10-19T17:18:12Z,thomas@tada.se,7002,3530,3472,Rewrite of fence mechanism
,src/C/pljava/Backend.c,50aca65b0a4712750323f69e7def31d6ea0601e1,thallgren,2005-10-16T14:26:25Z,thomas@tada.se,thallgren,2005-10-16T14:26:25Z,thomas@tada.se,92,9,83,"INDEX_MAX_KEYS now determined using GUC variable max_index_keys
Dropped support for CYGWIN since 7.x no longer is supported"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,50aca65b0a4712750323f69e7def31d6ea0601e1,thallgren,2005-10-16T14:26:25Z,thomas@tada.se,thallgren,2005-10-16T14:26:25Z,thomas@tada.se,92,9,83,"INDEX_MAX_KEYS now determined using GUC variable max_index_keys
Dropped support for CYGWIN since 7.x no longer is supported"
,.cdtproject,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/Backend.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/PLJavaMemoryContext.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/SPI.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/backports.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/pljava.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/AclId.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/ComplexType.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/ErrorData.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/MemoryContextManaged.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/SPITupleTable.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/Tuple.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/TupleDesc.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/TupleTable.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/include/pljava/type/TupleTableSlot.h,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/Backend.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/EOXactListener.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/Exception.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/Function.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/PLJavaMemoryContext.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/SPI.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/backports.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/ComplexType.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/ErrorData.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/ExecutionPlan.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/HeapTupleHeader.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/MemoryContextManaged.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Portal.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/ResultSetProvider.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/SPITupleTable.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Savepoint.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/SingleRowReader.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/SingleRowWriter.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/SingleTupleReader.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Time.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Timestamp.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Tuple.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/TupleDesc.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/TupleTable.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/TupleTableSlot.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/type/Type.c,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/MemoryContextManaged.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/SPITupleTable.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/Session.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/Tuple.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/TupleTable.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/internal/TupleTableSlot.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,233632b2bd5fc5a467318379ac6a9b7aea993fc3,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,thallgren,2005-10-16T11:46:18Z,thomas@tada.se,2587,1001,1586,"Dropped support for versions prior to 8.0.
Fixed bug causing stack check failur when backend was called from thread other than main
Fixed stability issue related to GC and MemoryContexts"
,src/C/pljava/Backend.c,e7125ce1454f8335833ae8260dcf455e4aadadbc,thallgren,2005-09-28T22:48:33Z,thomas@tada.se,thallgren,2005-09-28T22:48:33Z,thomas@tada.se,143,90,53,Fixed bug that caused crash when initializing using incorrect pljava.classpath
,src/C/pljava/PgObject.c,e7125ce1454f8335833ae8260dcf455e4aadadbc,thallgren,2005-09-28T22:48:33Z,thomas@tada.se,thallgren,2005-09-28T22:48:33Z,thomas@tada.se,143,90,53,Fixed bug that caused crash when initializing using incorrect pljava.classpath
,docs/pljava_and_postgresql_8.html,bbe17b6c18d2b9049389f5c484e1df4b29dc42a9,thallgren,2005-09-28T06:19:47Z,thomas@tada.se,thallgren,2005-09-28T06:19:47Z,thomas@tada.se,0,0,0,fixed typo in filename
,.cdtproject,f055273548ee3ce13eabeb5ed666fb746ee28307,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,174,169,5,Changes needed in order to build with 8.1beta2
,.classpath,f055273548ee3ce13eabeb5ed666fb746ee28307,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,174,169,5,Changes needed in order to build with 8.1beta2
,src/C/include/pljava/type/AclId.h,f055273548ee3ce13eabeb5ed666fb746ee28307,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,174,169,5,Changes needed in order to build with 8.1beta2
,src/C/pljava/type/Timestamp.c,f055273548ee3ce13eabeb5ed666fb746ee28307,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,174,169,5,Changes needed in order to build with 8.1beta2
,src/java/test/org/postgresql/pljava/test/TableBuilder.java,f055273548ee3ce13eabeb5ed666fb746ee28307,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,thallgren,2005-09-22T08:09:48Z,thomas@tada.se,174,169,5,Changes needed in order to build with 8.1beta2
,src/java/examples/org/postgresql/pljava/example/MetaDataBooleans.java,b241bc1efaae379e438f7d94ca5e1794e50e86f2,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,15,0,15,Removed some code that was never called.
,src/java/examples/org/postgresql/pljava/example/MetaDataInts.java,b241bc1efaae379e438f7d94ca5e1794e50e86f2,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,15,0,15,Removed some code that was never called.
,src/java/examples/org/postgresql/pljava/example/MetaDataStrings.java,b241bc1efaae379e438f7d94ca5e1794e50e86f2,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,thallgren,2005-09-08T07:46:37Z,thomas@tada.se,15,0,15,Removed some code that was never called.
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,87422b0a02e45a324e19d3965ab6c4e345c13693,thallgren,2005-09-08T07:44:57Z,thomas@tada.se,thallgren,2005-09-08T07:44:57Z,thomas@tada.se,22,21,1,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,87422b0a02e45a324e19d3965ab6c4e345c13693,thallgren,2005-09-08T07:44:57Z,thomas@tada.se,thallgren,2005-09-08T07:44:57Z,thomas@tada.se,22,21,1,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,68f65e2c4354b8908ce453ca88ace3da66ff633e,thallgren,2005-04-14T07:36:34Z,thomas@tada.se,thallgren,2005-04-14T07:36:34Z,thomas@tada.se,9,3,6,*** empty log message ***
,src/C/pljava/type/SingleRowReader.c,30990a42eac9f47ac849596559e254eeffcc4512,thallgren,2005-04-14T07:17:40Z,thomas@tada.se,thallgren,2005-04-14T07:17:40Z,thomas@tada.se,1,1,0,*** empty log message ***
,src/C/include/pljava/backports.h,48a440804db9d17124ea2655cebebae70f19f440,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,8,5,3,*** empty log message ***
,src/C/pljava/SPI.c,48a440804db9d17124ea2655cebebae70f19f440,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,8,5,3,*** empty log message ***
,src/C/pljava/backports.c,48a440804db9d17124ea2655cebebae70f19f440,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,8,5,3,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,48a440804db9d17124ea2655cebebae70f19f440,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,8,5,3,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,48a440804db9d17124ea2655cebebae70f19f440,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,thallgren,2005-04-14T07:13:59Z,thomas@tada.se,8,5,3,*** empty log message ***
,src/C/pljava/backports.c,01936b02dd91dba611d27e4760be906f90322912,thallgren,2005-04-14T07:07:01Z,thomas@tada.se,thallgren,2005-04-14T07:07:01Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/backports.c,29a13b11de34f5d6f545e279f2531e74b1a17414,thallgren,2005-04-14T07:05:22Z,thomas@tada.se,thallgren,2005-04-14T07:05:22Z,thomas@tada.se,33,33,0,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/backports.c,498b9275e406e997df1d1774eada4ae00769eef0,thallgren,2005-04-14T06:57:15Z,thomas@tada.se,thallgren,2005-04-14T06:57:15Z,thomas@tada.se,2,2,0,Backport of things missing in PostgreSQL 7.4
,src/C/include/pljava/type/ComplexType.h,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/include/pljava/type/ResultSetProvider.h,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/include/pljava/type/SingleRowWriter.h,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/Function.c,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/ComplexType.c,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/ResultSetProvider.c,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/SingleRowWriter.c,f18f3f97d5a8ffef26d91bbe99fb0a0f24ed6fc8,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,23,18,5,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/ComplexType.c,aee94d7d401c2b03d8b4952d0338816ccbcbb88d,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,94,92,2,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/ResultSetProvider.c,aee94d7d401c2b03d8b4952d0338816ccbcbb88d,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,94,92,2,Backport of things missing in PostgreSQL 7.4
,src/C/pljava/type/SingleRowWriter.c,aee94d7d401c2b03d8b4952d0338816ccbcbb88d,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,thallgren,2005-04-14T06:49:07Z,thomas@tada.se,94,92,2,Backport of things missing in PostgreSQL 7.4
,src/C/include/pljava/backports.h,74b6a80a3e5843778e28e4b4fa2651636e750f27,thallgren,2005-04-14T06:31:21Z,thomas@tada.se,thallgren,2005-04-14T06:31:21Z,thomas@tada.se,13,13,0,Backport of things missing in PostgreSQL 7.4
,docs/intro.html,5f254e6cca5e17ea7b32c41a0c1741191c4ca4be,thallgren,2005-04-13T20:28:53Z,thomas@tada.se,thallgren,2005-04-13T20:28:53Z,thomas@tada.se,11,6,5,Bump of version number from 1.1.0b1 to 1.1.0
,docs/pljava_and_posgresql_8.html,5f254e6cca5e17ea7b32c41a0c1741191c4ca4be,thallgren,2005-04-13T20:28:53Z,thomas@tada.se,thallgren,2005-04-13T20:28:53Z,thomas@tada.se,11,6,5,Bump of version number from 1.1.0b1 to 1.1.0
,src/C/pljava/type/ComplexType.c,d84a67ea8440ee45264e62297f47d4fd31ea538d,thallgren,2005-04-13T17:36:16Z,thomas@tada.se,thallgren,2005-04-13T17:36:16Z,thomas@tada.se,11,10,1,Avoid segfault when TupleDesc cannot be determined
,src/C/include/pljava/backports.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/include/pljava/type/ComplexType.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/include/pljava/type/ResultSetProvider.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/include/pljava/type/SingleRowWriter.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/include/pljava/type/Type.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/include/pljava/type/Type_priv.h,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/Function.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/backports.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/type/ComplexType.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/type/ResultSetProvider.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/type/SingleRowWriter.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,src/C/pljava/type/Type.c,a2742efc15fc73f6314ed257b8c2827a8edf1fd1,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,thallgren,2005-04-13T14:13:07Z,thomas@tada.se,152,105,47,Better handling of RECORD return types.
,.externalToolBuilders/org.eclipse.cdt.make.core.makeBuilder.launch,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/Function.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/SPI.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/backports.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/ComplexType.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/ComplexType_priv.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/ResultSetProvider.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/SingleRowWriter.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/Type.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/include/pljava/type/Type_priv.h,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/Backend.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/Function.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/SPI.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/backports.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/type/ComplexType.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/type/ResultSetProvider.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/type/SingleRowWriter.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/type/Type.c,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/java/test/org/postgresql/pljava/test/Tester.java,0c83d50e004c871cb8dff69f69f1fc98db28d0a5,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,thallgren,2005-04-12T22:29:51Z,thomas@tada.se,831,664,167,Changes needed to accomodate OUT parameters in 8.1
,src/C/pljava/Backend.c,8d973b7284e9f437c1a76247ed573168dc672767,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,67,62,5,Changes needed to compile on OS2
,src/java5/examples/org/postgresql/pljava/example/annotation/Triggers.java,8d973b7284e9f437c1a76247ed573168dc672767,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,67,62,5,Changes needed to compile on OS2
,src/java5/pljava/org/postgresql/pljava/annotation/Function.java,8d973b7284e9f437c1a76247ed573168dc672767,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,thallgren,2005-04-10T07:52:21Z,thomas@tada.se,67,62,5,Changes needed to compile on OS2
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,11fcc31e9401b4a96230cf959d2450d4caa6b850,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,70,68,2,Fixed bug causing primitive arrays to fail.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,11fcc31e9401b4a96230cf959d2450d4caa6b850,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,70,68,2,Fixed bug causing primitive arrays to fail.
,src/java/test/org/postgresql/pljava/test/Tester.java,11fcc31e9401b4a96230cf959d2450d4caa6b850,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,thallgren,2005-03-30T11:42:38Z,thomas@tada.se,70,68,2,Fixed bug causing primitive arrays to fail.
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,bb85b2680f3b45255538b273452967bcfec3889a,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,247,140,107,Coersion for getXXX now applies to updateXXX as well
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,bb85b2680f3b45255538b273452967bcfec3889a,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,247,140,107,Coersion for getXXX now applies to updateXXX as well
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,bb85b2680f3b45255538b273452967bcfec3889a,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,thallgren,2005-03-30T08:28:08Z,thomas@tada.se,247,140,107,Coersion for getXXX now applies to updateXXX as well
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,3844b63a13f6ee5ab20accd70e464a7cd0298fe0,thallgren,2005-03-30T06:23:07Z,thomas@tada.se,thallgren,2005-03-30T06:23:07Z,thomas@tada.se,21,12,9,Improved caching of class.
,src/C/include/pljava/TypeMap.h,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/Backend.c,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/TypeMap.c,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/type/Oid.c,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/type/Tuple.c,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/type/TupleDesc.c,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/internal/TypeMap.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetField.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/java/pljava/org/postgresql/pljava/jdbc/TypeOid.java,6b8ebb39b7339d8146c67e09dd46b91fef9110c9,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,thallgren,2005-03-30T06:13:52Z,thomas@tada.se,649,360,289,"More forgiving getXXX methods on ResultSet with respect to types.
Made use of Oid more strict. The Oid class is used instead of int.
Moved TypeMap functionality into the Oid class."
,src/C/pljava/Exception.c,2e56e945a1c7c186053da37651faa18d8b744564,thallgren,2005-03-28T11:31:44Z,thomas@tada.se,thallgren,2005-03-28T11:31:44Z,thomas@tada.se,1,0,1,Removed stray local variable
,src/C/pljava/Exception.c,ad1df28d39c42b6f57686829a761def6b59c5242,thallgren,2005-03-28T11:27:31Z,thomas@tada.se,thallgren,2005-03-28T11:27:31Z,thomas@tada.se,1,1,0,Added missing FlushErrorState after CopyError
,src/C/pljava/type/byte_array.c,1b1e31b3255ba8c605ff65825cc2248b7ab096a3,thallgren,2005-03-27T14:00:27Z,thomas@tada.se,thallgren,2005-03-27T14:00:27Z,thomas@tada.se,9,2,7,Better exception handling
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,d9913a308b7c7b246ac1dbccfb8df3e684f59859,thallgren,2005-03-27T13:55:44Z,thomas@tada.se,thallgren,2005-03-27T13:55:44Z,thomas@tada.se,20,17,3,Made getContents resilient to ByteBuffer with no array support
,src/C/pljava/type/byte_array.c,90f4f26f8ee1c78186aab2a40871d0094d77914b,thallgren,2005-03-27T11:23:48Z,thomas@tada.se,thallgren,2005-03-27T11:23:48Z,thomas@tada.se,72,68,4,Added test for binary columns
,src/java/examples/org/postgresql/pljava/example/BinaryColumnTest.java,90f4f26f8ee1c78186aab2a40871d0094d77914b,thallgren,2005-03-27T11:23:48Z,thomas@tada.se,thallgren,2005-03-27T11:23:48Z,thomas@tada.se,72,68,4,Added test for binary columns
,src/C/pljava/type/byte_array.c,ba20b1e81e64ac1bc934a7bcf1bd6c45c258ee1c,thallgren,2005-03-26T10:14:51Z,thomas@tada.se,thallgren,2005-03-26T10:14:51Z,thomas@tada.se,2,1,1,Fixed typo
,src/C/pljava/type/byte_array.c,2b90695c0bcde5e0c4841c6068421e65384c25c5,thallgren,2005-03-26T10:13:53Z,thomas@tada.se,thallgren,2005-03-26T10:13:53Z,thomas@tada.se,2,1,1,Fixed typo
,src/C/include/pljava/Exception.h,f7d6259c51bd468ca58e4f6999ed9650bd573ac4,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,122,117,5,Added BlobValue coersion to the bytea type.
,src/C/pljava/Exception.c,f7d6259c51bd468ca58e4f6999ed9650bd573ac4,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,122,117,5,Added BlobValue coersion to the bytea type.
,src/C/pljava/type/byte_array.c,f7d6259c51bd468ca58e4f6999ed9650bd573ac4,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,122,117,5,Added BlobValue coersion to the bytea type.
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,f7d6259c51bd468ca58e4f6999ed9650bd573ac4,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,thallgren,2005-03-26T10:11:37Z,thomas@tada.se,122,117,5,Added BlobValue coersion to the bytea type.
,src/C/pljava/Backend.c,b826cef5277dfe1e733bc3d335ec6d2e18abcaa4,thallgren,2005-03-20T23:14:49Z,thomas@tada.se,thallgren,2005-03-20T23:14:49Z,thomas@tada.se,57,55,2,Fixed bug #1231
,src/java/examples/org/postgresql/pljava/example/LoggerTest.java,b826cef5277dfe1e733bc3d335ec6d2e18abcaa4,thallgren,2005-03-20T23:14:49Z,thomas@tada.se,thallgren,2005-03-20T23:14:49Z,thomas@tada.se,57,55,2,Fixed bug #1231
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,7c121a80162349a15c9dfb11586657064651752c,fhrbek,2005-03-18T13:08:14Z,filip.hrbek@gmail.com,fhrbek,2005-03-18T13:08:14Z,filip.hrbek@gmail.com,6,6,0,"From now getWarning throws an exception on a closed statement, according to JDBC specification"
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,a1c04e339f83a6e7c82bbf9327041bf9c29d7de5,fhrbek,2005-03-18T13:04:49Z,filip.hrbek@gmail.com,fhrbek,2005-03-18T13:04:49Z,filip.hrbek@gmail.com,2,1,1,"Fixed misspelled ""Retrieved"""
,src/C/pljava/Exception.c,12c3fe9a490ee219bda196f546093d80e0f927da,thallgren,2005-03-17T12:31:01Z,thomas@tada.se,thallgren,2005-03-17T12:31:01Z,thomas@tada.se,15,11,4,Fix for bug #1228
,src/C/pljava/SPI.c,12c3fe9a490ee219bda196f546093d80e0f927da,thallgren,2005-03-17T12:31:01Z,thomas@tada.se,thallgren,2005-03-17T12:31:01Z,thomas@tada.se,15,11,4,Fix for bug #1228
,src/C/include/pljava/type/Tuple.h,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/include/pljava/type/TupleDesc.h,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/include/pljava/type/Type.h,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/pljava/type/Tuple.c,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/pljava/type/TupleDesc.c,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/pljava/type/TupleTableSlot.c,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/C/pljava/type/Type.c,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/java/pljava/org/postgresql/pljava/internal/TupleTableSlot.java,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,71865f54cfa29d21998049fbd2a8d51fe3d23678,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,thallgren,2005-03-17T10:53:56Z,thomas@tada.se,158,108,50,Changes needed for PostgreSQL 8.1.x
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,9cb1e302d393ea17f049e0e242768f514411d820,thallgren,2005-03-17T08:43:29Z,thomas@tada.se,thallgren,2005-03-17T08:43:29Z,thomas@tada.se,2,1,1,Fixed ArrayIndexOutOfBounds exception reported by Petr Michalek
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,11877f99154eb8970fe3f7a14af38fa3f4fefba3,fhrbek,2005-03-16T18:04:33Z,filip.hrbek@gmail.com,fhrbek,2005-03-16T18:04:33Z,filip.hrbek@gmail.com,51,51,0,Added test of transaction recovery using an anonymous savepoint
,src/C/pljava/Backend.c,349b5ed1b4679eb525f163a17f8d042d47b85e03,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,60,49,11,Fixed bug# 1218
,src/C/pljava/type/ResultSetProvider.c,349b5ed1b4679eb525f163a17f8d042d47b85e03,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,60,49,11,Fixed bug# 1218
,src/java/examples/org/postgresql/pljava/example/ResultSetTest.java,349b5ed1b4679eb525f163a17f8d042d47b85e03,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,60,49,11,Fixed bug# 1218
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,349b5ed1b4679eb525f163a17f8d042d47b85e03,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,60,49,11,Fixed bug# 1218
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,349b5ed1b4679eb525f163a17f8d042d47b85e03,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,thallgren,2005-03-14T10:52:12Z,thomas@tada.se,60,49,11,Fixed bug# 1218
,src/C/pljava/type/Time.c,0e34314ffcda8841686cc2548ad189b3f614608b,thallgren,2005-03-14T10:48:42Z,thomas@tada.se,thallgren,2005-03-14T10:48:42Z,thomas@tada.se,10,10,0,Fixed bug# 1216
,src/C/pljava/type/Time.c,56777d0892eb2d4c45c2974d86ca855221323678,thallgren,2005-03-14T08:10:10Z,thomas@tada.se,thallgren,2005-03-14T08:10:10Z,thomas@tada.se,27,22,5,Fixed bug# 1216
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,56777d0892eb2d4c45c2974d86ca855221323678,thallgren,2005-03-14T08:10:10Z,thomas@tada.se,thallgren,2005-03-14T08:10:10Z,thomas@tada.se,27,22,5,Fixed bug# 1216
,.classpath,8e08468b57c0d935bf1af816ddb6a2747e198044,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,671,537,134,Added install_jar and replace_jar using images as a complement to URLs
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,8e08468b57c0d935bf1af816ddb6a2747e198044,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,671,537,134,Added install_jar and replace_jar using images as a complement to URLs
,src/java/pljava/org/postgresql/pljava/management/Commands.java,8e08468b57c0d935bf1af816ddb6a2747e198044,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,671,537,134,Added install_jar and replace_jar using images as a complement to URLs
,src/java/tasks/org/postgresql/pljava/tasks/JarLoaderTask.java,8e08468b57c0d935bf1af816ddb6a2747e198044,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,671,537,134,Added install_jar and replace_jar using images as a complement to URLs
,src/java/tasks/org/postgresql/pljava/tasks/PLJavaTask.java,8e08468b57c0d935bf1af816ddb6a2747e198044,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,thallgren,2005-03-14T00:15:52Z,thomas@tada.se,671,537,134,Added install_jar and replace_jar using images as a complement to URLs
,src/C/pljava/type/Date.c,afb661881c9045711ca29bb094d715df3d0520fd,thallgren,2005-03-13T23:21:38Z,thomas@tada.se,thallgren,2005-03-13T23:21:38Z,thomas@tada.se,38,35,3,Fixed bug #1215
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,afb661881c9045711ca29bb094d715df3d0520fd,thallgren,2005-03-13T23:21:38Z,thomas@tada.se,thallgren,2005-03-13T23:21:38Z,thomas@tada.se,38,35,3,Fixed bug #1215
,src/C/include/pljava/type/Time.h,2694700c74da1f87c44474908045e038eb2e1dc0,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,199,160,39,Runtime detection of integer-datetimes
,src/C/pljava/type/Time.c,2694700c74da1f87c44474908045e038eb2e1dc0,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,199,160,39,Runtime detection of integer-datetimes
,src/C/pljava/type/Timestamp.c,2694700c74da1f87c44474908045e038eb2e1dc0,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,thallgren,2005-03-13T12:42:34Z,thomas@tada.se,199,160,39,Runtime detection of integer-datetimes
,src/C/pljava/Backend.c,3df5272f87fb8bec75d26eb5c8cf51fd195819b2,thallgren,2005-03-13T11:08:49Z,thomas@tada.se,thallgren,2005-03-13T11:08:49Z,thomas@tada.se,1,1,0,Added include of fcntl.h
,src/C/include/pljava/Backend.h,4c0a11a8bc127297f633475e9e70f1a4e4f58660,thallgren,2005-03-13T10:56:51Z,thomas@tada.se,thallgren,2005-03-13T10:56:51Z,thomas@tada.se,46,45,1,Runtime detection of integer-datetimes
,src/C/pljava/Backend.c,4c0a11a8bc127297f633475e9e70f1a4e4f58660,thallgren,2005-03-13T10:56:51Z,thomas@tada.se,thallgren,2005-03-13T10:56:51Z,thomas@tada.se,46,45,1,Runtime detection of integer-datetimes
,src/C/pljava/Function.c,f9e13f503ee50b13ebd3de756c99a37337254950,thallgren,2005-03-12T17:38:53Z,thomas@tada.se,thallgren,2005-03-12T17:38:53Z,thomas@tada.se,15,5,10,Changed MemoryContext management for multi-call functions
,src/C/pljava/type/ResultSetProvider.c,f9e13f503ee50b13ebd3de756c99a37337254950,thallgren,2005-03-12T17:38:53Z,thomas@tada.se,thallgren,2005-03-12T17:38:53Z,thomas@tada.se,15,5,10,Changed MemoryContext management for multi-call functions
,src/C/pljava/Function.c,65eff585a998863b02f67a67091347612a5a9338,thallgren,2005-03-12T17:27:22Z,thomas@tada.se,thallgren,2005-03-12T17:27:22Z,thomas@tada.se,43,20,23,Changed MemoryContext management for multi-call functions
,src/C/pljava/type/ResultSetProvider.c,65eff585a998863b02f67a67091347612a5a9338,thallgren,2005-03-12T17:27:22Z,thomas@tada.se,thallgren,2005-03-12T17:27:22Z,thomas@tada.se,43,20,23,Changed MemoryContext management for multi-call functions
,src/C/pljava/Function.c,30a87eeb3adf6c2ffb13aa7d763319f033c575fc,thallgren,2005-03-12T16:54:38Z,thomas@tada.se,thallgren,2005-03-12T16:54:38Z,thomas@tada.se,24,17,7,Changed MemoryContext management for multi-call functions
,src/C/pljava/type/ResultSetProvider.c,30a87eeb3adf6c2ffb13aa7d763319f033c575fc,thallgren,2005-03-12T16:54:38Z,thomas@tada.se,thallgren,2005-03-12T16:54:38Z,thomas@tada.se,24,17,7,Changed MemoryContext management for multi-call functions
,src/C/pljava/type/Time.c,14aa0e5467f06357d08582314e0a97b5ae38a3bb,thallgren,2005-03-10T07:08:41Z,thomas@tada.se,thallgren,2005-03-10T07:08:41Z,thomas@tada.se,4,2,2,Correced misspelled HAVE_INT64_Time definition
,src/java/test/org/postgresql/pljava/test/Tester.java,0d2b89d42e5f307ab31c5e540b76168ed3161859,fhrbek,2005-03-08T14:47:01Z,filip.hrbek@gmail.com,fhrbek,2005-03-08T14:47:01Z,filip.hrbek@gmail.com,37,37,0,Added ResultSetTest
,src/java/examples/org/postgresql/pljava/example/MetaDataTest.java,b37293a508f5c05aed8dbaf9694307c5fc2aba86,fhrbek,2005-03-08T14:46:37Z,filip.hrbek@gmail.com,fhrbek,2005-03-08T14:46:37Z,filip.hrbek@gmail.com,42,13,29,Removed tricky way of getting column count; now we have ResultSetMetaData for this purpose.
,src/java/examples/org/postgresql/pljava/example/ResultSetTest.java,674edbbb60b492878267290e9bee75016243215f,fhrbek,2005-03-08T14:46:01Z,filip.hrbek@gmail.com,fhrbek,2005-03-08T14:46:01Z,filip.hrbek@gmail.com,82,82,0,"For a convenient testing SQL SELECT commands;
suitable for ResultSet testing."
,src/C/pljava/type/Time.c,51e0f3d78d24935200d7074e8eab48ad4f70e526,thallgren,2005-03-08T14:17:57Z,thomas@tada.se,thallgren,2005-03-08T14:17:57Z,thomas@tada.se,30,29,1,Fixed bug #1206
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,51e0f3d78d24935200d7074e8eab48ad4f70e526,thallgren,2005-03-08T14:17:57Z,thomas@tada.se,thallgren,2005-03-08T14:17:57Z,thomas@tada.se,30,29,1,Fixed bug #1206
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,51ae941351c39b7e736b65c176987bf368d0df91,fhrbek,2005-03-07T01:30:18Z,filip.hrbek@gmail.com,fhrbek,2005-03-07T01:30:18Z,filip.hrbek@gmail.com,21,12,9,Fixed some comments
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,0442f04e8f7305ee0626911c76a0d6b346b9ea00,fhrbek,2005-03-07T01:28:48Z,filip.hrbek@gmail.com,fhrbek,2005-03-07T01:28:48Z,filip.hrbek@gmail.com,2,1,1,"Fixed misspelt ""search"""
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,ddf6a8783636711181c708406dedf186fefdc09d,fhrbek,2005-03-06T22:21:03Z,filip.hrbek@gmail.com,fhrbek,2005-03-06T22:21:03Z,filip.hrbek@gmail.com,7,5,2,"Changed the schema search logic:
schema is null => search in all schemas (even those that are not in current search path)"
,docs/intro.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,docs/jni_rationale.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,docs/pljava_and_posgresql_8.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,docs/readme.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,docs/solutions.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,docs/userguide.html,dd6c8cc60502b174d6146cd19fea3acb87141acf,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,thallgren,2005-03-05T12:02:22Z,thomas@tada.se,197,108,89,Added Java trademark info to all docs.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,55fc656cdbb99e289f71a11fdfdb162b0305f35b,fhrbek,2005-03-03T13:55:09Z,filip.hrbek@gmail.com,fhrbek,2005-03-03T13:55:09Z,filip.hrbek@gmail.com,158,93,65,"Changed the logic of *schema* and *schemaPattern* handling:
- if schema is specified, search in this schema
- if schema is """", search in 'public' schema
- if schema is null, serach in current search_path schemas *)

*) only schemas with at least USAGE privilege are searched"
,docs/readme.html,393e03c01bd95cda9ebd4a85d8f1d24ea5e9e81e,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,25,18,7,"Added comments about GCJ limitations for security.
Removed obsolete import."
,docs/userguide.html,393e03c01bd95cda9ebd4a85d8f1d24ea5e9e81e,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,25,18,7,"Added comments about GCJ limitations for security.
Removed obsolete import."
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,393e03c01bd95cda9ebd4a85d8f1d24ea5e9e81e,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,thallgren,2005-02-25T13:50:06Z,thomas@tada.se,25,18,7,"Added comments about GCJ limitations for security.
Removed obsolete import."
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,10ac66d497df50561f8a50a274f767bbeb51a116,thallgren,2005-02-24T21:38:54Z,thomas@tada.se,thallgren,2005-02-24T21:38:54Z,thomas@tada.se,28,26,2,Improved SecurityManager
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,8845e1778b00a6c824f0e5143ea1d3f3f1a8dae7,thallgren,2005-02-24T21:28:32Z,thomas@tada.se,thallgren,2005-02-24T21:28:32Z,thomas@tada.se,6,3,3,GCJ bug #20193
,src/C/pljava/Backend.c,593a005f50b046b42bd17f4455bfaa9f17e30b42,thallgren,2005-02-24T21:23:04Z,thomas@tada.se,thallgren,2005-02-24T21:23:04Z,thomas@tada.se,5,5,0,GCJ still can't handle SecurityManagers
,.externalToolBuilders/org.eclipse.cdt.make.core.makeBuilder.launch,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/C/include/pljava/Backend.h,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/C/pljava/Backend.c,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/C/pljava/type/ResultSetProvider.c,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/C/pljava/type/ValueSetProvider.c,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/java/pljava/org/postgresql/pljava/internal/Session.java,d4c1785123345932df5addc4bdddfd5f8d9a603e,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,thallgren,2005-02-24T14:26:45Z,thomas@tada.se,220,95,125,Removed some obsolete #ifdef GCJ
,src/C/pljava/Backend.c,8c59e028f9a2b7268c313c6c9c86d369fc3bea8e,thallgren,2005-02-21T19:39:22Z,thomas@tada.se,thallgren,2005-02-21T19:39:22Z,thomas@tada.se,6,6,0,Added #ifndef GCJ conditional around SecurityManager setting.
,src/C/pljava/type/ResultSetProvider.c,8bf121b8f35ac071a8f6b8136be3beb809d2118a,thallgren,2005-02-21T16:53:50Z,thomas@tada.se,thallgren,2005-02-21T16:53:50Z,thomas@tada.se,2,1,1,Fixed glitch that made GCJ compilation fail.
,docs/userguide.html,0a3bf19445af9bd34ec881e475c2bac8cdb69462,thallgren,2005-02-21T16:04:48Z,thomas@tada.se,thallgren,2005-02-21T16:04:48Z,thomas@tada.se,259,193,66,Added an example of method returning ResultSet and updated the docs.
,src/java/examples/org/postgresql/pljava/example/Users.java,0a3bf19445af9bd34ec881e475c2bac8cdb69462,thallgren,2005-02-21T16:04:48Z,thomas@tada.se,thallgren,2005-02-21T16:04:48Z,thomas@tada.se,259,193,66,Added an example of method returning ResultSet and updated the docs.
,src/C/pljava/type/TupleDesc.c,3c1456bf7ea82df5b22951aabbf805837750ce3b,thallgren,2005-02-20T14:24:27Z,thomas@tada.se,thallgren,2005-02-20T14:24:27Z,thomas@tada.se,4,2,2,"Removed ""ISO C90 forbids mixed declarations and code"" warning"
,src/java/examples/org/postgresql/pljava/example/MetaDataTest.java,738a857e57c63b657c6e0075304d44421a3051ae,fhrbek,2005-02-20T01:25:56Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:25:56Z,filip.hrbek@gmail.com,17,16,1,Added tests for ResultSetMetaData (headers for MetaData tests)
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,b59566503aa4f67ae299ff71e99623b15e27dd41,fhrbek,2005-02-20T01:25:27Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:25:27Z,filip.hrbek@gmail.com,142,142,0,Implementation of ResultSetMetaData
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSetMetaData.java,b59566503aa4f67ae299ff71e99623b15e27dd41,fhrbek,2005-02-20T01:25:27Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:25:27Z,filip.hrbek@gmail.com,142,142,0,Implementation of ResultSetMetaData
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,b2008b0654544a08d834d8ac5bc365b6eaeac3ee,fhrbek,2005-02-20T01:25:05Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:25:05Z,filip.hrbek@gmail.com,332,26,306,Splitted to an abstract layer AbstractResultSetMetaData and its implementation SyntheticResultSetMetaData
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,b2008b0654544a08d834d8ac5bc365b6eaeac3ee,fhrbek,2005-02-20T01:25:05Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:25:05Z,filip.hrbek@gmail.com,332,26,306,Splitted to an abstract layer AbstractResultSetMetaData and its implementation SyntheticResultSetMetaData
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSetMetaData.java,7b6d6a4ebd24caf533611b77c443cbf7e4791ac8,fhrbek,2005-02-20T01:24:21Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:24:21Z,filip.hrbek@gmail.com,402,402,0,Abstract layer for ResultSetMetaData
,src/C/pljava/type/TupleDesc.c,ebb607bd20ef1f52a3d768a97a54b98be763f7cb,fhrbek,2005-02-20T01:23:52Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:23:52Z,filip.hrbek@gmail.com,56,56,0,Added getOid method (needed for ResultSetMetaData)
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,ebb607bd20ef1f52a3d768a97a54b98be763f7cb,fhrbek,2005-02-20T01:23:52Z,filip.hrbek@gmail.com,fhrbek,2005-02-20T01:23:52Z,filip.hrbek@gmail.com,56,56,0,Added getOid method (needed for ResultSetMetaData)
,docs/readme.html,3efcf8361523c104d763da6ef0c4830bd85bf36e,fhrbek,2005-02-19T09:55:40Z,filip.hrbek@gmail.com,fhrbek,2005-02-19T09:55:40Z,filip.hrbek@gmail.com,6,3,3,Fixed: example.jar => examples.jar
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetField.java,14b9cb849be70b5b7ffa7f62df6fb6869c6cd962,fhrbek,2005-02-19T09:53:07Z,filip.hrbek@gmail.com,fhrbek,2005-02-19T09:53:07Z,filip.hrbek@gmail.com,4,2,2,"Made column names case insensitive (stored as upper case, queried insensitively)"
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,14b9cb849be70b5b7ffa7f62df6fb6869c6cd962,fhrbek,2005-02-19T09:53:07Z,filip.hrbek@gmail.com,fhrbek,2005-02-19T09:53:07Z,filip.hrbek@gmail.com,4,2,2,"Made column names case insensitive (stored as upper case, queried insensitively)"
,src/C/include/pljava/Backend.h,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/C/pljava/Backend.c,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/C/pljava/EOXactListener.c,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/C/pljava/type/Portal.c,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/java5/examples/org/postgresql/pljava/example/annotation/UsingProperties.java,c673e69f488b81fd0d083443160d3ef5d7df8acf,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,thallgren,2005-02-19T00:55:58Z,thomas@tada.se,339,250,89,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,8d8282fa34372b01007d1ccb817e4016f434828a,fhrbek,2005-02-18T18:21:21Z,filip.hrbek@gmail.com,fhrbek,2005-02-18T18:21:21Z,filip.hrbek@gmail.com,417,417,0,Added ResultSetMetaData support (for SyntheticResultSet only)
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSetMetaData.java,8d8282fa34372b01007d1ccb817e4016f434828a,fhrbek,2005-02-18T18:21:21Z,filip.hrbek@gmail.com,fhrbek,2005-02-18T18:21:21Z,filip.hrbek@gmail.com,417,417,0,Added ResultSetMetaData support (for SyntheticResultSet only)
,src/C/pljava/Function.c,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/ResultSetHandle.java,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ResultSetPicker.java,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,0b3be6f4bbac89a30f2eec4a3d973f28a2ed7553,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,thallgren,2005-02-18T12:15:04Z,thomas@tada.se,124,94,30,*** empty log message ***
,src/C/include/pljava/Backend.h,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/include/pljava/type/SingleRowWriter.h,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/Backend.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/Function.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/MemoryContext.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/SPI.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/type/ExecutionPlan.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/type/ResultSetProvider.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/C/pljava/type/SingleRowWriter.c,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/ComplexReturn.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/MetaDataBooleans.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/MetaDataInts.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/MetaDataStrings.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/MetaDataTest.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/UsingProperties.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsResultSet.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/ObjectPool.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/PooledObject.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/ResultSetProvider.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/Session.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/internal/ObjectPoolImpl.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/internal/ResultSetPicker.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/internal/Session.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/test/org/postgresql/pljava/test/Tester.java,4b874119df25d69e8d5b84aa2bc20ffc58b05ebc,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,thallgren,2005-02-18T11:03:32Z,thomas@tada.se,798,666,132,"Added the ability to return a ResultSet
Added object pooling capabilities"
,src/java/test/org/postgresql/pljava/test/Tester.java,e15735888e76f6e987cb2e01b44737f1d1077341,fhrbek,2005-02-17T23:52:53Z,filip.hrbek@gmail.com,fhrbek,2005-02-17T23:52:53Z,filip.hrbek@gmail.com,128,128,0,Added a thorough test of DatabaseMetaData features.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,aa939a6e31cad3df08689fac7e75d1967b6a25f8,fhrbek,2005-02-17T23:51:49Z,filip.hrbek@gmail.com,fhrbek,2005-02-17T23:51:49Z,filip.hrbek@gmail.com,316,158,158,"Fixed several int X short mismatches.
Changed byte[][] to Object[] for new version of SyntheticResultSet"
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,8915bad15563de347c89bbac66d03f8ac6274008,fhrbek,2005-02-17T23:50:57Z,filip.hrbek@gmail.com,fhrbek,2005-02-17T23:50:57Z,filip.hrbek@gmail.com,117,26,91,"Changed tuple buffer from byte[][] to Object[], so that the objects would not need to be reconstructed from byte[].
The constructor now checks if inserted objects correspond with appropriate ResulSetField structure."
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetField.java,f98602c6df35ad86e15b5a6e8743c1934f06c973,fhrbek,2005-02-17T23:39:35Z,filip.hrbek@gmail.com,fhrbek,2005-02-17T23:39:35Z,filip.hrbek@gmail.com,29,29,0,Added initialization of new field m_class which is used in SyntheticResultSet
,src/java/examples/org/postgresql/pljava/example/MetaDataTest.java,c81d586ac4826ed71aaa386da66351016fb4bff2,fhrbek,2005-02-17T23:37:44Z,filip.hrbek@gmail.com,fhrbek,2005-02-17T23:37:44Z,filip.hrbek@gmail.com,404,259,145,Made better DatabaseMetaData testing functions.
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,cc838dbb3a4c0643dd164c0a9478876c0bdd8703,thallgren,2005-02-17T13:23:04Z,thomas@tada.se,thallgren,2005-02-17T13:23:04Z,thomas@tada.se,98,75,23,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,9132775475568b6848d94b1938d22082c6f999e1,fhrbek,2005-02-15T20:11:14Z,filip.hrbek@gmail.com,fhrbek,2005-02-15T20:11:14Z,filip.hrbek@gmail.com,3,1,2,Fixed usage text (-jar deploy.jar => org.postgresql.pljava.test.Tester)
,fixes/gcj/java_sql_Types.h,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/C/include/pljava/TypeMap.h,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/C/pljava/Backend.c,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/C/pljava/TypeMap.c,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/examples/org/postgresql/pljava/example/MetaDataBooleans.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/examples/org/postgresql/pljava/example/MetaDataInts.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/examples/org/postgresql/pljava/example/MetaDataStrings.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/examples/org/postgresql/pljava/example/MetaDataTest.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/internal/TypeMap.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/BuiltinFunctions.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetBase.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/ResultSetField.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDatabaseMetaData.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/SyntheticResultSet.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,src/java/pljava/org/postgresql/pljava/jdbc/TypeOid.java,11f416d58c8d3bad55286d8a2a39d7c17cdbccf3,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,thallgren,2005-02-13T23:45:55Z,thomas@tada.se,5043,4864,179,Filips DatabaseMetaData additions
,.classpath,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/pljava/org/postgresql/pljava/management/Commands.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/pljava/org/postgresql/pljava/sqlj/EntryStreamHandler.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,039db412fa91a23b67ceb8d90d30bc540fef7c5d,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,thallgren,2005-02-11T22:07:03Z,thomas@tada.se,77,54,23,Restrict replace_jar and remove_jar to jar owner or superuser
,.classpath,04e025f82ae2f88c20633fee8dd24c07035b5eef,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,16,14,2,*** empty log message ***
,.settings/org.eclipse.jdt.core.prefs,04e025f82ae2f88c20633fee8dd24c07035b5eef,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,16,14,2,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,04e025f82ae2f88c20633fee8dd24c07035b5eef,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,thallgren,2005-02-11T13:46:15Z,thomas@tada.se,16,14,2,*** empty log message ***
,src/C/pljava/Backend.c,9cda52cb655fad7aaedd0a4d2b210c17c1c075e4,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,96,85,11,Added language javaU with an untrusted call handler
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,9cda52cb655fad7aaedd0a4d2b210c17c1c075e4,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,96,85,11,Added language javaU with an untrusted call handler
,src/java/test/org/postgresql/pljava/test/Tester.java,9cda52cb655fad7aaedd0a4d2b210c17c1c075e4,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,thallgren,2005-02-10T19:11:18Z,thomas@tada.se,96,85,11,Added language javaU with an untrusted call handler
,docs/readme.html,b12065f853bdfd7b05b5724f8fd35285f7560610,thallgren,2005-02-10T12:17:39Z,thomas@tada.se,thallgren,2005-02-10T12:17:39Z,thomas@tada.se,34,20,14,*** empty log message ***
,docs/userguide.html,b12065f853bdfd7b05b5724f8fd35285f7560610,thallgren,2005-02-10T12:17:39Z,thomas@tada.se,thallgren,2005-02-10T12:17:39Z,thomas@tada.se,34,20,14,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/management/Commands.java,59b7de9db576674c4ff6cc0dab7ace8411ae7ab3,thallgren,2005-02-09T14:31:57Z,thomas@tada.se,thallgren,2005-02-09T14:31:57Z,thomas@tada.se,27,27,0,Cached schema loaders now cleared when jars are loaded or removed and after set_classpath.
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,59b7de9db576674c4ff6cc0dab7ace8411ae7ab3,thallgren,2005-02-09T14:31:57Z,thomas@tada.se,thallgren,2005-02-09T14:31:57Z,thomas@tada.se,27,27,0,Cached schema loaders now cleared when jars are loaded or removed and after set_classpath.
,src/C/pljava/Backend.c,13b904567e5fc043c0ae813cc1de945d3d82a7b2,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,283,256,27,Added SecurityManagers for trusted and untrusted versions
,src/java/examples/org/postgresql/pljava/example/Security.java,13b904567e5fc043c0ae813cc1de945d3d82a7b2,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,283,256,27,Added SecurityManagers for trusted and untrusted versions
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,13b904567e5fc043c0ae813cc1de945d3d82a7b2,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,283,256,27,Added SecurityManagers for trusted and untrusted versions
,src/java/pljava/org/postgresql/pljava/management/Commands.java,13b904567e5fc043c0ae813cc1de945d3d82a7b2,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,283,256,27,Added SecurityManagers for trusted and untrusted versions
,src/java/test/org/postgresql/pljava/test/Tester.java,13b904567e5fc043c0ae813cc1de945d3d82a7b2,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,thallgren,2005-02-09T13:11:01Z,thomas@tada.se,283,256,27,Added SecurityManagers for trusted and untrusted versions
,docs/userguide.html,597300cbeab01990bcca58ccc295178ae722382c,thallgren,2005-02-06T18:30:23Z,thomas@tada.se,thallgren,2005-02-06T18:30:23Z,thomas@tada.se,96,77,19,*** empty log message ***
,src/C/pljava/type/AclId.c,597300cbeab01990bcca58ccc295178ae722382c,thallgren,2005-02-06T18:30:23Z,thomas@tada.se,thallgren,2005-02-06T18:30:23Z,thomas@tada.se,96,77,19,*** empty log message ***
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,6bf0f3a9e3421ae6a8e44eee501b7e35ffc84a70,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,72,50,22,Additional security constraints
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,6bf0f3a9e3421ae6a8e44eee501b7e35ffc84a70,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,72,50,22,Additional security constraints
,src/java/pljava/org/postgresql/pljava/management/Commands.java,6bf0f3a9e3421ae6a8e44eee501b7e35ffc84a70,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,thallgren,2005-02-06T17:18:21Z,thomas@tada.se,72,50,22,Additional security constraints
,docs/intro.html,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/C/include/pljava/Session.h,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/C/include/pljava/type/AclId.h,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/C/pljava/Backend.c,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/C/pljava/Session.c,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/C/pljava/type/AclId.c,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/java/pljava/org/postgresql/pljava/Session.java,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/java/pljava/org/postgresql/pljava/internal/Session.java,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,23d88c4c83f3d8a5cecf7ee04cede7899d705871,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,thallgren,2005-02-05T17:31:14Z,thomas@tada.se,300,279,21,Filips additions and ability to execute a statement as the session user.
,docs/intro.html,a6116038097ea247de9189b4cbbcb3e906e318e3,thallgren,2005-01-23T23:39:47Z,thomas@tada.se,thallgren,2005-01-23T23:39:47Z,thomas@tada.se,159,159,0,*** empty log message ***
,docs/pljava_and_posgresql_8.html,a6116038097ea247de9189b4cbbcb3e906e318e3,thallgren,2005-01-23T23:39:47Z,thomas@tada.se,thallgren,2005-01-23T23:39:47Z,thomas@tada.se,159,159,0,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,81dc33d17d0214260b369149f18c0dab781a97c4,thallgren,2005-01-23T14:09:38Z,thomas@tada.se,thallgren,2005-01-23T14:09:38Z,thomas@tada.se,2,1,1,*** empty log message ***
,docs/readme.html,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,docs/solutions.html,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,docs/userguide.html,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/Backend.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/EOXactListener.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/Exception.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/Function.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/HashMap.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/HashMap_priv.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/Iterator.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/MemoryContext.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/PgObject.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/PgObject_priv.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/SPI.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/pljava.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/ErrorData.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/ExecutionPlan.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/HeapTupleHeader.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/LargeObject.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/NativeStruct.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Oid.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Portal.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Relation.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/SPITupleTable.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/SingleRowWriter.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/String.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/String_priv.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Timestamp.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/TriggerData.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Tuple.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/TupleDesc.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/TupleTable.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/TupleTableSlot.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Type.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/include/pljava/type/Type_priv.h,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/Backend.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/EOXactListener.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/Exception.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/Function.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/HashMap.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/Iterator.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/MemoryContext.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/PgObject.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/SPI.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/AclId.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/BigDecimal.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Boolean.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Byte.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Date.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Double.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/ErrorData.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/ExecutionPlan.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Float.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/HeapTupleHeader.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Integer.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/LargeObject.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Long.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/NativeStruct.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Oid.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Portal.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Relation.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/ResultSetProvider.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/SPITupleTable.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Savepoint.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Short.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/SingleRowReader.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/SingleRowWriter.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/SingleTupleReader.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/String.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Time.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Timestamp.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/TriggerData.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Tuple.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/TupleDesc.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/TupleTable.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/TupleTableSlot.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Type.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/ValueSetProvider.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/Void.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/C/pljava/type/byte_array.c,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/ComplexReturn.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/Parameters.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/Threads.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/Triggers.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/UsingProperties.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/ResultSetProvider.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/Session.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/SessionManager.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/TriggerData.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/TriggerException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/ELogFormatter.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/ELogHandler.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/EOXactListener.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/ErrorData.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/NativeStruct.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/SPIException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/SPITupleTable.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Savepoint.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/ServerException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Session.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TransactionEvent.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TransactionListener.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TransactionalMap.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/Tuple.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TupleTable.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/internal/TupleTableSlot.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/ClobValue.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIAnonymousSavepoint.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDriver.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPINamedSavepoint.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPISavepoint.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/StatementClosedException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/management/Commands.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/sqlj/EntryStreamHandler.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/test/org/postgresql/pljava/test/CommandReader.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/test/org/postgresql/pljava/test/Environment.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/test/org/postgresql/pljava/test/Path.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java/test/org/postgresql/pljava/test/Tester.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/examples/org/postgresql/pljava/example/annotation/UsingProperties.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/examples/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/annotation/Function.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/annotation/Trigger.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultAnnotationVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultClassVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultMethodVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/FunctionVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/GenericType.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/MalformedTriggerException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/MissingAttributeException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/PLJavaClassVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/SQLGenerator.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/TriggerVisitor.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/TypeMapper.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnknownTypeException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnrecognizedAttributeException.java,cc4ab2caab79c95c3f18325a3a501fa27f44673e,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,thallgren,2005-01-23T13:56:14Z,thomas@tada.se,1263,827,436,Changed banner text.
,.cdtproject,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,.classpath,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,.externalToolBuilders/org.eclipse.cdt.make.core.makeBuilder.launch,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/examples/org/postgresql/pljava/example/annotation/UsingProperties.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/examples/org/postgresql/pljava/example/annotation/UsingPropertiesAsScalarSet.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultAnnotationVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultClassVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/DefaultMethodVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/FunctionVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/GenericType.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/MalformedTriggerException.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/MissingAttributeException.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/PLJavaClassVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/SQLGenerator.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/TriggerVisitor.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/TypeMapper.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnknownTypeException.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/sqlgen/UnrecognizedAttributeException.java,edd8b578d602c9ee136ba678d94b8fa543b0975c,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,thallgren,2005-01-23T10:56:36Z,thomas@tada.se,1334,1278,56,Added first incarnation of SQL function/trigger generator based on annotations.
,src/java5/pljava/org/postgresql/pljava/annotation/Function.java,924feedb49b81366222a2eb19cbc362158ab2811,thallgren,2005-01-23T09:35:11Z,thomas@tada.se,thallgren,2005-01-23T09:35:11Z,thomas@tada.se,116,116,0,*** empty log message ***
,src/java5/pljava/org/postgresql/pljava/annotation/Trigger.java,924feedb49b81366222a2eb19cbc362158ab2811,thallgren,2005-01-23T09:35:11Z,thomas@tada.se,thallgren,2005-01-23T09:35:11Z,thomas@tada.se,116,116,0,*** empty log message ***
,src/C/pljava/MemoryContext.c,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Triggers.java,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,f71cdd721b3a2b4a32fdd17674378aac3fca46af,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,thallgren,2005-01-10T16:15:37Z,thomas@tada.se,54,36,18,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,2ba65131f87ac53f6539dbdb25719f764948332f,thallgren,2005-01-03T08:57:57Z,thomas@tada.se,thallgren,2005-01-03T08:57:57Z,thomas@tada.se,9,8,1,*** empty log message ***
,.classpath,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/C/pljava/Function.c,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/C/pljava/HashMap.c,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/C/pljava/type/ExecutionPlan.c,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/C/pljava/type/Type.c,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java5/org/postgresql/pljava/annotation/Function.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/java5/org/postgresql/pljava/annotation/Trigger.java,cebbd7203eeeff1c94c642812fe173f70db0d8a0,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,thallgren,2005-01-03T00:15:34Z,thomas@tada.se,295,186,109,Improved caching and closing of prepared statements.
,src/C/pljava/HashMap.c,e926df4529f6746060744dee2625e631000b2752,thallgren,2005-01-01T20:56:08Z,thomas@tada.se,thallgren,2005-01-01T20:56:08Z,thomas@tada.se,3,2,1,Fixed bug in hash key calculation
,docs/jni_rationale.html,40f14975d563860cf9e007419eac4682216f8663,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,119,36,83,*** empty log message ***
,docs/readme.html,40f14975d563860cf9e007419eac4682216f8663,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,119,36,83,*** empty log message ***
,docs/solutions.html,40f14975d563860cf9e007419eac4682216f8663,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,119,36,83,*** empty log message ***
,docs/userguide.html,40f14975d563860cf9e007419eac4682216f8663,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,119,36,83,*** empty log message ***
,src/C/pljava/Backend.c,40f14975d563860cf9e007419eac4682216f8663,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,thallgren,2004-12-16T13:48:35Z,thomas@tada.se,119,36,83,*** empty log message ***
,docs/readme.html,3fc6a3b0e4878da5530fbd6d2835261c5cc5975d,thallgren,2004-12-06T14:29:31Z,thomas@tada.se,thallgren,2004-12-06T14:29:31Z,thomas@tada.se,86,68,18,*** empty log message ***
,docs/userguide.html,3fc6a3b0e4878da5530fbd6d2835261c5cc5975d,thallgren,2004-12-06T14:29:31Z,thomas@tada.se,thallgren,2004-12-06T14:29:31Z,thomas@tada.se,86,68,18,*** empty log message ***
,src/C/pljava/PgObject.c,074f5c0c91abe35ed2b03583135a5ec7ecffa40b,thallgren,2004-12-04T09:16:51Z,thomas@tada.se,thallgren,2004-12-04T09:16:51Z,thomas@tada.se,2,2,0,*** empty log message ***
,src/C/pljava/Backend.c,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/C/pljava/Function.c,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/C/pljava/PgObject.c,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Parameters.java,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,ddb8c6c42a78987081e34893300988162dfe3b9d,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,thallgren,2004-12-03T23:58:26Z,thomas@tada.se,78,56,22,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,3e12331cdf40f3aac4220cedc6433f7cec33e679,thallgren,2004-12-02T18:49:21Z,thomas@tada.se,thallgren,2004-12-02T18:49:21Z,thomas@tada.se,16,9,7,*** empty log message ***
,src/C/pljava/type/ValueSetProvider.c,3e12331cdf40f3aac4220cedc6433f7cec33e679,thallgren,2004-12-02T18:49:21Z,thomas@tada.se,thallgren,2004-12-02T18:49:21Z,thomas@tada.se,16,9,7,*** empty log message ***
,src/C/include/pljava/SPI.h,264c017aadb36939204373a207921c1328ae6cbf,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,34,32,2,*** empty log message ***
,src/C/pljava/Exception.c,264c017aadb36939204373a207921c1328ae6cbf,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,34,32,2,*** empty log message ***
,src/C/pljava/SPI.c,264c017aadb36939204373a207921c1328ae6cbf,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,34,32,2,*** empty log message ***
,src/C/pljava/type/Savepoint.c,264c017aadb36939204373a207921c1328ae6cbf,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,thallgren,2004-12-02T17:04:45Z,thomas@tada.se,34,32,2,*** empty log message ***
,src/C/include/pljava/Exception.h,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/include/pljava/SPI.h,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/Exception.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/SPI.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/type/Relation.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/type/Savepoint.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/type/Type.c,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/Savepoint.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIAnonymousSavepoint.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPINamedSavepoint.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPISavepoint.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Environment.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,7691f0b7da2e9d4f21fc4c356b24ccbe36804d0d,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,thallgren,2004-12-02T00:27:12Z,thomas@tada.se,604,439,165,*** empty log message ***
,src/C/pljava/MemoryContext.c,4bd60b3380079a82236bcdf89ae73d367124c93b,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,11,8,3,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,4bd60b3380079a82236bcdf89ae73d367124c93b,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,11,8,3,*** empty log message ***
,src/C/pljava/type/ValueSetProvider.c,4bd60b3380079a82236bcdf89ae73d367124c93b,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,thallgren,2004-12-01T17:19:17Z,thomas@tada.se,11,8,3,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Triggers.java,6a8e449273d45df1637c2c3a51d6ba175dd0f249,thallgren,2004-12-01T15:54:51Z,thomas@tada.se,thallgren,2004-12-01T15:54:51Z,thomas@tada.se,76,21,55,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,6a8e449273d45df1637c2c3a51d6ba175dd0f249,thallgren,2004-12-01T15:54:51Z,thomas@tada.se,thallgren,2004-12-01T15:54:51Z,thomas@tada.se,76,21,55,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,b7e8353e3b606357cab1b1867694cae574ad9ac6,thallgren,2004-12-01T15:46:24Z,thomas@tada.se,thallgren,2004-12-01T15:46:24Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,6a65b3c5e9c954f8ffb63d7496d4ff0e88df6a01,thallgren,2004-12-01T15:41:38Z,thomas@tada.se,thallgren,2004-12-01T15:41:38Z,thomas@tada.se,9,6,3,*** empty log message ***
,src/C/include/pljava/Backend.h,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/include/pljava/MemoryContext.h,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/Backend.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/Iterator.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/MemoryContext.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/SPI.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/ErrorData.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/HeapTupleHeader.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/LargeObject.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/Portal.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/Relation.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/TriggerData.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/Tuple.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/TupleTable.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,d1032c45a37f2fb8876ea13cf96596ef121ae34d,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,thallgren,2004-12-01T15:30:51Z,thomas@tada.se,323,167,156,*** empty log message ***
,src/C/pljava/Function.c,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/C/pljava/type/Type.c,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/C/pljava/type/ValueSetProvider.c,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/UsingPropertiesAsScalarSet.java,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,455bbbf2188163108414e1ffb38d63c088a37604,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,thallgren,2004-12-01T12:33:40Z,thomas@tada.se,325,311,14,*** empty log message ***
,src/C/pljava/Backend.c,1c1bbe3e550f0a090bcd3c7d252298b1a860b29a,thallgren,2004-11-30T19:35:16Z,thomas@tada.se,thallgren,2004-11-30T19:35:16Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/Backend.c,f506ca4110b89cbf0b1f10a53daebadeca3127d4,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,97,89,8,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,f506ca4110b89cbf0b1f10a53daebadeca3127d4,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,97,89,8,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,f506ca4110b89cbf0b1f10a53daebadeca3127d4,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,97,89,8,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPISavepoint.java,f506ca4110b89cbf0b1f10a53daebadeca3127d4,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,thallgren,2004-11-30T19:26:03Z,thomas@tada.se,97,89,8,*** empty log message ***
,src/C/pljava/type/LargeObject.c,f723988f0f147f313102e69bbecf9a4a4a933ec4,thallgren,2004-11-30T15:45:08Z,thomas@tada.se,thallgren,2004-11-30T15:45:08Z,thomas@tada.se,100,85,15,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,f723988f0f147f313102e69bbecf9a4a4a933ec4,thallgren,2004-11-30T15:45:08Z,thomas@tada.se,thallgren,2004-11-30T15:45:08Z,thomas@tada.se,100,85,15,*** empty log message ***
,src/C/include/pljava/type/LargeObject.h,bc154e253df963ebacbb9b260050642fb7bf0667,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,558,558,0,Added support for LargeObjects
,src/C/pljava/type/LargeObject.c,bc154e253df963ebacbb9b260050642fb7bf0667,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,558,558,0,Added support for LargeObjects
,src/java/pljava/org/postgresql/pljava/internal/LargeObject.java,bc154e253df963ebacbb9b260050642fb7bf0667,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,thallgren,2004-11-27T23:08:54Z,thomas@tada.se,558,558,0,Added support for LargeObjects
,src/C/pljava/Backend.c,1a623108ef3f253df0fdeda40f93f8299c5bfcf7,thallgren,2004-11-25T21:52:26Z,thomas@tada.se,thallgren,2004-11-25T21:52:26Z,thomas@tada.se,204,97,107,*** empty log message ***
,src/C/include/pljava/Backend.h,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/include/pljava/MemoryContext.h,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/include/pljava/pljava.h,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/Backend.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/Exception.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/Function.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/MemoryContext.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/type/Double.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/type/Long.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/type/Type.c,0caff863543cdf1a638bb2198b7b574957ff72f9,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,thallgren,2004-11-25T19:59:14Z,thomas@tada.se,106,66,40,*** empty log message ***
,src/C/pljava/Backend.c,d9e97a4030b0f3ed1b300ff73de1ec671e94e261,thallgren,2004-11-25T19:06:44Z,thomas@tada.se,thallgren,2004-11-25T19:06:44Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,9fa18f41cac26d7ecea0f1ff2018e746ee16a46d,thallgren,2004-11-25T18:23:21Z,thomas@tada.se,thallgren,2004-11-25T18:23:21Z,thomas@tada.se,67,26,41,*** empty log message ***
,src/C/pljava/Backend.c,aebcc9bf3c8c1517562a17f60d7e0d9d1ae697e6,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,75,63,12,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,aebcc9bf3c8c1517562a17f60d7e0d9d1ae697e6,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,75,63,12,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,aebcc9bf3c8c1517562a17f60d7e0d9d1ae697e6,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,75,63,12,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,aebcc9bf3c8c1517562a17f60d7e0d9d1ae697e6,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,thallgren,2004-11-25T13:10:47Z,thomas@tada.se,75,63,12,*** empty log message ***
,.cdtproject,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/include/pljava/Backend.h,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/include/pljava/Function.h,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/include/pljava/MemoryContext.h,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/include/pljava/SPI.h,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/include/pljava/pljava.h,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/Backend.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/Exception.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/Function.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/MemoryContext.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/SPI.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/Invocation.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIAnonymousSavepoint.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDriver.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPINamedSavepoint.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPISavepoint.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,f2d354c168402b1088c1444f602624239cd669ef,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,thallgren,2004-11-23T23:19:03Z,thomas@tada.se,703,558,145,*** empty log message ***
,docs/readme.html,46f9967c3129352f463f519a3b545914b01e3d80,thallgren,2004-11-15T12:02:12Z,thomas@tada.se,thallgren,2004-11-15T12:02:12Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/Backend.c,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/C/pljava/type/ResultSetProvider.c,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/examples/org/postgresql/pljava/example/Parameters.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/examples/org/postgresql/pljava/example/UsingProperties.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/pljava/org/postgresql/pljava/internal/ELogHandler.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/pljava/org/postgresql/pljava/internal/LoggerConfigurator.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/pljava/org/postgresql/pljava/sqlj/EntryStreamHandler.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/java/test/org/postgresql/pljava/test/Tester.java,88e4c283328b5890bad649b491d670e46d0f689e,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,thallgren,2004-11-12T15:58:10Z,thomas@tada.se,502,394,108,Added class resource handling and example of use.
,src/C/pljava/Function.c,37d6e4ab1a570858cee9abae56e3e44e28ae68db,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,96,61,35,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Parameters.java,37d6e4ab1a570858cee9abae56e3e44e28ae68db,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,96,61,35,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,37d6e4ab1a570858cee9abae56e3e44e28ae68db,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,thallgren,2004-11-12T08:20:09Z,thomas@tada.se,96,61,35,*** empty log message ***
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,f9e55cd223d7abedbc9e6374a042bee765ff4eed,thallgren,2004-10-31T09:21:23Z,thomas@tada.se,thallgren,2004-10-31T09:21:23Z,thomas@tada.se,30,19,11,*** empty log message ***
,src/C/include/pljava/Function.h,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/C/pljava/Backend.c,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/C/pljava/Function.c,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,b084d51ac8b663b3d24d4245447fdf169c269822,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,thallgren,2004-10-30T21:12:46Z,thomas@tada.se,81,71,10,*** empty log message ***
,src/C/pljava/Backend.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/EOXactListener.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/Exception.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/Function.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/MemoryContext.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/type/ExecutionPlan.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/type/NativeStruct.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/pljava/type/Timestamp.c,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,a9f3489900ba3571b91af99e8e779ba6f6878f8f,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,thallgren,2004-10-30T11:18:18Z,thomas@tada.se,44,23,21,Changes needed between PostgreSQL 8.0.0beta2 and beta3.
,src/C/include/pljava/type/ExecutionPlan.h,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/C/pljava/Backend.c,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,62c8defc80141af4363a32b87a780e11dd952701,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,thallgren,2004-09-28T04:31:38Z,thomas@tada.se,392,118,274,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,d8f9b29a8c7efa96ddc395bc2edd39debb422d55,thallgren,2004-09-27T21:16:19Z,thomas@tada.se,thallgren,2004-09-27T21:16:19Z,thomas@tada.se,121,100,21,Added caching of plans
,src/C/include/pljava/type/ExecutionPlan.h,50361ab78da3d07a54cf19a997b86d111fef783a,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,53,33,20,*** empty log message ***
,src/C/pljava/Backend.c,50361ab78da3d07a54cf19a997b86d111fef783a,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,53,33,20,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,50361ab78da3d07a54cf19a997b86d111fef783a,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,53,33,20,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,50361ab78da3d07a54cf19a997b86d111fef783a,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,thallgren,2004-09-24T13:15:33Z,thomas@tada.se,53,33,20,*** empty log message ***
,docs/readme.html,d2b0b20b0c467270bad5ac95f49c52ba37ce221a,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,22,13,9,*** empty log message ***
,docs/userguide.html,d2b0b20b0c467270bad5ac95f49c52ba37ce221a,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,22,13,9,*** empty log message ***
,src/C/pljava/SPI.c,d2b0b20b0c467270bad5ac95f49c52ba37ce221a,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,22,13,9,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,d2b0b20b0c467270bad5ac95f49c52ba37ce221a,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,thallgren,2004-09-24T10:20:23Z,thomas@tada.se,22,13,9,*** empty log message ***
,src/C/include/pljava/MemoryContext.h,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/C/pljava/Backend.c,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/C/pljava/MemoryContext.c,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,851e94244d2114dde6e46696126381d062ea4ca6,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,thallgren,2004-09-23T21:47:44Z,thomas@tada.se,146,89,57,*** empty log message ***
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,f0b8b4fc27f73de6ac15271e51721bbc2632a41e,thallgren,2004-09-23T09:07:23Z,thomas@tada.se,thallgren,2004-09-23T09:07:23Z,thomas@tada.se,20,10,10,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/Tester.java,f0b8b4fc27f73de6ac15271e51721bbc2632a41e,thallgren,2004-09-23T09:07:23Z,thomas@tada.se,thallgren,2004-09-23T09:07:23Z,thomas@tada.se,20,10,10,*** empty log message ***
,.cdtproject,ef5983303bd8b1f08e40dfdb894de4f2433c84cb,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,129,66,63,*** empty log message ***
,docs/readme.html,ef5983303bd8b1f08e40dfdb894de4f2433c84cb,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,129,66,63,*** empty log message ***
,docs/readme.html,7b30a45a49252caa4a82bb8dd5ef539d212e3695,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,thallgren,2004-09-22T10:55:48Z,thomas@tada.se,46,35,11,*** empty log message ***
,src/C/include/pljava/Backend.h,579b318de8a3feb7248c172d4a475690f1109bbe,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,20,14,6,*** empty log message ***
,src/C/include/pljava/PgObject.h,579b318de8a3feb7248c172d4a475690f1109bbe,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,20,14,6,*** empty log message ***
,src/C/pljava/Backend.c,579b318de8a3feb7248c172d4a475690f1109bbe,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,20,14,6,*** empty log message ***
,src/C/pljava/PgObject.c,579b318de8a3feb7248c172d4a475690f1109bbe,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,thallgren,2004-09-22T06:46:27Z,thomas@tada.se,20,14,6,*** empty log message ***
,fixes/gcj/java_sql_Types.h,68e38a65ed52315b728ed2de9f6294a634f6443b,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,133,112,21,Fixed some gcjh compiler problems
,src/C/pljava/Backend.c,68e38a65ed52315b728ed2de9f6294a634f6443b,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,133,112,21,Fixed some gcjh compiler problems
,src/C/pljava/HashMap.c,68e38a65ed52315b728ed2de9f6294a634f6443b,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,133,112,21,Fixed some gcjh compiler problems
,src/C/pljava/type/Timestamp.c,68e38a65ed52315b728ed2de9f6294a634f6443b,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,thallgren,2004-09-20T23:19:13Z,thomas@tada.se,133,112,21,Fixed some gcjh compiler problems
,docs/userguide.html,5c117607e2fc29b220f3420efdeec6641c5993a5,thallgren,2004-09-20T17:47:10Z,thomas@tada.se,thallgren,2004-09-20T17:47:10Z,thomas@tada.se,2978,505,2473,Removed word formatting
,.classpath,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/C/include/pljava/MemoryContext.h,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/C/include/pljava/type/NativeStruct.h,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/C/pljava/Backend.c,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/C/pljava/MemoryContext.c,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/C/pljava/type/NativeStruct.c,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/java/examples/org/postgresql/pljava/example/Triggers.java,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/java/test/org/postgresql/pljava/test/Tester.java,854f0e9f069dbd957c61d87a99a8ae8e8bdecb50,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,thallgren,2004-09-20T13:56:17Z,thomas@tada.se,262,205,57,Fixed bug occuring sporadically on re-entry.
,src/java/examples/org/postgresql/pljava/example/Triggers.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/TriggerException.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ELogHandler.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/LoggerConfigurator.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/SPIException.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/ServerException.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/TransactionEvent.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/internal/TransactionalMap.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/StatementClosedException.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,1e33d1a73d766916d87b9231a6840884dd25118e,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,thallgren,2004-09-13T17:20:46Z,thomas@tada.se,113,70,43,*** empty log message ***
,src/java/examples/org/postgresql/pljava/example/Triggers.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/Session.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/SessionManager.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/internal/Session.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/internal/TransactionEvent.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/internal/TransactionListener.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,src/java/pljava/org/postgresql/pljava/internal/TransactionalMap.java,71911b2afc813ebd4c0093b922a5df9947d19957,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,thallgren,2004-09-01T21:55:40Z,thomas@tada.se,277,174,103,Better interface/implementation separation.
,docs/readme.html,d426c834636d369bde5782932c840946a3de22b6,thallgren,2004-08-21T10:54:16Z,thomas@tada.se,thallgren,2004-08-21T10:54:16Z,thomas@tada.se,879,189,690,*** empty log message ***
,docs/solutions.html,d426c834636d369bde5782932c840946a3de22b6,thallgren,2004-08-21T10:54:16Z,thomas@tada.se,thallgren,2004-08-21T10:54:16Z,thomas@tada.se,879,189,690,*** empty log message ***
,.classpath,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/EOXactListener.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/test/org/postgresql/pljava/test/CommandReader.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/test/org/postgresql/pljava/test/Environment.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/test/org/postgresql/pljava/test/Path.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/test/org/postgresql/pljava/test/TestPLJava.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,src/java/test/org/postgresql/pljava/test/Tester.java,a6dbb1262d4591c032b066f9b3ddbb4a9fdf6933,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,thallgren,2004-08-17T10:27:57Z,thomas@tada.se,42,30,12,Build structure changes
,.classpath,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/deploy/org/postgresql/pljava/deploy/Deployer.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/examples/org/postgresql/pljava/example/ComplexReturn.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/examples/org/postgresql/pljava/example/Parameters.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/examples/org/postgresql/pljava/example/SPIActions.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/examples/org/postgresql/pljava/example/Threads.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,src/java/examples/org/postgresql/pljava/example/Triggers.java,12e1035f7372e8c3e4db4b7c590b9441ee2bd4fc,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,thallgren,2004-08-17T08:57:17Z,thomas@tada.se,5,2,3,Build structure changes
,.classpath,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,.cvsignore,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/ResultSetProvider.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/Session.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/TransactionEvent.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/TransactionListener.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/TransactionalMap.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/TriggerData.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/TriggerException.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/AclId.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/Backend.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/ELogFormatter.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/ELogHandler.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/EOXactListener.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/ErrorData.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/ExecutionPlan.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/HeapTupleHeader.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/LoggerConfigurator.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/NativeStruct.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/Oid.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/Portal.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/Relation.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/SPI.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/SPIException.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/SPITupleTable.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/ServerException.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/TriggerData.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/Tuple.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/TupleDesc.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/TupleTable.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/internal/TupleTableSlot.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/AbstractResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/BlobValue.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/ClobValue.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/ObjectResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIConnection.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIDriver.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SPIStatement.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowReader.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SingleRowWriter.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/SingleTupleReader.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/StatementClosedException.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/TriggerResultSet.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/management/Commands.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/java/pljava/org/postgresql/pljava/sqlj/Loader.java,80689e5385d4465daccdcc0c50f357af40121978,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,thallgren,2004-08-17T08:51:01Z,thomas@tada.se,4,3,1,Build structure changes
,src/C/pljava/Backend.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/SPI.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/AclId.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/ErrorData.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/ExecutionPlan.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/HeapTupleHeader.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/NativeStruct.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/Oid.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/Portal.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/Relation.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/SPITupleTable.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/TriggerData.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/Tuple.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/TupleDesc.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/TupleTable.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/type/TupleTableSlot.c,81ae5acf4f937f5be2ce8af3fe882e6c641ef7a8,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,thallgren,2004-08-17T08:27:40Z,thomas@tada.se,46,20,26,Build structure changes
,src/C/pljava/Exception.c,a944ea4575e5bdf874385ec2ab091ced5f323ee8,thallgren,2004-08-16T22:08:08Z,thomas@tada.se,thallgren,2004-08-16T22:08:08Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/pljava/Backend.c,56edac6ca6928a9bc07ea64d9d81af754a8b70a1,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,98,37,61,Fix of bug 915 and 916
,src/C/pljava/Exception.c,56edac6ca6928a9bc07ea64d9d81af754a8b70a1,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,98,37,61,Fix of bug 915 and 916
,src/C/pljava/type/ErrorData.c,56edac6ca6928a9bc07ea64d9d81af754a8b70a1,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,thallgren,2004-08-16T19:34:06Z,thomas@tada.se,98,37,61,Fix of bug 915 and 916
,examples/java/org/postgresql/pljava/example/Triggers.java,7e0f3eeffd4d357717ad7c3b52c80a3878c60247,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,47,46,1,Fix bug #912
,src/C/pljava/Function.c,7e0f3eeffd4d357717ad7c3b52c80a3878c60247,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,47,46,1,Fix bug #912
,test/org/postgresql/pljava/test/Tester.java,7e0f3eeffd4d357717ad7c3b52c80a3878c60247,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,thallgren,2004-08-13T11:53:56Z,thomas@tada.se,47,46,1,Fix bug #912
,src/C/pljava/EOXactListener.c,c8d62a487d4f9a21e82f5b6b2bcd550f2a2f1b13,thallgren,2004-08-12T17:57:06Z,thomas@tada.se,thallgren,2004-08-12T17:57:06Z,thomas@tada.se,2,1,1,*** empty log message ***
,.cdtproject,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/include/pljava/Exception.h,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/include/pljava/pljava.h,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/include/pljava/type/ErrorData.h,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/Backend.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/EOXactListener.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/Exception.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/Function.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/SPI.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/AclId.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/ErrorData.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/ExecutionPlan.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/HeapTupleHeader.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/Portal.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/Relation.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/Tuple.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/C/pljava/type/TupleDesc.c,14e5a6b9ed598d0aeb1fefbcc6c4000b65c35af6,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,thallgren,2004-08-12T15:20:42Z,thomas@tada.se,582,451,131,7.4 compatibility
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,72ef52b745e531978c29c5394d5683829852a58e,thallgren,2004-08-11T12:01:34Z,thomas@tada.se,thallgren,2004-08-11T12:01:34Z,thomas@tada.se,24,18,6,Fix for bug #907 and #908
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,72ef52b745e531978c29c5394d5683829852a58e,thallgren,2004-08-11T12:01:34Z,thomas@tada.se,thallgren,2004-08-11T12:01:34Z,thomas@tada.se,24,18,6,Fix for bug #907 and #908
,src/C/include/pljava/MemoryContext.h,5874df21a3048b3200ee765dc0e68f971ce30b16,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,219,50,169,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,5874df21a3048b3200ee765dc0e68f971ce30b16,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,219,50,169,*** empty log message ***
,src/C/pljava/Backend.c,5874df21a3048b3200ee765dc0e68f971ce30b16,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,219,50,169,*** empty log message ***
,src/C/pljava/MemoryContext.c,5874df21a3048b3200ee765dc0e68f971ce30b16,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,219,50,169,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,5874df21a3048b3200ee765dc0e68f971ce30b16,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,thallgren,2004-08-10T21:12:09Z,thomas@tada.se,219,50,169,*** empty log message ***
,src/C/pljava/Backend.c,79203b6ab35be48826a20575340020a951c331cd,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,23,15,8,*** empty log message ***
,src/C/pljava/EOXactListener.c,79203b6ab35be48826a20575340020a951c331cd,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,23,15,8,*** empty log message ***
,src/C/pljava/Exception.c,79203b6ab35be48826a20575340020a951c331cd,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,23,15,8,*** empty log message ***
,src/C/pljava/type/ErrorData.c,79203b6ab35be48826a20575340020a951c331cd,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,thallgren,2004-08-10T18:24:39Z,thomas@tada.se,23,15,8,*** empty log message ***
,src/C/pljava/EOXactListener.c,8ede3180dbedcca59871fdb7fafaff8bc85896f6,thallgren,2004-08-08T23:24:07Z,thomas@tada.se,thallgren,2004-08-08T23:24:07Z,thomas@tada.se,8,3,5,Change of license text
,src/C/include/pljava/Exception.h,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/include/pljava/pljava.h,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/include/pljava/type/ErrorData.h,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/Backend.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/EOXactListener.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/Exception.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/Function.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/SPI.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/AclId.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/ErrorData.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/ExecutionPlan.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/HeapTupleHeader.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/Portal.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/Relation.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/Tuple.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/TupleDesc.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/C/pljava/type/Type.c,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/java/org/postgresql/pljava/internal/ErrorData.java,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/java/org/postgresql/pljava/internal/ServerException.java,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,src/java/org/postgresql/pljava/jdbc/StatementClosedException.java,43825970b0c70ac3a543da400c8a57c915657187,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,thallgren,2004-08-08T23:21:56Z,thomas@tada.se,982,779,203,try/catch changes
,.cdtproject,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,.classpath,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,examples/java/org/postgresql/pljava/example/ComplexReturn.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,examples/java/org/postgresql/pljava/example/Parameters.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,examples/java/org/postgresql/pljava/example/SPIActions.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,examples/java/org/postgresql/pljava/example/Threads.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,examples/java/org/postgresql/pljava/example/Triggers.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/Backend.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/EOXactListener.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/Exception.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/Function.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/HashMap.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/HashMap_priv.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/Iterator.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/MemoryContext.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/PgObject.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/PgObject_priv.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/SPI.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/pljava.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/ExecutionPlan.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/HeapTupleHeader.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/NativeStruct.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Oid.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Portal.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Relation.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/SPITupleTable.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/SingleRowWriter.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/String.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/String_priv.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Timestamp.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/TriggerData.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Tuple.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/TupleDesc.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/TupleTable.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/TupleTableSlot.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Type.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/include/pljava/type/Type_priv.h,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/Backend.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/Exception.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/Function.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/HashMap.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/Iterator.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/MemoryContext.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/PgObject.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/SPI.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/AclId.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/BigDecimal.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Boolean.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Byte.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Date.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Double.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/ExecutionPlan.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Float.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/HeapTupleHeader.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Integer.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Long.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/NativeStruct.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Oid.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Portal.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Relation.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/ResultSetProvider.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/SPITupleTable.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Short.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/SingleRowReader.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/SingleRowWriter.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/SingleTupleReader.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/String.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Time.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Timestamp.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/TriggerData.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Tuple.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/TupleDesc.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/TupleTable.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/TupleTableSlot.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Type.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/Void.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/C/pljava/type/byte_array.c,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/ResultSetProvider.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/Server.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/Session.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TransactionEvent.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TransactionListener.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TransactionalMap.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TriggerData.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TriggerException.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/AclId.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/Backend.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/ELogFormatter.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/ELogHandler.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/EOXactListener.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/HeapTupleHeader.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/LoggerConfigurator.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/NativeStruct.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/Oid.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/Portal.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/Relation.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/SPI.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/SPIException.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/SPITupleTable.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/TriggerData.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/Tuple.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/TupleDesc.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/TupleTable.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/internal/TupleTableSlot.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/BlobValue.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/ClobValue.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SingleRowReader.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/SingleTupleReader.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/StatementClosedException.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/management/Commands.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/sqlj/Loader.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,test/org/postgresql/pljava/test/CommandReader.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,test/org/postgresql/pljava/test/Environment.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,test/org/postgresql/pljava/test/Path.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,test/org/postgresql/pljava/test/TestPLJava.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,test/org/postgresql/pljava/test/Tester.java,2e7108a48972f2ab154133515217180d6edfbf02,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,thallgren,2004-07-30T21:56:07Z,thomas@tada.se,2090,1098,992,Change of license text
,src/java/org/postgresql/pljava/TransactionalMap.java,4638071979c633d98b443ee3b89d2116b2416df1,thallgren,2004-07-16T22:40:15Z,thomas@tada.se,thallgren,2004-07-16T22:40:15Z,thomas@tada.se,7,6,1,*** empty log message ***
,docs/jni_rationale.html,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Triggers.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/Server.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/Session.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/TransactionEvent.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/TransactionListener.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/TransactionalMap.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Backend.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,src/java/org/postgresql/pljava/internal/EOXactListener.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,test/org/postgresql/pljava/test/CommandReader.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,test/org/postgresql/pljava/test/Environment.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,test/org/postgresql/pljava/test/Path.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,test/org/postgresql/pljava/test/TestPLJava.java,7d9eed3b0de8a2069561a9d50e4428236f6b4d1d,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,thallgren,2004-07-04T19:56:15Z,thomas@tada.se,1362,1309,53,*** empty log message ***
,.cdtproject,b7323eaed1e3b344e9a2f9589c8763b45f17fc97,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,161,74,87,GCJ improvements
,src/C/pljava/Backend.c,b7323eaed1e3b344e9a2f9589c8763b45f17fc97,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,161,74,87,GCJ improvements
,src/C/pljava/PgObject.c,b7323eaed1e3b344e9a2f9589c8763b45f17fc97,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,thallgren,2004-06-10T07:22:49Z,thomas@tada.se,161,74,87,GCJ improvements
,.cdtproject,5a7f32cf763947675ede46708783ebe27008291a,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,232,164,68,*** empty log message ***
,src/C/pljava/PgObject.c,5a7f32cf763947675ede46708783ebe27008291a,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,232,164,68,*** empty log message ***
,src/java/org/postgresql/pljava/sqlj/Loader.java,5a7f32cf763947675ede46708783ebe27008291a,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,thallgren,2004-06-09T21:10:44Z,thomas@tada.se,232,164,68,*** empty log message ***
,src/C/include/pljava/SPI.h,fa8fa984340dae35dd96f489674c4bb81b446a9f,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,71,59,12,*** empty log message ***
,src/C/pljava/Backend.c,fa8fa984340dae35dd96f489674c4bb81b446a9f,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,71,59,12,*** empty log message ***
,src/C/pljava/SPI.c,fa8fa984340dae35dd96f489674c4bb81b446a9f,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,71,59,12,*** empty log message ***
,src/C/pljava/type/HeapTupleHeader.c,fa8fa984340dae35dd96f489674c4bb81b446a9f,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,71,59,12,*** empty log message ***
,src/C/pljava/type/SingleTupleReader.c,fa8fa984340dae35dd96f489674c4bb81b446a9f,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,thallgren,2004-05-27T21:37:26Z,thomas@tada.se,71,59,12,*** empty log message ***
,src/C/pljava/Function.c,518d5d1b2edaceee19dcc211390107d2c61b280e,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,75,74,1,*** empty log message ***
,src/C/pljava/type/SingleTupleReader.c,518d5d1b2edaceee19dcc211390107d2c61b280e,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,75,74,1,*** empty log message ***
,src/C/pljava/type/Type.c,518d5d1b2edaceee19dcc211390107d2c61b280e,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,thallgren,2004-05-27T20:45:23Z,thomas@tada.se,75,74,1,*** empty log message ***
,src/C/pljava/type/HeapTupleHeader.c,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/internal/HeapTupleHeader.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowReader.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleTupleReader.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,975f9752b907c20d807c28ab553c05c84922a05f,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,thallgren,2004-05-27T14:49:40Z,thomas@tada.se,247,201,46,*** empty log message ***
,.cdtproject,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/C/include/pljava/type/HeapTupleHeader.h,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/C/pljava/Backend.c,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/C/pljava/Function.c,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/C/pljava/type/NativeStruct.c,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/java/org/postgresql/pljava/internal/HeapTupleHeader.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/java/org/postgresql/pljava/jdbc/SingleRowReader.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,src/java/org/postgresql/pljava/jdbc/SingleTupleReader.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,test/org/postgresql/pljava/test/Tester.java,8567c724d747f4add1d2c14531038233d1f9fdca,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,thallgren,2004-05-27T06:29:03Z,thomas@tada.se,374,341,33,HeapTupleHeader needed for complex types in 7.5
,.cdtproject,45f9549f8c6def9b6dcf0d7795129f3a99b3c025,thallgren,2004-05-26T06:19:49Z,thomas@tada.se,thallgren,2004-05-26T06:19:49Z,thomas@tada.se,71,70,1,Experimental test target
,src/C/include/pljava/SPI.h,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/Backend.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/SPI.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/AclId.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/ExecutionPlan.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/NativeStruct.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/Oid.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/Portal.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/Relation.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/SPITupleTable.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/Timestamp.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/TriggerData.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/Tuple.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/TupleDesc.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/TupleTable.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/C/pljava/type/TupleTableSlot.c,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,src/java/org/postgresql/pljava/internal/Oid.java,e754f27f253126f74e1cef4198c8f9465aef0205,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,thallgren,2004-05-25T06:17:38Z,thomas@tada.se,521,401,120,Improved JNI linking. No loadLibrary necessary now.
,.cdtproject,5d9cfa2ee17586b748016a57a586255f11cb0bea,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,31,25,6,Added version logic to makefile system
,src/C/pljava/SPI.c,5d9cfa2ee17586b748016a57a586255f11cb0bea,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,31,25,6,Added version logic to makefile system
,src/C/pljava/type/SingleRowWriter.c,5d9cfa2ee17586b748016a57a586255f11cb0bea,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,thallgren,2004-05-24T17:23:00Z,thomas@tada.se,31,25,6,Added version logic to makefile system
,src/C/include/pljava/PgObject.h,5cb2598d35bab28f098c2a51cbe6299f964fe13e,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,57,56,1,Static linkage support
,src/C/pljava/Backend.c,5cb2598d35bab28f098c2a51cbe6299f964fe13e,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,57,56,1,Static linkage support
,src/C/pljava/Exception.c,5cb2598d35bab28f098c2a51cbe6299f964fe13e,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,57,56,1,Static linkage support
,src/C/pljava/PgObject.c,5cb2598d35bab28f098c2a51cbe6299f964fe13e,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,thallgren,2004-05-24T14:27:29Z,thomas@tada.se,57,56,1,Static linkage support
,src/C/pljava/Backend.c,81c7d75aa49aae7b8907b9b39a053afac4d7d894,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,35,23,12,Fixes to some problems reported by Filip Hrbek
,src/C/pljava/Function.c,81c7d75aa49aae7b8907b9b39a053afac4d7d894,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,35,23,12,Fixes to some problems reported by Filip Hrbek
,src/java/org/postgresql/pljava/internal/TupleDesc.java,81c7d75aa49aae7b8907b9b39a053afac4d7d894,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,35,23,12,Fixes to some problems reported by Filip Hrbek
,src/java/org/postgresql/pljava/sqlj/Loader.java,81c7d75aa49aae7b8907b9b39a053afac4d7d894,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,thallgren,2004-05-05T22:25:04Z,thomas@tada.se,35,23,12,Fixes to some problems reported by Filip Hrbek
,.cdtproject,73e836f60c41bd4ac5580dffdda98ade4560713b,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,93,62,31,Makefile improvements
,src/C/pljava/Function.c,73e836f60c41bd4ac5580dffdda98ade4560713b,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,93,62,31,Makefile improvements
,src/java/org/postgresql/pljava/internal/Oid.java,73e836f60c41bd4ac5580dffdda98ade4560713b,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,thallgren,2004-05-05T19:06:47Z,thomas@tada.se,93,62,31,Makefile improvements
,.cdtproject,380a6e5b153c9ba803cde1076d434e05256bb104,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,518,257,261,*** empty log message ***
,docs/userguide.html,380a6e5b153c9ba803cde1076d434e05256bb104,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,518,257,261,*** empty log message ***
,src/C/pljava/Backend.c,380a6e5b153c9ba803cde1076d434e05256bb104,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,518,257,261,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,380a6e5b153c9ba803cde1076d434e05256bb104,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,thallgren,2004-05-04T21:48:10Z,thomas@tada.se,518,257,261,*** empty log message ***
,src/C/pljava/Backend.c,9a2e03b1212f2470698bf8daacdc4a797155a4a5,thallgren,2004-04-29T20:49:22Z,thomas@tada.se,thallgren,2004-04-29T20:49:22Z,thomas@tada.se,41,26,15,*** empty log message ***
,src/C/pljava/Backend.c,0a5bbf3921125dfacfb754911bc4f72974cd953a,thallgren,2004-04-27T17:14:58Z,thomas@tada.se,thallgren,2004-04-27T17:14:58Z,thomas@tada.se,23,19,4,*** empty log message ***
,.cdtproject,52dea5b84b47ff1c51ef7c2840ab72e695397fb4,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,442,273,169,*** empty log message ***
,src/C/pljava/Backend.c,52dea5b84b47ff1c51ef7c2840ab72e695397fb4,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,442,273,169,*** empty log message ***
,src/C/pljava/Function.c,52dea5b84b47ff1c51ef7c2840ab72e695397fb4,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,thallgren,2004-04-25T20:49:59Z,thomas@tada.se,442,273,169,*** empty log message ***
,src/C/pljava/Function.c,d275bcac6ab3ee7c861094c0f64e08b23af55c88,thallgren,2004-03-24T23:41:04Z,thomas@tada.se,thallgren,2004-03-24T23:41:04Z,thomas@tada.se,37,13,24,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,d275bcac6ab3ee7c861094c0f64e08b23af55c88,thallgren,2004-03-24T23:41:04Z,thomas@tada.se,thallgren,2004-03-24T23:41:04Z,thomas@tada.se,37,13,24,*** empty log message ***
,src/C/pljava/PgObject.c,c5362cedfda26ef7e26a90ffa81d3718c3e98978,thallgren,2004-03-15T20:14:43Z,thomas@tada.se,thallgren,2004-03-15T20:14:43Z,thomas@tada.se,55,46,9,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,c5362cedfda26ef7e26a90ffa81d3718c3e98978,thallgren,2004-03-15T20:14:43Z,thomas@tada.se,thallgren,2004-03-15T20:14:43Z,thomas@tada.se,55,46,9,*** empty log message ***
,src/C/pljava/Function.c,dbc1e021353f44a1fd2c4ee1c697727e23a53d31,thallgren,2004-03-15T19:00:02Z,thomas@tada.se,thallgren,2004-03-15T19:00:02Z,thomas@tada.se,19,16,3,*** empty log message ***
,src/C/include/pljava/PgObject_priv.h,5d2d2124a03d6f86f915d32719169add3a239c5e,thallgren,2004-03-15T18:50:50Z,thomas@tada.se,thallgren,2004-03-15T18:50:50Z,thomas@tada.se,19,13,6,*** empty log message ***
,src/C/pljava/Backend.c,5d2d2124a03d6f86f915d32719169add3a239c5e,thallgren,2004-03-15T18:50:50Z,thomas@tada.se,thallgren,2004-03-15T18:50:50Z,thomas@tada.se,19,13,6,*** empty log message ***
,.cvsignore,9ebc82e733b872dc054168dafaad82d1863cf6d6,thallgren,2004-02-08T23:00:47Z,thomas@tada.se,thallgren,2004-02-08T23:00:47Z,thomas@tada.se,1,1,0,*** empty log message ***
,.cvsignore,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,docs/.cvsignore,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,docs/jni_rationale.html,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,docs/readme.html,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,docs/solutions.html,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,docs/userguide.html,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/BlobValue.java,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ClobValue.java,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,6ad53e618724accee6e28e05350af47c2caddceb,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,thallgren,2004-02-07T22:57:40Z,thomas@tada.se,217,196,21,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,src/C/pljava/Backend.c,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,src/java/org/postgresql/pljava/management/SQLDeploymentDescriptor.java,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,userguide.html,94e23ba02b55e8008a935fcf3e397db0adb4671b,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,thallgren,2004-02-07T14:31:20Z,thomas@tada.se,3436,2057,1379,*** empty log message ***
,src/C/pljava/Backend.c,3894ca6ffebf0b43e623a3e40ce1d34483b2ffaa,thallgren,2004-02-05T23:36:06Z,thomas@tada.se,thallgren,2004-02-05T23:36:06Z,thomas@tada.se,71,69,2,Added better signal handling
,examples/java/org/postgresql/pljava/example/Threads.java,7eb12e190b668debd1064949255ec761b917952b,thallgren,2004-02-05T18:19:41Z,thomas@tada.se,thallgren,2004-02-05T18:19:41Z,thomas@tada.se,87,85,2,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,7eb12e190b668debd1064949255ec761b917952b,thallgren,2004-02-05T18:19:41Z,thomas@tada.se,thallgren,2004-02-05T18:19:41Z,thomas@tada.se,87,85,2,*** empty log message ***
,src/C/pljava/Backend.c,e4491f4d78cf9ec46d8bba521644acc837b157d9,thallgren,2004-02-05T15:56:30Z,thomas@tada.se,thallgren,2004-02-05T15:56:30Z,thomas@tada.se,3,2,1,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,45d28fdedbe54df801bf73e4f9a140cc49b24d86,thallgren,2004-02-03T22:51:10Z,thomas@tada.se,thallgren,2004-02-03T22:51:10Z,thomas@tada.se,67,61,6,Added -port option
,test/org/postgresql/pljava/test/Tester.java,45d28fdedbe54df801bf73e4f9a140cc49b24d86,thallgren,2004-02-03T22:51:10Z,thomas@tada.se,thallgren,2004-02-03T22:51:10Z,thomas@tada.se,67,61,6,Added -port option
,src/C/include/pljava/pljava.h,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/Backend.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/Exception.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/Function.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/HashMap.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/PgObject.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/SPI.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/AclId.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/BigDecimal.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Boolean.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Byte.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Double.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/ExecutionPlan.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Float.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Integer.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Long.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/NativeStruct.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Oid.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Portal.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Relation.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/ResultSetProvider.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/SPITupleTable.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Short.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/SingleRowWriter.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/String.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Time.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Timestamp.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/TriggerData.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Tuple.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/TupleDesc.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/TupleTable.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/TupleTableSlot.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/Type.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/pljava/type/byte_array.c,79fdc7f0b4af6f38f8e0ae4ade79615bee2c84f2,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,thallgren,2004-02-03T22:16:53Z,thomas@tada.se,673,420,253,Changed all places where code and declartions where mixed
,src/C/include/pljava/pljava.h,23eab25e35a02203041af8e58fd3a1006a1d00ed,thallgren,2004-02-03T07:04:33Z,thomas@tada.se,thallgren,2004-02-03T07:04:33Z,thomas@tada.se,4,2,2,Named an anonymous struct in the Ptr2Long union
,src/C/pljava/HashMap.c,23eab25e35a02203041af8e58fd3a1006a1d00ed,thallgren,2004-02-03T07:04:33Z,thomas@tada.se,thallgren,2004-02-03T07:04:33Z,thomas@tada.se,4,2,2,Named an anonymous struct in the Ptr2Long union
,jni_rationale.html,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,readme.html,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/SPI_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/AclId_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/Portal_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/Relation_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/SPITupleTable_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/TriggerData_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/TupleDesc_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/TupleTableSlot_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/TupleTable_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,src/C/include/pljava/type/Tuple_JNI.h,c9204602e3b5b05e1b0a26206ecc1c517fcc7de7,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,thallgren,2004-01-30T19:56:36Z,thomas@tada.se,1643,132,1511,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,examples/java/org/postgresql/pljava/example/ComplexReturn.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Parameters.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Triggers.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,jni_rationale.html,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/Exception.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/Function.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/HashMap.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/HashMap_priv.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/Iterator.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/PgObject.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/PgObject_priv.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/SPI.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/pljava.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/ExecutionPlan.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Oid.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Portal.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Relation.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/SPITupleTable.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/SingleRowWriter.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/String.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/String_priv.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Timestamp.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/TriggerData.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Tuple.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/TupleDesc.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/TupleTable.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/TupleTableSlot.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Type.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/include/pljava/type/Type_priv.h,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/Backend.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/Exception.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/Function.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/HashMap.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/Iterator.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/PgObject.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/SPI.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/AclId.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/BigDecimal.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Boolean.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Byte.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Date.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Double.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Float.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Integer.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Long.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Oid.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Portal.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Relation.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Short.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/SingleRowReader.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/String.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Time.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Timestamp.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/TriggerData.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Tuple.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/TupleTable.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Type.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/Void.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/type/byte_array.c,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/ResultSetProvider.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/Server.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/TriggerData.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/TriggerException.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/AclId.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Backend.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ELogFormatter.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ELogHandler.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/LoggerConfigurator.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/NativeStruct.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Portal.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Relation.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPI.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPIException.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPITupleTable.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TriggerData.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Tuple.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleDesc.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleTable.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleTableSlot.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/BlobValue.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ClobValue.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowReader.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/StatementClosedException.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/java/org/postgresql/pljava/sqlj/Loader.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,d6d2ebd40973bd0cb2083a4f6b8a596cc7bd1c59,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,thallgren,2004-01-29T19:21:24Z,thomas@tada.se,1269,832,437,*** empty log message ***
,src/C/pljava/SPI.c,7449a77840724a20b56a97a36bd4f7d2cc399070,thallgren,2004-01-27T19:30:32Z,thomas@tada.se,thallgren,2004-01-27T19:30:32Z,thomas@tada.se,22,20,2,*** empty log message ***
,readme.html,3dd95f86c27732ff0becb8352be4cc3d8647c19a,thallgren,2004-01-27T18:49:30Z,thomas@tada.se,thallgren,2004-01-27T18:49:30Z,thomas@tada.se,2472,2443,29,*** empty log message ***
,userguide.html,3dd95f86c27732ff0becb8352be4cc3d8647c19a,thallgren,2004-01-27T18:49:30Z,thomas@tada.se,thallgren,2004-01-27T18:49:30Z,thomas@tada.se,2472,2443,29,*** empty log message ***
,src/C/pljava/type/Double.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Float.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Integer.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Long.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Short.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Type.c,e2905c405da7d978e86b4821b3ce3ebd0f704c6c,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,99,32,67,*** empty log message ***
,src/C/pljava/type/Long.c,14ac117e397241d541fea216ec6a6b29fd9cd207,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,35,28,7,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,14ac117e397241d541fea216ec6a6b29fd9cd207,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,35,28,7,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,14ac117e397241d541fea216ec6a6b29fd9cd207,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,35,28,7,*** empty log message ***
,src/C/pljava/type/Type.c,14ac117e397241d541fea216ec6a6b29fd9cd207,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,35,28,7,*** empty log message ***
,src/C/include/pljava/SPI.h,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/Backend.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/Function.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/SPI.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/type/Boolean.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/type/Byte.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/pljava/type/Double.c,d68da0139c618bd8bd88d9cbfeeb035f728900d6,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,thallgren,2004-01-27T11:37:02Z,thomas@tada.se,194,186,8,*** empty log message ***
,src/C/include/pljava/type/TupleDesc.h,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,src/C/pljava/Function.c,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,22c691bfdbda0fbbc800da26c9e83cc7c4d39876,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,thallgren,2004-01-26T23:29:45Z,thomas@tada.se,47,35,12,*** empty log message ***
,examples/java/org/postgresql/pljava/example/ComplexReturn.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,readme.htm,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,solutions.html,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/include/pljava/type/SingleRowWriter.h,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/include/pljava/type/TupleDesc_JNI.h,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/include/pljava/type/Type.h,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/include/pljava/type/Type_priv.h,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/Backend.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/Function.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/AclId.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Boolean.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Byte.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Date.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Double.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Float.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Integer.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Long.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Oid.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Portal.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Relation.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/ResultSetProvider.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Short.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/SingleRowReader.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/SingleRowWriter.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/String.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Time.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Timestamp.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/TriggerData.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Tuple.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/TupleTable.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Type.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/Void.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/C/pljava/type/byte_array.c,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/ResultSetProvider.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleDesc.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowReader.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowResultSet.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SingleRowWriter.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,c01536cb19276bbd604522369a4594364915966e,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,thallgren,2004-01-26T16:52:56Z,thomas@tada.se,3536,2659,877,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,361d00dab101d8ce76d243853be6316a0acd87cc,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,35,26,9,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,361d00dab101d8ce76d243853be6316a0acd87cc,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,35,26,9,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,361d00dab101d8ce76d243853be6316a0acd87cc,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,thallgren,2004-01-22T13:53:25Z,thomas@tada.se,35,26,9,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,a5aca9e8a76c284905604cf07aab05fbbd0af16c,thallgren,2004-01-22T11:49:38Z,thomas@tada.se,thallgren,2004-01-22T11:49:38Z,thomas@tada.se,2,1,1,*** empty log message ***
,src/C/include/pljava/Exception.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/PgObject.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/SPI_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/pljava.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/AclId_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/Portal_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/Relation_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/SPITupleTable_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/TriggerData_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/TupleDesc_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/TupleTableSlot_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/TupleTable_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/include/pljava/type/Tuple_JNI.h,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/Backend.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/Exception.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/Function.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/PgObject.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/SPI.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/AclId.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/BigDecimal.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Boolean.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Byte.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Date.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Double.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/ExecutionPlan.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Float.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Integer.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Long.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/NativeStruct.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Oid.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Portal.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Relation.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/SPITupleTable.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Short.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/String.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Time.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Timestamp.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/TriggerData.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Tuple.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/TupleDesc.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/TupleTable.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/TupleTableSlot.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Type.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/C/pljava/type/Void.c,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/TriggerData.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/AclId.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/Backend.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/NativeStruct.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/Oid.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/Portal.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/Relation.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/SPI.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/SPITupleTable.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/TriggerData.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/Tuple.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/TupleDesc.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/TupleTable.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,src/java/org/postgresql/pljava/internal/TupleTableSlot.java,e738cc8a9a1e0c846b366599ac09e44d28de7c03,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,thallgren,2004-01-22T11:23:03Z,thomas@tada.se,1712,1185,527,General clean-up of threading and fence mechanisms.
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/C/pljava/Backend.c,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/C/pljava/Exception.c,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Backend.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ELogFormatter.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ELogHandler.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/internal/LoggerConfigurator.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,src/java/org/postgresql/pljava/sqlj/Loader.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,67eea979bcd4575f285c30c581fd0d674c13c1fa,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,thallgren,2004-01-21T13:17:58Z,thomas@tada.se,681,450,231,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Parameters.java,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,src/C/pljava/.cvsignore,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,src/C/pljava/Backend.c,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,src/java/org/postgresql/pljava/Logger.java,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ELogHandler.java,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,src/java/org/postgresql/pljava/internal/LoggerConfigurator.java,da8ab8285bdc023711a8fd2ba616ef0b35c79bbc,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,thallgren,2004-01-21T00:21:49Z,thomas@tada.se,280,183,97,*** empty log message ***
,.classpath,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,.cvsignore,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,deploy/java/org/postgresql/pljava/deploy/Deployer.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Triggers.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/include/pljava/Exception.h,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/include/pljava/SPI_JNI.h,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/include/pljava/pljava.h,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/Backend.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/Exception.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/Function.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/Iterator.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/PgObject.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/SPI.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/AclId.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/Oid.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/Portal.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/Relation.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/TriggerData.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/Tuple.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/TupleTable.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/C/pljava/type/byte_array.c,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/Logger.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/Server.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/TriggerData.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Backend.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPI.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPITupleTable.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleTable.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/management/Commands.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,src/java/org/postgresql/pljava/sqlj/Loader.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,5e4131738cd095b7ff6367d64f809f6cec6a7ba7,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,thallgren,2004-01-20T19:52:11Z,thomas@tada.se,1975,1626,349,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/include/pljava/SPI_JNI.h,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/include/pljava/pljava.h,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/SPI.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/Oid.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/Portal.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/TupleTable.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/pljava/type/Type.c,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/internal/NativeStruct.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Portal.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPI.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,9cf090e8757ca2e63eca04e15829fe64be36e823,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,thallgren,2004-01-17T23:53:25Z,thomas@tada.se,196,160,36,*** empty log message ***
,src/C/include/pljava/pljava.h,4bed5f83f60a0df51bcab6c81fffa914a2ba04fe,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,9,5,4,*** empty log message ***
,src/C/pljava/SPI.c,4bed5f83f60a0df51bcab6c81fffa914a2ba04fe,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,9,5,4,*** empty log message ***
,src/C/pljava/Server.c,4bed5f83f60a0df51bcab6c81fffa914a2ba04fe,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,9,5,4,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,4bed5f83f60a0df51bcab6c81fffa914a2ba04fe,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,9,5,4,*** empty log message ***
,src/C/pljava/type/TriggerData.c,4bed5f83f60a0df51bcab6c81fffa914a2ba04fe,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,9,5,4,*** empty log message ***
,src/C/pljava/Server.c,6eb21943877a9d95f096ab944ba02c3c1d8e0e5b,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,thallgren,2004-01-17T09:57:12Z,thomas@tada.se,3,0,3,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,examples/java/org/postgresql/pljava/example/Triggers.java,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/include/pljava/Exception.h,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/include/pljava/pljava.h,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/Exception.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/HashMap.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/SPI.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/Server.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/AclId.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/Oid.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/Portal.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/Relation.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/TriggerData.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/Tuple.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/TupleTable.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,src/java/org/postgresql/pljava/Server.java,d5110b025ab45466ac64b3a14848fca970939e8d,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,thallgren,2004-01-17T01:01:13Z,thomas@tada.se,347,236,111,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,src/C/include/pljava/.cvsignore,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,src/C/pljava/Server.c,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,src/C/pljava/type/Oid.c,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,src/java/org/postgresql/pljava/Server.java,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,6a594eacf5f0e4e672eae389c98a0737550ee122,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,thallgren,2004-01-16T17:33:46Z,thomas@tada.se,118,104,14,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,7aef47912c42803ef300daf6740244ce9b7788ba,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,94,78,16,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,7aef47912c42803ef300daf6740244ce9b7788ba,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,94,78,16,*** empty log message ***
,test/org/postgresql/pljava/test/Tester.java,7aef47912c42803ef300daf6740244ce9b7788ba,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,thallgren,2004-01-16T13:51:40Z,thomas@tada.se,94,78,16,*** empty log message ***
,examples/java/org/postgresql/pljava/example/SPIActions.java,1ddf848447a2e820a2db120de82100c2ef689836,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,175,174,1,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,1ddf848447a2e820a2db120de82100c2ef689836,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,175,174,1,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,1ddf848447a2e820a2db120de82100c2ef689836,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,175,174,1,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIDriver.java,1ddf848447a2e820a2db120de82100c2ef689836,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,thallgren,2004-01-16T12:25:37Z,thomas@tada.se,175,174,1,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/include/pljava/type/Oid.h,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/include/pljava/type/String.h,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/pljava/type/Oid.c,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/pljava/type/String.c,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIParameterMetaData.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,86793a2f4e9dbc17c1d8ab866cb2ec3861a6637d,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,thallgren,2004-01-16T10:53:51Z,thomas@tada.se,732,563,169,*** empty log message ***
,src/C/include/pljava/type/ExecutionPlan.h,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/C/pljava/type/Oid.c,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,d034827dba9947e68485351e3f891a6afa92aabf,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,thallgren,2004-01-15T19:52:28Z,thomas@tada.se,372,290,82,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,2f26c1a61f0f29a8f61753db5819780917aabaa3,thallgren,2004-01-15T15:24:28Z,thomas@tada.se,thallgren,2004-01-15T15:24:28Z,thomas@tada.se,111,56,55,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,d275d0a14daa591974a8892e31ba34253235787a,thallgren,2004-01-14T23:38:10Z,thomas@tada.se,thallgren,2004-01-14T23:38:10Z,thomas@tada.se,228,117,111,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,d275d0a14daa591974a8892e31ba34253235787a,thallgren,2004-01-14T23:38:10Z,thomas@tada.se,thallgren,2004-01-14T23:38:10Z,thomas@tada.se,228,117,111,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIPreparedStatement.java,2682e8d90c2e8f7dd8c4288f9e9e4093a8c732e4,thallgren,2004-01-14T22:38:09Z,thomas@tada.se,thallgren,2004-01-14T22:38:09Z,thomas@tada.se,341,341,0,Not functional yet
,src/C/include/pljava/type/TriggerData.h,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/C/pljava/Function.c,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/C/pljava/type/NativeStruct.c,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/C/pljava/type/Oid.c,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/C/pljava/type/TriggerData.c,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/java/org/postgresql/pljava/internal/TriggerData.java,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,f8dd8d74bc9cb562440054064834a2a014d39d79,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,thallgren,2004-01-14T15:18:19Z,thomas@tada.se,128,73,55,Clean up of Triggers so that they now use ResultSet.
,examples/java/org/postgresql/pljava/example/Triggers.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/include/pljava/type/TriggerData.h,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/Function.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/AclId.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/ExecutionPlan.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/NativeStruct.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/Portal.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/Relation.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/SPITupleTable.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/TriggerData.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/Tuple.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/TupleDesc.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/TupleTable.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/TupleTableSlot.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/C/pljava/type/Type.c,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/TriggerData.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/TriggerException.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/internal/TriggerData.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,src/java/org/postgresql/pljava/jdbc/TriggerResultSet.java,416aab8e8267a6472445d64232a684820d720cdb,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,thallgren,2004-01-14T10:55:05Z,thomas@tada.se,1075,862,213,Added TriggerResultSet and interface for TriggerData.
,examples/java/org/postgresql/pljava/example/Triggers.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/SPI_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/AclId_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/NativeStruct.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/Portal_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/Relation_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/SPITupleTable_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/TriggerData_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/TupleDesc_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/TupleTableSlot_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/TupleTable_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/include/pljava/type/Tuple_JNI.h,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/SPI.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/AclId.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/ExecutionPlan.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/NativeStruct.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/Portal.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/Relation.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/SPITupleTable.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/TriggerData.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/Tuple.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/TupleDesc.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/TupleTable.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/C/pljava/type/TupleTableSlot.c,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/TriggerException.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/AclId.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/ExecutionPlan.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/NativeStruct.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Oid.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Portal.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Relation.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPI.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPIException.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/SPITupleTable.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TriggerData.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/Tuple.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleDesc.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleTable.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/internal/TupleTableSlot.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/AbstractResultSet.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/BlobValue.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ClobValue.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ObjectResultSet.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/ReadOnlyResultSet.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIConnection.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIResultSet.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/SPIStatement.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/StatementClosedException.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,src/java/org/postgresql/pljava/jdbc/UnsupportedFeatureException.java,4153beb178832bfb9c71d656a0b293b49eae72ea,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,thallgren,2004-01-14T00:14:27Z,thomas@tada.se,3365,3069,296,*** empty log message ***
,.classpath,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/include/pljava/type/.cvsignore,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/include/pljava/type/ExecutionPlan.h,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/include/pljava/type/Oid.h,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/pljava/type/ExecutionPlan.c,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/pljava/type/Oid.c,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/C/pljava/type/Relation.c,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,src/java/org/postgresql/pljava/ExecutionPlan.java,d917e46c0ebf7f4888ff8e9cffb2af9a866077fe,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,thallgren,2004-01-12T14:48:07Z,thomas@tada.se,360,348,12,Added stuff needed for ExecutionPlan management.
,.classpath,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,.cvsignore,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,examples/java/org/postgresql/pljava/example/Parameters.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,examples/java/org/postgresql/pljava/example/Triggers.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/SPI_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/Portal.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/Portal_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/SPITupleTable.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/SPITupleTable_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/Tuple.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/TupleTable.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/TupleTableSlot.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/TupleTableSlot_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/TupleTable_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/include/pljava/type/Tuple_JNI.h,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/SPI.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/pljava.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/NativeStruct.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/Portal.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/Relation.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/SPITupleTable.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/TriggerData.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/Tuple.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/TupleDesc.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/TupleTable.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/TupleTableSlot.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/C/pljava/type/Type.c,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/ExecutionPlan.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/Portal.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/SPI.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/SPITupleTable.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/Tuple.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/TupleTable.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,src/java/org/postgresql/pljava/TupleTableSlot.java,ccede4119d1e86113c8e96794ad4740668e69280,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,thallgren,2004-01-12T11:57:04Z,thomas@tada.se,1450,1377,73,Added classes to handle SPI cursors and complex set parameters.
,readme.htm,85e576830a861b9dc5e4707816325f69042a4d87,thallgren,2004-01-07T11:33:24Z,thomas@tada.se,thallgren,2004-01-07T11:33:24Z,thomas@tada.se,740,740,0,Initial revision
,.cdtproject,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,.classpath,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,examples/java/org/postgresql/pljava/example/Parameters.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,examples/java/org/postgresql/pljava/example/Triggers.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/Exception.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/Function.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/HashMap.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/HashMap_priv.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/Iterator.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/PgObject.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/PgObject_priv.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/pljava.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/AclId_JNI.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/NativeStruct.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Relation.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Relation_JNI.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/String.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/String_priv.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Timestamp.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/TriggerData.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/TriggerData_JNI.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Tuple.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/TupleDesc.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/TupleDesc_JNI.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Tuple_JNI.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Type.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/include/pljava/type/Type_priv.h,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/Exception.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/Function.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/HashMap.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/Iterator.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/PgObject.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/pljava.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/AclId.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/BigDecimal.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Boolean.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Byte.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Date.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Double.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Float.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Integer.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Long.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/NativeStruct.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Oid.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Relation.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Short.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/String.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Time.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Timestamp.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/TriggerData.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Tuple.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/TupleDesc.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Type.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/Void.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/C/pljava/type/byte_array.c,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/AclId.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/NativeStruct.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/Oid.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/Relation.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/TriggerData.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/TriggerException.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/Tuple.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,src/java/org/postgresql/pljava/TupleDesc.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,test/org/postgresql/pljava/test/Tester.java,d2285d74ac4da8e803676845e24fbfd1f6c4c9d4,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,thallgren,2004-01-07T11:10:33Z,thomas@tada.se,7212,7212,0,Initial revision
,org/gjt/cuspy/JarX.java,5e0acddcb73671d5060eb58174111cc7a0712cba,chap,2000-02-09T21:49:10Z,chap@gjt.org,chap,2000-02-09T21:49:10Z,chap@gjt.org,12,11,1,Added plug for bug votes on the jar file specification bug.
,org/gjt/cuspy/JarX.java,66dd83ead3478ff05f1551f775908bf72a448ffb,chap,2000-02-09T00:26:30Z,chap@gjt.org,chap,2000-02-09T00:26:30Z,chap@gjt.org,32,23,9,"There can be reasons to explicitly include directories in jars, and to extract
them even if they are empty, so JarX and Build now permit that."
,org/gjt/cuspy/JarX.java,3c83363c037c27272ef188eeb631f92c46ea9c3a,chap,2000-01-31T06:00:23Z,chap@gjt.org,chap,2000-01-31T06:00:23Z,chap@gjt.org,15,8,7,Corrected a type and two RFC links.
,org/gjt/cuspy/JarX.java,93353fb816804e3b800d5c7104833bd69d174bcf,chap,2000-01-29T22:21:57Z,chap@gjt.org,chap,2000-01-29T22:21:57Z,chap@gjt.org,33,24,9,"Using the ZipFile enumeration in extract(String) was a crock.  The enumeration
comes back in hashed order, the resulting seek time is atrocious, and on a
large enough jar, the oh-so-reliable ZipFile would eventually just barf.  Now
we open the file twice, the second time as a ZipInputStream.  It's more
reliable and faster, though it does introduce assumptions about the file being
a regular file, still there when we try to open it the second time, etc.
Sure would be nice if ZipFile worked better."
,org/gjt/cuspy/JarX.java,92cd3f7247dcdc2f1d7d76b2b187de09fb4b4432,chap,2000-01-29T04:35:46Z,chap@gjt.org,chap,2000-01-29T04:35:46Z,chap@gjt.org,1008,1008,0,Initial commit.
